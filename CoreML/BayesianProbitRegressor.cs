// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BayesianProbitRegressor.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CoreML.Specification {

  /// <summary>Holder for reflection information generated from BayesianProbitRegressor.proto</summary>
  public static partial class BayesianProbitRegressorReflection {

    #region Descriptor
    /// <summary>File descriptor for BayesianProbitRegressor.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BayesianProbitRegressorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1CYXllc2lhblByb2JpdFJlZ3Jlc3Nvci5wcm90bxIUQ29yZU1MLlNwZWNp",
            "ZmljYXRpb24ioAYKF0JheWVzaWFuUHJvYml0UmVncmVzc29yEhgKEG51bWJl",
            "ck9mRmVhdHVyZXMYASABKA0SRAoEYmlhcxgCIAEoCzI2LkNvcmVNTC5TcGVj",
            "aWZpY2F0aW9uLkJheWVzaWFuUHJvYml0UmVncmVzc29yLkdhdXNzaWFuEk0K",
            "CGZlYXR1cmVzGAMgAygLMjsuQ29yZU1MLlNwZWNpZmljYXRpb24uQmF5ZXNp",
            "YW5Qcm9iaXRSZWdyZXNzb3IuRmVhdHVyZVdlaWdodBIiChpyZWdyZXNzaW9u",
            "SW5wdXRGZWF0dXJlTmFtZRgKIAEoCRIgChhvcHRpbWlzbUlucHV0RmVhdHVy",
            "ZU5hbWUYCyABKAkSJQodc2FtcGxpbmdTY2FsZUlucHV0RmVhdHVyZU5hbWUY",
            "DCABKAkSKgoic2FtcGxpbmdUcnVuY2F0aW9uSW5wdXRGZWF0dXJlTmFtZRgN",
            "IAEoCRIdChVtZWFuT3V0cHV0RmVhdHVyZU5hbWUYFCABKAkSIQoZdmFyaWFu",
            "Y2VPdXRwdXRGZWF0dXJlTmFtZRgVIAEoCRIvCidwZXNzaW1pc3RpY1Byb2Jh",
            "YmlsaXR5T3V0cHV0RmVhdHVyZU5hbWUYFiABKAkSKwojc2FtcGxlZFByb2Jh",
            "YmlsaXR5T3V0cHV0RmVhdHVyZU5hbWUYFyABKAkaKwoIR2F1c3NpYW4SDAoE",
            "bWVhbhgBIAEoARIRCglwcmVjaXNpb24YAiABKAEaeQoSRmVhdHVyZVZhbHVl",
            "V2VpZ2h0EhQKDGZlYXR1cmVWYWx1ZRgBIAEoDRJNCg1mZWF0dXJlV2VpZ2h0",
            "GAIgASgLMjYuQ29yZU1MLlNwZWNpZmljYXRpb24uQmF5ZXNpYW5Qcm9iaXRS",
            "ZWdyZXNzb3IuR2F1c3NpYW4adQoNRmVhdHVyZVdlaWdodBIRCglmZWF0dXJl",
            "SWQYASABKA0SUQoHd2VpZ2h0cxgCIAMoCzJALkNvcmVNTC5TcGVjaWZpY2F0",
            "aW9uLkJheWVzaWFuUHJvYml0UmVncmVzc29yLkZlYXR1cmVWYWx1ZVdlaWdo",
            "dEICSANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.BayesianProbitRegressor), global::CoreML.Specification.BayesianProbitRegressor.Parser, new[]{ "NumberOfFeatures", "Bias", "Features", "RegressionInputFeatureName", "OptimismInputFeatureName", "SamplingScaleInputFeatureName", "SamplingTruncationInputFeatureName", "MeanOutputFeatureName", "VarianceOutputFeatureName", "PessimisticProbabilityOutputFeatureName", "SampledProbabilityOutputFeatureName" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.BayesianProbitRegressor.Types.Gaussian), global::CoreML.Specification.BayesianProbitRegressor.Types.Gaussian.Parser, new[]{ "Mean", "Precision" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.BayesianProbitRegressor.Types.FeatureValueWeight), global::CoreML.Specification.BayesianProbitRegressor.Types.FeatureValueWeight.Parser, new[]{ "FeatureValue", "FeatureWeight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.BayesianProbitRegressor.Types.FeatureWeight), global::CoreML.Specification.BayesianProbitRegressor.Types.FeatureWeight.Parser, new[]{ "FeatureId", "Weights" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BayesianProbitRegressor : pb::IMessage<BayesianProbitRegressor> {
    private static readonly pb::MessageParser<BayesianProbitRegressor> _parser = new pb::MessageParser<BayesianProbitRegressor>(() => new BayesianProbitRegressor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BayesianProbitRegressor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.BayesianProbitRegressorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BayesianProbitRegressor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BayesianProbitRegressor(BayesianProbitRegressor other) : this() {
      numberOfFeatures_ = other.numberOfFeatures_;
      bias_ = other.bias_ != null ? other.bias_.Clone() : null;
      features_ = other.features_.Clone();
      regressionInputFeatureName_ = other.regressionInputFeatureName_;
      optimismInputFeatureName_ = other.optimismInputFeatureName_;
      samplingScaleInputFeatureName_ = other.samplingScaleInputFeatureName_;
      samplingTruncationInputFeatureName_ = other.samplingTruncationInputFeatureName_;
      meanOutputFeatureName_ = other.meanOutputFeatureName_;
      varianceOutputFeatureName_ = other.varianceOutputFeatureName_;
      pessimisticProbabilityOutputFeatureName_ = other.pessimisticProbabilityOutputFeatureName_;
      sampledProbabilityOutputFeatureName_ = other.sampledProbabilityOutputFeatureName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BayesianProbitRegressor Clone() {
      return new BayesianProbitRegressor(this);
    }

    /// <summary>Field number for the "numberOfFeatures" field.</summary>
    public const int NumberOfFeaturesFieldNumber = 1;
    private uint numberOfFeatures_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumberOfFeatures {
      get { return numberOfFeatures_; }
      set {
        numberOfFeatures_ = value;
      }
    }

    /// <summary>Field number for the "bias" field.</summary>
    public const int BiasFieldNumber = 2;
    private global::CoreML.Specification.BayesianProbitRegressor.Types.Gaussian bias_;
    /// <summary>
    /// bias term
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.BayesianProbitRegressor.Types.Gaussian Bias {
      get { return bias_; }
      set {
        bias_ = value;
      }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::CoreML.Specification.BayesianProbitRegressor.Types.FeatureWeight> _repeated_features_codec
        = pb::FieldCodec.ForMessage(26, global::CoreML.Specification.BayesianProbitRegressor.Types.FeatureWeight.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.BayesianProbitRegressor.Types.FeatureWeight> features_ = new pbc::RepeatedField<global::CoreML.Specification.BayesianProbitRegressor.Types.FeatureWeight>();
    /// <summary>
    ///
    /// Set of features with associated weights
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.BayesianProbitRegressor.Types.FeatureWeight> Features {
      get { return features_; }
    }

    /// <summary>Field number for the "regressionInputFeatureName" field.</summary>
    public const int RegressionInputFeatureNameFieldNumber = 10;
    private string regressionInputFeatureName_ = "";
    /// <summary>
    ///
    /// Set this name to be the same as input feature of type multi-array (1D)
    /// in the model description you want to use as the regression input
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegressionInputFeatureName {
      get { return regressionInputFeatureName_; }
      set {
        regressionInputFeatureName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "optimismInputFeatureName" field.</summary>
    public const int OptimismInputFeatureNameFieldNumber = 11;
    private string optimismInputFeatureName_ = "";
    /// <summary>
    ///
    /// Set this name to be the same as optional input feature of type double
    /// in the model description you want to use as the optimism input
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OptimismInputFeatureName {
      get { return optimismInputFeatureName_; }
      set {
        optimismInputFeatureName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "samplingScaleInputFeatureName" field.</summary>
    public const int SamplingScaleInputFeatureNameFieldNumber = 12;
    private string samplingScaleInputFeatureName_ = "";
    /// <summary>
    ///
    /// Set this name to be the same as optional input feature of type double
    /// in the model description you want to use as the samplingScale input
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SamplingScaleInputFeatureName {
      get { return samplingScaleInputFeatureName_; }
      set {
        samplingScaleInputFeatureName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "samplingTruncationInputFeatureName" field.</summary>
    public const int SamplingTruncationInputFeatureNameFieldNumber = 13;
    private string samplingTruncationInputFeatureName_ = "";
    /// <summary>
    ///
    /// Set this name to be the same as optional input feature of type double
    /// in the model description you want to use as the samplingBounds input
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SamplingTruncationInputFeatureName {
      get { return samplingTruncationInputFeatureName_; }
      set {
        samplingTruncationInputFeatureName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "meanOutputFeatureName" field.</summary>
    public const int MeanOutputFeatureNameFieldNumber = 20;
    private string meanOutputFeatureName_ = "";
    /// <summary>
    ///
    /// name of 'mean' output feature
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeanOutputFeatureName {
      get { return meanOutputFeatureName_; }
      set {
        meanOutputFeatureName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "varianceOutputFeatureName" field.</summary>
    public const int VarianceOutputFeatureNameFieldNumber = 21;
    private string varianceOutputFeatureName_ = "";
    /// <summary>
    ///
    /// name of 'variance' output feature
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VarianceOutputFeatureName {
      get { return varianceOutputFeatureName_; }
      set {
        varianceOutputFeatureName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pessimisticProbabilityOutputFeatureName" field.</summary>
    public const int PessimisticProbabilityOutputFeatureNameFieldNumber = 22;
    private string pessimisticProbabilityOutputFeatureName_ = "";
    /// <summary>
    ///
    /// name of 'pessimistic' output feature
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PessimisticProbabilityOutputFeatureName {
      get { return pessimisticProbabilityOutputFeatureName_; }
      set {
        pessimisticProbabilityOutputFeatureName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sampledProbabilityOutputFeatureName" field.</summary>
    public const int SampledProbabilityOutputFeatureNameFieldNumber = 23;
    private string sampledProbabilityOutputFeatureName_ = "";
    /// <summary>
    ///
    /// name of 'sampled' output feature: samples from the scaled posterior probability distribuiton
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SampledProbabilityOutputFeatureName {
      get { return sampledProbabilityOutputFeatureName_; }
      set {
        sampledProbabilityOutputFeatureName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BayesianProbitRegressor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BayesianProbitRegressor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumberOfFeatures != other.NumberOfFeatures) return false;
      if (!object.Equals(Bias, other.Bias)) return false;
      if(!features_.Equals(other.features_)) return false;
      if (RegressionInputFeatureName != other.RegressionInputFeatureName) return false;
      if (OptimismInputFeatureName != other.OptimismInputFeatureName) return false;
      if (SamplingScaleInputFeatureName != other.SamplingScaleInputFeatureName) return false;
      if (SamplingTruncationInputFeatureName != other.SamplingTruncationInputFeatureName) return false;
      if (MeanOutputFeatureName != other.MeanOutputFeatureName) return false;
      if (VarianceOutputFeatureName != other.VarianceOutputFeatureName) return false;
      if (PessimisticProbabilityOutputFeatureName != other.PessimisticProbabilityOutputFeatureName) return false;
      if (SampledProbabilityOutputFeatureName != other.SampledProbabilityOutputFeatureName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumberOfFeatures != 0) hash ^= NumberOfFeatures.GetHashCode();
      if (bias_ != null) hash ^= Bias.GetHashCode();
      hash ^= features_.GetHashCode();
      if (RegressionInputFeatureName.Length != 0) hash ^= RegressionInputFeatureName.GetHashCode();
      if (OptimismInputFeatureName.Length != 0) hash ^= OptimismInputFeatureName.GetHashCode();
      if (SamplingScaleInputFeatureName.Length != 0) hash ^= SamplingScaleInputFeatureName.GetHashCode();
      if (SamplingTruncationInputFeatureName.Length != 0) hash ^= SamplingTruncationInputFeatureName.GetHashCode();
      if (MeanOutputFeatureName.Length != 0) hash ^= MeanOutputFeatureName.GetHashCode();
      if (VarianceOutputFeatureName.Length != 0) hash ^= VarianceOutputFeatureName.GetHashCode();
      if (PessimisticProbabilityOutputFeatureName.Length != 0) hash ^= PessimisticProbabilityOutputFeatureName.GetHashCode();
      if (SampledProbabilityOutputFeatureName.Length != 0) hash ^= SampledProbabilityOutputFeatureName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumberOfFeatures != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumberOfFeatures);
      }
      if (bias_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Bias);
      }
      features_.WriteTo(output, _repeated_features_codec);
      if (RegressionInputFeatureName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RegressionInputFeatureName);
      }
      if (OptimismInputFeatureName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(OptimismInputFeatureName);
      }
      if (SamplingScaleInputFeatureName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(SamplingScaleInputFeatureName);
      }
      if (SamplingTruncationInputFeatureName.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(SamplingTruncationInputFeatureName);
      }
      if (MeanOutputFeatureName.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(MeanOutputFeatureName);
      }
      if (VarianceOutputFeatureName.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(VarianceOutputFeatureName);
      }
      if (PessimisticProbabilityOutputFeatureName.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(PessimisticProbabilityOutputFeatureName);
      }
      if (SampledProbabilityOutputFeatureName.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(SampledProbabilityOutputFeatureName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumberOfFeatures != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumberOfFeatures);
      }
      if (bias_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bias);
      }
      size += features_.CalculateSize(_repeated_features_codec);
      if (RegressionInputFeatureName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegressionInputFeatureName);
      }
      if (OptimismInputFeatureName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OptimismInputFeatureName);
      }
      if (SamplingScaleInputFeatureName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SamplingScaleInputFeatureName);
      }
      if (SamplingTruncationInputFeatureName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SamplingTruncationInputFeatureName);
      }
      if (MeanOutputFeatureName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MeanOutputFeatureName);
      }
      if (VarianceOutputFeatureName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VarianceOutputFeatureName);
      }
      if (PessimisticProbabilityOutputFeatureName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PessimisticProbabilityOutputFeatureName);
      }
      if (SampledProbabilityOutputFeatureName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SampledProbabilityOutputFeatureName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BayesianProbitRegressor other) {
      if (other == null) {
        return;
      }
      if (other.NumberOfFeatures != 0) {
        NumberOfFeatures = other.NumberOfFeatures;
      }
      if (other.bias_ != null) {
        if (bias_ == null) {
          bias_ = new global::CoreML.Specification.BayesianProbitRegressor.Types.Gaussian();
        }
        Bias.MergeFrom(other.Bias);
      }
      features_.Add(other.features_);
      if (other.RegressionInputFeatureName.Length != 0) {
        RegressionInputFeatureName = other.RegressionInputFeatureName;
      }
      if (other.OptimismInputFeatureName.Length != 0) {
        OptimismInputFeatureName = other.OptimismInputFeatureName;
      }
      if (other.SamplingScaleInputFeatureName.Length != 0) {
        SamplingScaleInputFeatureName = other.SamplingScaleInputFeatureName;
      }
      if (other.SamplingTruncationInputFeatureName.Length != 0) {
        SamplingTruncationInputFeatureName = other.SamplingTruncationInputFeatureName;
      }
      if (other.MeanOutputFeatureName.Length != 0) {
        MeanOutputFeatureName = other.MeanOutputFeatureName;
      }
      if (other.VarianceOutputFeatureName.Length != 0) {
        VarianceOutputFeatureName = other.VarianceOutputFeatureName;
      }
      if (other.PessimisticProbabilityOutputFeatureName.Length != 0) {
        PessimisticProbabilityOutputFeatureName = other.PessimisticProbabilityOutputFeatureName;
      }
      if (other.SampledProbabilityOutputFeatureName.Length != 0) {
        SampledProbabilityOutputFeatureName = other.SampledProbabilityOutputFeatureName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NumberOfFeatures = input.ReadUInt32();
            break;
          }
          case 18: {
            if (bias_ == null) {
              bias_ = new global::CoreML.Specification.BayesianProbitRegressor.Types.Gaussian();
            }
            input.ReadMessage(bias_);
            break;
          }
          case 26: {
            features_.AddEntriesFrom(input, _repeated_features_codec);
            break;
          }
          case 82: {
            RegressionInputFeatureName = input.ReadString();
            break;
          }
          case 90: {
            OptimismInputFeatureName = input.ReadString();
            break;
          }
          case 98: {
            SamplingScaleInputFeatureName = input.ReadString();
            break;
          }
          case 106: {
            SamplingTruncationInputFeatureName = input.ReadString();
            break;
          }
          case 162: {
            MeanOutputFeatureName = input.ReadString();
            break;
          }
          case 170: {
            VarianceOutputFeatureName = input.ReadString();
            break;
          }
          case 178: {
            PessimisticProbabilityOutputFeatureName = input.ReadString();
            break;
          }
          case 186: {
            SampledProbabilityOutputFeatureName = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BayesianProbitRegressor message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///
      /// Parameterization of a Gaussian distribution
      /// </summary>
      public sealed partial class Gaussian : pb::IMessage<Gaussian> {
        private static readonly pb::MessageParser<Gaussian> _parser = new pb::MessageParser<Gaussian>(() => new Gaussian());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Gaussian> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CoreML.Specification.BayesianProbitRegressor.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Gaussian() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Gaussian(Gaussian other) : this() {
          mean_ = other.mean_;
          precision_ = other.precision_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Gaussian Clone() {
          return new Gaussian(this);
        }

        /// <summary>Field number for the "mean" field.</summary>
        public const int MeanFieldNumber = 1;
        private double mean_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Mean {
          get { return mean_; }
          set {
            mean_ = value;
          }
        }

        /// <summary>Field number for the "precision" field.</summary>
        public const int PrecisionFieldNumber = 2;
        private double precision_;
        /// <summary>
        /// inverse of the variance
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Precision {
          get { return precision_; }
          set {
            precision_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Gaussian);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Gaussian other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Mean, other.Mean)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Precision, other.Precision)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Mean != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Mean);
          if (Precision != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Precision);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Mean != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Mean);
          }
          if (Precision != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Precision);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Mean != 0D) {
            size += 1 + 8;
          }
          if (Precision != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Gaussian other) {
          if (other == null) {
            return;
          }
          if (other.Mean != 0D) {
            Mean = other.Mean;
          }
          if (other.Precision != 0D) {
            Precision = other.Precision;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Mean = input.ReadDouble();
                break;
              }
              case 17: {
                Precision = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///
      /// Weight for a specific feature value
      /// The weight is represented as a Gaussian distribution
      /// with a mean and precision (1/variance) to capture
      /// uncertainty in the weight
      /// </summary>
      public sealed partial class FeatureValueWeight : pb::IMessage<FeatureValueWeight> {
        private static readonly pb::MessageParser<FeatureValueWeight> _parser = new pb::MessageParser<FeatureValueWeight>(() => new FeatureValueWeight());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FeatureValueWeight> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CoreML.Specification.BayesianProbitRegressor.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeatureValueWeight() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeatureValueWeight(FeatureValueWeight other) : this() {
          featureValue_ = other.featureValue_;
          featureWeight_ = other.featureWeight_ != null ? other.featureWeight_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeatureValueWeight Clone() {
          return new FeatureValueWeight(this);
        }

        /// <summary>Field number for the "featureValue" field.</summary>
        public const int FeatureValueFieldNumber = 1;
        private uint featureValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint FeatureValue {
          get { return featureValue_; }
          set {
            featureValue_ = value;
          }
        }

        /// <summary>Field number for the "featureWeight" field.</summary>
        public const int FeatureWeightFieldNumber = 2;
        private global::CoreML.Specification.BayesianProbitRegressor.Types.Gaussian featureWeight_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CoreML.Specification.BayesianProbitRegressor.Types.Gaussian FeatureWeight {
          get { return featureWeight_; }
          set {
            featureWeight_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FeatureValueWeight);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FeatureValueWeight other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FeatureValue != other.FeatureValue) return false;
          if (!object.Equals(FeatureWeight, other.FeatureWeight)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FeatureValue != 0) hash ^= FeatureValue.GetHashCode();
          if (featureWeight_ != null) hash ^= FeatureWeight.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FeatureValue != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(FeatureValue);
          }
          if (featureWeight_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(FeatureWeight);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FeatureValue != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FeatureValue);
          }
          if (featureWeight_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeatureWeight);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FeatureValueWeight other) {
          if (other == null) {
            return;
          }
          if (other.FeatureValue != 0) {
            FeatureValue = other.FeatureValue;
          }
          if (other.featureWeight_ != null) {
            if (featureWeight_ == null) {
              featureWeight_ = new global::CoreML.Specification.BayesianProbitRegressor.Types.Gaussian();
            }
            FeatureWeight.MergeFrom(other.FeatureWeight);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                FeatureValue = input.ReadUInt32();
                break;
              }
              case 18: {
                if (featureWeight_ == null) {
                  featureWeight_ = new global::CoreML.Specification.BayesianProbitRegressor.Types.Gaussian();
                }
                input.ReadMessage(featureWeight_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///
      /// Feature with associated weights (for different values)
      /// Each feature has a set of weights for the (discrete) values
      /// it can take
      /// </summary>
      public sealed partial class FeatureWeight : pb::IMessage<FeatureWeight> {
        private static readonly pb::MessageParser<FeatureWeight> _parser = new pb::MessageParser<FeatureWeight>(() => new FeatureWeight());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FeatureWeight> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CoreML.Specification.BayesianProbitRegressor.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeatureWeight() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeatureWeight(FeatureWeight other) : this() {
          featureId_ = other.featureId_;
          weights_ = other.weights_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeatureWeight Clone() {
          return new FeatureWeight(this);
        }

        /// <summary>Field number for the "featureId" field.</summary>
        public const int FeatureIdFieldNumber = 1;
        private uint featureId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint FeatureId {
          get { return featureId_; }
          set {
            featureId_ = value;
          }
        }

        /// <summary>Field number for the "weights" field.</summary>
        public const int WeightsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::CoreML.Specification.BayesianProbitRegressor.Types.FeatureValueWeight> _repeated_weights_codec
            = pb::FieldCodec.ForMessage(18, global::CoreML.Specification.BayesianProbitRegressor.Types.FeatureValueWeight.Parser);
        private readonly pbc::RepeatedField<global::CoreML.Specification.BayesianProbitRegressor.Types.FeatureValueWeight> weights_ = new pbc::RepeatedField<global::CoreML.Specification.BayesianProbitRegressor.Types.FeatureValueWeight>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::CoreML.Specification.BayesianProbitRegressor.Types.FeatureValueWeight> Weights {
          get { return weights_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FeatureWeight);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FeatureWeight other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FeatureId != other.FeatureId) return false;
          if(!weights_.Equals(other.weights_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FeatureId != 0) hash ^= FeatureId.GetHashCode();
          hash ^= weights_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FeatureId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(FeatureId);
          }
          weights_.WriteTo(output, _repeated_weights_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FeatureId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FeatureId);
          }
          size += weights_.CalculateSize(_repeated_weights_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FeatureWeight other) {
          if (other == null) {
            return;
          }
          if (other.FeatureId != 0) {
            FeatureId = other.FeatureId;
          }
          weights_.Add(other.weights_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                FeatureId = input.ReadUInt32();
                break;
              }
              case 18: {
                weights_.AddEntriesFrom(input, _repeated_weights_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code

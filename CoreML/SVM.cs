// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SVM.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CoreML.Specification {

  /// <summary>Holder for reflection information generated from SVM.proto</summary>
  public static partial class SVMReflection {

    #region Descriptor
    /// <summary>File descriptor for SVM.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SVMReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglTVk0ucHJvdG8SFENvcmVNTC5TcGVjaWZpY2F0aW9uGhREYXRhU3RydWN0",
            "dXJlcy5wcm90byIOCgxMaW5lYXJLZXJuZWwiGgoJUkJGS2VybmVsEg0KBWdh",
            "bW1hGAEgASgBIjYKClBvbHlLZXJuZWwSDgoGZGVncmVlGAEgASgFEgkKAWMY",
            "AiABKAESDQoFZ2FtbWEYAyABKAEiKQoNU2lnbW9pZEtlcm5lbBINCgVnYW1t",
            "YRgBIAEoARIJCgFjGAIgASgBIvoBCgZLZXJuZWwSOgoMbGluZWFyS2VybmVs",
            "GAEgASgLMiIuQ29yZU1MLlNwZWNpZmljYXRpb24uTGluZWFyS2VybmVsSAAS",
            "NAoJcmJmS2VybmVsGAIgASgLMh8uQ29yZU1MLlNwZWNpZmljYXRpb24uUkJG",
            "S2VybmVsSAASNgoKcG9seUtlcm5lbBgDIAEoCzIgLkNvcmVNTC5TcGVjaWZp",
            "Y2F0aW9uLlBvbHlLZXJuZWxIABI8Cg1zaWdtb2lkS2VybmVsGAQgASgLMiMu",
            "Q29yZU1MLlNwZWNpZmljYXRpb24uU2lnbW9pZEtlcm5lbEgAQggKBmtlcm5l",
            "bCIqCgpTcGFyc2VOb2RlEg0KBWluZGV4GAEgASgFEg0KBXZhbHVlGAIgASgB",
            "Ij8KDFNwYXJzZVZlY3RvchIvCgVub2RlcxgBIAMoCzIgLkNvcmVNTC5TcGVj",
            "aWZpY2F0aW9uLlNwYXJzZU5vZGUiSwoUU3BhcnNlU3VwcG9ydFZlY3RvcnMS",
            "MwoHdmVjdG9ycxgBIAMoCzIiLkNvcmVNTC5TcGVjaWZpY2F0aW9uLlNwYXJz",
            "ZVZlY3RvciIdCgtEZW5zZVZlY3RvchIOCgZ2YWx1ZXMYASADKAEiSQoTRGVu",
            "c2VTdXBwb3J0VmVjdG9ycxIyCgd2ZWN0b3JzGAEgAygLMiEuQ29yZU1MLlNw",
            "ZWNpZmljYXRpb24uRGVuc2VWZWN0b3IiHQoMQ29lZmZpY2llbnRzEg0KBWFs",
            "cGhhGAEgAygBIrUCChZTdXBwb3J0VmVjdG9yUmVncmVzc29yEiwKBmtlcm5l",
            "bBgBIAEoCzIcLkNvcmVNTC5TcGVjaWZpY2F0aW9uLktlcm5lbBJKChRzcGFy",
            "c2VTdXBwb3J0VmVjdG9ycxgCIAEoCzIqLkNvcmVNTC5TcGVjaWZpY2F0aW9u",
            "LlNwYXJzZVN1cHBvcnRWZWN0b3JzSAASSAoTZGVuc2VTdXBwb3J0VmVjdG9y",
            "cxgDIAEoCzIpLkNvcmVNTC5TcGVjaWZpY2F0aW9uLkRlbnNlU3VwcG9ydFZl",
            "Y3RvcnNIABI4Cgxjb2VmZmljaWVudHMYBCABKAsyIi5Db3JlTUwuU3BlY2lm",
            "aWNhdGlvbi5Db2VmZmljaWVudHMSCwoDcmhvGAUgASgBQhAKDnN1cHBvcnRW",
            "ZWN0b3JzIosEChdTdXBwb3J0VmVjdG9yQ2xhc3NpZmllchIsCgZrZXJuZWwY",
            "ASABKAsyHC5Db3JlTUwuU3BlY2lmaWNhdGlvbi5LZXJuZWwSJgoebnVtYmVy",
            "T2ZTdXBwb3J0VmVjdG9yc1BlckNsYXNzGAIgAygFEkoKFHNwYXJzZVN1cHBv",
            "cnRWZWN0b3JzGAMgASgLMiouQ29yZU1MLlNwZWNpZmljYXRpb24uU3BhcnNl",
            "U3VwcG9ydFZlY3RvcnNIABJIChNkZW5zZVN1cHBvcnRWZWN0b3JzGAQgASgL",
            "MikuQ29yZU1MLlNwZWNpZmljYXRpb24uRGVuc2VTdXBwb3J0VmVjdG9yc0gA",
            "EjgKDGNvZWZmaWNpZW50cxgFIAMoCzIiLkNvcmVNTC5TcGVjaWZpY2F0aW9u",
            "LkNvZWZmaWNpZW50cxILCgNyaG8YBiADKAESDQoFcHJvYkEYByADKAESDQoF",
            "cHJvYkIYCCADKAESPwoRc3RyaW5nQ2xhc3NMYWJlbHMYZCABKAsyIi5Db3Jl",
            "TUwuU3BlY2lmaWNhdGlvbi5TdHJpbmdWZWN0b3JIARI9ChBpbnQ2NENsYXNz",
            "TGFiZWxzGGUgASgLMiEuQ29yZU1MLlNwZWNpZmljYXRpb24uSW50NjRWZWN0",
            "b3JIAUIQCg5zdXBwb3J0VmVjdG9yc0INCgtDbGFzc0xhYmVsc0ICSANQAGIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::CoreML.Specification.DataStructuresReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.LinearKernel), global::CoreML.Specification.LinearKernel.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.RBFKernel), global::CoreML.Specification.RBFKernel.Parser, new[]{ "Gamma" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.PolyKernel), global::CoreML.Specification.PolyKernel.Parser, new[]{ "Degree", "C", "Gamma" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.SigmoidKernel), global::CoreML.Specification.SigmoidKernel.Parser, new[]{ "Gamma", "C" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.Kernel), global::CoreML.Specification.Kernel.Parser, new[]{ "LinearKernel", "RbfKernel", "PolyKernel", "SigmoidKernel" }, new[]{ "Kernel" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.SparseNode), global::CoreML.Specification.SparseNode.Parser, new[]{ "Index", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.SparseVector), global::CoreML.Specification.SparseVector.Parser, new[]{ "Nodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.SparseSupportVectors), global::CoreML.Specification.SparseSupportVectors.Parser, new[]{ "Vectors" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.DenseVector), global::CoreML.Specification.DenseVector.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.DenseSupportVectors), global::CoreML.Specification.DenseSupportVectors.Parser, new[]{ "Vectors" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.Coefficients), global::CoreML.Specification.Coefficients.Parser, new[]{ "Alpha" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.SupportVectorRegressor), global::CoreML.Specification.SupportVectorRegressor.Parser, new[]{ "Kernel", "SparseSupportVectors", "DenseSupportVectors", "Coefficients", "Rho" }, new[]{ "SupportVectors" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.SupportVectorClassifier), global::CoreML.Specification.SupportVectorClassifier.Parser, new[]{ "Kernel", "NumberOfSupportVectorsPerClass", "SparseSupportVectors", "DenseSupportVectors", "Coefficients", "Rho", "ProbA", "ProbB", "StringClassLabels", "Int64ClassLabels" }, new[]{ "SupportVectors", "ClassLabels" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// A linear kernel.
  ///
  /// This function has the following formula:
  ///
  /// .. math::
  ///     K(\boldsymbol{x}, \boldsymbol{x'}) = \boldsymbol{x}^T \boldsymbol{x'}
  /// </summary>
  public sealed partial class LinearKernel : pb::IMessage<LinearKernel> {
    private static readonly pb::MessageParser<LinearKernel> _parser = new pb::MessageParser<LinearKernel>(() => new LinearKernel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LinearKernel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.SVMReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinearKernel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinearKernel(LinearKernel other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinearKernel Clone() {
      return new LinearKernel(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LinearKernel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LinearKernel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LinearKernel other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A Gaussian radial basis function (RBF) kernel.
  ///
  /// This function has the following formula:
  ///
  /// .. math::
  ///     K(\boldsymbol{x}, \boldsymbol{x'}) = \
  ///          \exp(-\gamma || \boldsymbol{x} - \boldsymbol{x'} ||^2 )
  /// </summary>
  public sealed partial class RBFKernel : pb::IMessage<RBFKernel> {
    private static readonly pb::MessageParser<RBFKernel> _parser = new pb::MessageParser<RBFKernel>(() => new RBFKernel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RBFKernel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.SVMReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RBFKernel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RBFKernel(RBFKernel other) : this() {
      gamma_ = other.gamma_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RBFKernel Clone() {
      return new RBFKernel(this);
    }

    /// <summary>Field number for the "gamma" field.</summary>
    public const int GammaFieldNumber = 1;
    private double gamma_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Gamma {
      get { return gamma_; }
      set {
        gamma_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RBFKernel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RBFKernel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gamma != other.Gamma) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Gamma != 0D) hash ^= Gamma.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Gamma != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Gamma);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gamma != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RBFKernel other) {
      if (other == null) {
        return;
      }
      if (other.Gamma != 0D) {
        Gamma = other.Gamma;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Gamma = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A polynomial kernel.
  ///
  /// This function has the following formula:
  ///
  /// .. math::
  ///     K(\boldsymbol{x}, \boldsymbol{x'}) = \
  ///           (\gamma \boldsymbol{x}^T \boldsymbol{x'} + c)^{degree}
  /// </summary>
  public sealed partial class PolyKernel : pb::IMessage<PolyKernel> {
    private static readonly pb::MessageParser<PolyKernel> _parser = new pb::MessageParser<PolyKernel>(() => new PolyKernel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PolyKernel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.SVMReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolyKernel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolyKernel(PolyKernel other) : this() {
      degree_ = other.degree_;
      c_ = other.c_;
      gamma_ = other.gamma_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolyKernel Clone() {
      return new PolyKernel(this);
    }

    /// <summary>Field number for the "degree" field.</summary>
    public const int DegreeFieldNumber = 1;
    private int degree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Degree {
      get { return degree_; }
      set {
        degree_ = value;
      }
    }

    /// <summary>Field number for the "c" field.</summary>
    public const int CFieldNumber = 2;
    private double c_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double C {
      get { return c_; }
      set {
        c_ = value;
      }
    }

    /// <summary>Field number for the "gamma" field.</summary>
    public const int GammaFieldNumber = 3;
    private double gamma_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Gamma {
      get { return gamma_; }
      set {
        gamma_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PolyKernel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PolyKernel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Degree != other.Degree) return false;
      if (C != other.C) return false;
      if (Gamma != other.Gamma) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Degree != 0) hash ^= Degree.GetHashCode();
      if (C != 0D) hash ^= C.GetHashCode();
      if (Gamma != 0D) hash ^= Gamma.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Degree != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Degree);
      }
      if (C != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(C);
      }
      if (Gamma != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Gamma);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Degree != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Degree);
      }
      if (C != 0D) {
        size += 1 + 8;
      }
      if (Gamma != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PolyKernel other) {
      if (other == null) {
        return;
      }
      if (other.Degree != 0) {
        Degree = other.Degree;
      }
      if (other.C != 0D) {
        C = other.C;
      }
      if (other.Gamma != 0D) {
        Gamma = other.Gamma;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Degree = input.ReadInt32();
            break;
          }
          case 17: {
            C = input.ReadDouble();
            break;
          }
          case 25: {
            Gamma = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A sigmoid kernel.
  ///
  /// This function has the following formula:
  ///
  /// .. math::
  ///     K(\boldsymbol{x}, \boldsymbol{x'}) = \
  ///           \tanh(\gamma \boldsymbol{x}^T \boldsymbol{x'} + c)
  /// </summary>
  public sealed partial class SigmoidKernel : pb::IMessage<SigmoidKernel> {
    private static readonly pb::MessageParser<SigmoidKernel> _parser = new pb::MessageParser<SigmoidKernel>(() => new SigmoidKernel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SigmoidKernel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.SVMReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigmoidKernel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigmoidKernel(SigmoidKernel other) : this() {
      gamma_ = other.gamma_;
      c_ = other.c_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigmoidKernel Clone() {
      return new SigmoidKernel(this);
    }

    /// <summary>Field number for the "gamma" field.</summary>
    public const int GammaFieldNumber = 1;
    private double gamma_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Gamma {
      get { return gamma_; }
      set {
        gamma_ = value;
      }
    }

    /// <summary>Field number for the "c" field.</summary>
    public const int CFieldNumber = 2;
    private double c_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double C {
      get { return c_; }
      set {
        c_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SigmoidKernel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SigmoidKernel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gamma != other.Gamma) return false;
      if (C != other.C) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Gamma != 0D) hash ^= Gamma.GetHashCode();
      if (C != 0D) hash ^= C.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Gamma != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Gamma);
      }
      if (C != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(C);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gamma != 0D) {
        size += 1 + 8;
      }
      if (C != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SigmoidKernel other) {
      if (other == null) {
        return;
      }
      if (other.Gamma != 0D) {
        Gamma = other.Gamma;
      }
      if (other.C != 0D) {
        C = other.C;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Gamma = input.ReadDouble();
            break;
          }
          case 17: {
            C = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A kernel.
  /// </summary>
  public sealed partial class Kernel : pb::IMessage<Kernel> {
    private static readonly pb::MessageParser<Kernel> _parser = new pb::MessageParser<Kernel>(() => new Kernel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Kernel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.SVMReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kernel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kernel(Kernel other) : this() {
      switch (other.KernelCase) {
        case KernelOneofCase.LinearKernel:
          LinearKernel = other.LinearKernel.Clone();
          break;
        case KernelOneofCase.RbfKernel:
          RbfKernel = other.RbfKernel.Clone();
          break;
        case KernelOneofCase.PolyKernel:
          PolyKernel = other.PolyKernel.Clone();
          break;
        case KernelOneofCase.SigmoidKernel:
          SigmoidKernel = other.SigmoidKernel.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kernel Clone() {
      return new Kernel(this);
    }

    /// <summary>Field number for the "linearKernel" field.</summary>
    public const int LinearKernelFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.LinearKernel LinearKernel {
      get { return kernelCase_ == KernelOneofCase.LinearKernel ? (global::CoreML.Specification.LinearKernel) kernel_ : null; }
      set {
        kernel_ = value;
        kernelCase_ = value == null ? KernelOneofCase.None : KernelOneofCase.LinearKernel;
      }
    }

    /// <summary>Field number for the "rbfKernel" field.</summary>
    public const int RbfKernelFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.RBFKernel RbfKernel {
      get { return kernelCase_ == KernelOneofCase.RbfKernel ? (global::CoreML.Specification.RBFKernel) kernel_ : null; }
      set {
        kernel_ = value;
        kernelCase_ = value == null ? KernelOneofCase.None : KernelOneofCase.RbfKernel;
      }
    }

    /// <summary>Field number for the "polyKernel" field.</summary>
    public const int PolyKernelFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.PolyKernel PolyKernel {
      get { return kernelCase_ == KernelOneofCase.PolyKernel ? (global::CoreML.Specification.PolyKernel) kernel_ : null; }
      set {
        kernel_ = value;
        kernelCase_ = value == null ? KernelOneofCase.None : KernelOneofCase.PolyKernel;
      }
    }

    /// <summary>Field number for the "sigmoidKernel" field.</summary>
    public const int SigmoidKernelFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.SigmoidKernel SigmoidKernel {
      get { return kernelCase_ == KernelOneofCase.SigmoidKernel ? (global::CoreML.Specification.SigmoidKernel) kernel_ : null; }
      set {
        kernel_ = value;
        kernelCase_ = value == null ? KernelOneofCase.None : KernelOneofCase.SigmoidKernel;
      }
    }

    private object kernel_;
    /// <summary>Enum of possible cases for the "kernel" oneof.</summary>
    public enum KernelOneofCase {
      None = 0,
      LinearKernel = 1,
      RbfKernel = 2,
      PolyKernel = 3,
      SigmoidKernel = 4,
    }
    private KernelOneofCase kernelCase_ = KernelOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KernelOneofCase KernelCase {
      get { return kernelCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKernel() {
      kernelCase_ = KernelOneofCase.None;
      kernel_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Kernel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Kernel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LinearKernel, other.LinearKernel)) return false;
      if (!object.Equals(RbfKernel, other.RbfKernel)) return false;
      if (!object.Equals(PolyKernel, other.PolyKernel)) return false;
      if (!object.Equals(SigmoidKernel, other.SigmoidKernel)) return false;
      if (KernelCase != other.KernelCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (kernelCase_ == KernelOneofCase.LinearKernel) hash ^= LinearKernel.GetHashCode();
      if (kernelCase_ == KernelOneofCase.RbfKernel) hash ^= RbfKernel.GetHashCode();
      if (kernelCase_ == KernelOneofCase.PolyKernel) hash ^= PolyKernel.GetHashCode();
      if (kernelCase_ == KernelOneofCase.SigmoidKernel) hash ^= SigmoidKernel.GetHashCode();
      hash ^= (int) kernelCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (kernelCase_ == KernelOneofCase.LinearKernel) {
        output.WriteRawTag(10);
        output.WriteMessage(LinearKernel);
      }
      if (kernelCase_ == KernelOneofCase.RbfKernel) {
        output.WriteRawTag(18);
        output.WriteMessage(RbfKernel);
      }
      if (kernelCase_ == KernelOneofCase.PolyKernel) {
        output.WriteRawTag(26);
        output.WriteMessage(PolyKernel);
      }
      if (kernelCase_ == KernelOneofCase.SigmoidKernel) {
        output.WriteRawTag(34);
        output.WriteMessage(SigmoidKernel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (kernelCase_ == KernelOneofCase.LinearKernel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinearKernel);
      }
      if (kernelCase_ == KernelOneofCase.RbfKernel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RbfKernel);
      }
      if (kernelCase_ == KernelOneofCase.PolyKernel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PolyKernel);
      }
      if (kernelCase_ == KernelOneofCase.SigmoidKernel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SigmoidKernel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Kernel other) {
      if (other == null) {
        return;
      }
      switch (other.KernelCase) {
        case KernelOneofCase.LinearKernel:
          LinearKernel = other.LinearKernel;
          break;
        case KernelOneofCase.RbfKernel:
          RbfKernel = other.RbfKernel;
          break;
        case KernelOneofCase.PolyKernel:
          PolyKernel = other.PolyKernel;
          break;
        case KernelOneofCase.SigmoidKernel:
          SigmoidKernel = other.SigmoidKernel;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::CoreML.Specification.LinearKernel subBuilder = new global::CoreML.Specification.LinearKernel();
            if (kernelCase_ == KernelOneofCase.LinearKernel) {
              subBuilder.MergeFrom(LinearKernel);
            }
            input.ReadMessage(subBuilder);
            LinearKernel = subBuilder;
            break;
          }
          case 18: {
            global::CoreML.Specification.RBFKernel subBuilder = new global::CoreML.Specification.RBFKernel();
            if (kernelCase_ == KernelOneofCase.RbfKernel) {
              subBuilder.MergeFrom(RbfKernel);
            }
            input.ReadMessage(subBuilder);
            RbfKernel = subBuilder;
            break;
          }
          case 26: {
            global::CoreML.Specification.PolyKernel subBuilder = new global::CoreML.Specification.PolyKernel();
            if (kernelCase_ == KernelOneofCase.PolyKernel) {
              subBuilder.MergeFrom(PolyKernel);
            }
            input.ReadMessage(subBuilder);
            PolyKernel = subBuilder;
            break;
          }
          case 34: {
            global::CoreML.Specification.SigmoidKernel subBuilder = new global::CoreML.Specification.SigmoidKernel();
            if (kernelCase_ == KernelOneofCase.SigmoidKernel) {
              subBuilder.MergeFrom(SigmoidKernel);
            }
            input.ReadMessage(subBuilder);
            SigmoidKernel = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A sparse node.
  /// </summary>
  public sealed partial class SparseNode : pb::IMessage<SparseNode> {
    private static readonly pb::MessageParser<SparseNode> _parser = new pb::MessageParser<SparseNode>(() => new SparseNode());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SparseNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.SVMReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SparseNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SparseNode(SparseNode other) : this() {
      index_ = other.index_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SparseNode Clone() {
      return new SparseNode(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    /// <summary>
    /// 1-based indexes, like libsvm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SparseNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SparseNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Value != 0D) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Value != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SparseNode other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 17: {
            Value = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A sparse vector.
  /// </summary>
  public sealed partial class SparseVector : pb::IMessage<SparseVector> {
    private static readonly pb::MessageParser<SparseVector> _parser = new pb::MessageParser<SparseVector>(() => new SparseVector());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SparseVector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.SVMReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SparseVector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SparseVector(SparseVector other) : this() {
      nodes_ = other.nodes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SparseVector Clone() {
      return new SparseVector(this);
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CoreML.Specification.SparseNode> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(10, global::CoreML.Specification.SparseNode.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.SparseNode> nodes_ = new pbc::RepeatedField<global::CoreML.Specification.SparseNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.SparseNode> Nodes {
      get { return nodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SparseVector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SparseVector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodes_.Equals(other.nodes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodes_.WriteTo(output, _repeated_nodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SparseVector other) {
      if (other == null) {
        return;
      }
      nodes_.Add(other.nodes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// One or more sparse support vectors.
  /// </summary>
  public sealed partial class SparseSupportVectors : pb::IMessage<SparseSupportVectors> {
    private static readonly pb::MessageParser<SparseSupportVectors> _parser = new pb::MessageParser<SparseSupportVectors>(() => new SparseSupportVectors());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SparseSupportVectors> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.SVMReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SparseSupportVectors() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SparseSupportVectors(SparseSupportVectors other) : this() {
      vectors_ = other.vectors_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SparseSupportVectors Clone() {
      return new SparseSupportVectors(this);
    }

    /// <summary>Field number for the "vectors" field.</summary>
    public const int VectorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CoreML.Specification.SparseVector> _repeated_vectors_codec
        = pb::FieldCodec.ForMessage(10, global::CoreML.Specification.SparseVector.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.SparseVector> vectors_ = new pbc::RepeatedField<global::CoreML.Specification.SparseVector>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.SparseVector> Vectors {
      get { return vectors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SparseSupportVectors);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SparseSupportVectors other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!vectors_.Equals(other.vectors_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= vectors_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      vectors_.WriteTo(output, _repeated_vectors_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += vectors_.CalculateSize(_repeated_vectors_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SparseSupportVectors other) {
      if (other == null) {
        return;
      }
      vectors_.Add(other.vectors_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            vectors_.AddEntriesFrom(input, _repeated_vectors_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A dense vector.
  /// </summary>
  public sealed partial class DenseVector : pb::IMessage<DenseVector> {
    private static readonly pb::MessageParser<DenseVector> _parser = new pb::MessageParser<DenseVector>(() => new DenseVector());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DenseVector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.SVMReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DenseVector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DenseVector(DenseVector other) : this() {
      values_ = other.values_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DenseVector Clone() {
      return new DenseVector(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_values_codec
        = pb::FieldCodec.ForDouble(10);
    private readonly pbc::RepeatedField<double> values_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DenseVector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DenseVector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DenseVector other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 9: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// One or more dense support vectors.
  /// </summary>
  public sealed partial class DenseSupportVectors : pb::IMessage<DenseSupportVectors> {
    private static readonly pb::MessageParser<DenseSupportVectors> _parser = new pb::MessageParser<DenseSupportVectors>(() => new DenseSupportVectors());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DenseSupportVectors> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.SVMReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DenseSupportVectors() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DenseSupportVectors(DenseSupportVectors other) : this() {
      vectors_ = other.vectors_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DenseSupportVectors Clone() {
      return new DenseSupportVectors(this);
    }

    /// <summary>Field number for the "vectors" field.</summary>
    public const int VectorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CoreML.Specification.DenseVector> _repeated_vectors_codec
        = pb::FieldCodec.ForMessage(10, global::CoreML.Specification.DenseVector.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.DenseVector> vectors_ = new pbc::RepeatedField<global::CoreML.Specification.DenseVector>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.DenseVector> Vectors {
      get { return vectors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DenseSupportVectors);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DenseSupportVectors other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!vectors_.Equals(other.vectors_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= vectors_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      vectors_.WriteTo(output, _repeated_vectors_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += vectors_.CalculateSize(_repeated_vectors_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DenseSupportVectors other) {
      if (other == null) {
        return;
      }
      vectors_.Add(other.vectors_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            vectors_.AddEntriesFrom(input, _repeated_vectors_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// One or more coefficients.
  /// </summary>
  public sealed partial class Coefficients : pb::IMessage<Coefficients> {
    private static readonly pb::MessageParser<Coefficients> _parser = new pb::MessageParser<Coefficients>(() => new Coefficients());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Coefficients> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.SVMReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Coefficients() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Coefficients(Coefficients other) : this() {
      alpha_ = other.alpha_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Coefficients Clone() {
      return new Coefficients(this);
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_alpha_codec
        = pb::FieldCodec.ForDouble(10);
    private readonly pbc::RepeatedField<double> alpha_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Alpha {
      get { return alpha_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Coefficients);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Coefficients other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!alpha_.Equals(other.alpha_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= alpha_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      alpha_.WriteTo(output, _repeated_alpha_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += alpha_.CalculateSize(_repeated_alpha_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Coefficients other) {
      if (other == null) {
        return;
      }
      alpha_.Add(other.alpha_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 9: {
            alpha_.AddEntriesFrom(input, _repeated_alpha_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A support vector regressor.
  /// </summary>
  public sealed partial class SupportVectorRegressor : pb::IMessage<SupportVectorRegressor> {
    private static readonly pb::MessageParser<SupportVectorRegressor> _parser = new pb::MessageParser<SupportVectorRegressor>(() => new SupportVectorRegressor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SupportVectorRegressor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.SVMReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupportVectorRegressor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupportVectorRegressor(SupportVectorRegressor other) : this() {
      Kernel = other.kernel_ != null ? other.Kernel.Clone() : null;
      Coefficients = other.coefficients_ != null ? other.Coefficients.Clone() : null;
      rho_ = other.rho_;
      switch (other.SupportVectorsCase) {
        case SupportVectorsOneofCase.SparseSupportVectors:
          SparseSupportVectors = other.SparseSupportVectors.Clone();
          break;
        case SupportVectorsOneofCase.DenseSupportVectors:
          DenseSupportVectors = other.DenseSupportVectors.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupportVectorRegressor Clone() {
      return new SupportVectorRegressor(this);
    }

    /// <summary>Field number for the "kernel" field.</summary>
    public const int KernelFieldNumber = 1;
    private global::CoreML.Specification.Kernel kernel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Kernel Kernel {
      get { return kernel_; }
      set {
        kernel_ = value;
      }
    }

    /// <summary>Field number for the "sparseSupportVectors" field.</summary>
    public const int SparseSupportVectorsFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.SparseSupportVectors SparseSupportVectors {
      get { return supportVectorsCase_ == SupportVectorsOneofCase.SparseSupportVectors ? (global::CoreML.Specification.SparseSupportVectors) supportVectors_ : null; }
      set {
        supportVectors_ = value;
        supportVectorsCase_ = value == null ? SupportVectorsOneofCase.None : SupportVectorsOneofCase.SparseSupportVectors;
      }
    }

    /// <summary>Field number for the "denseSupportVectors" field.</summary>
    public const int DenseSupportVectorsFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.DenseSupportVectors DenseSupportVectors {
      get { return supportVectorsCase_ == SupportVectorsOneofCase.DenseSupportVectors ? (global::CoreML.Specification.DenseSupportVectors) supportVectors_ : null; }
      set {
        supportVectors_ = value;
        supportVectorsCase_ = value == null ? SupportVectorsOneofCase.None : SupportVectorsOneofCase.DenseSupportVectors;
      }
    }

    /// <summary>Field number for the "coefficients" field.</summary>
    public const int CoefficientsFieldNumber = 4;
    private global::CoreML.Specification.Coefficients coefficients_;
    /// <summary>
    /// Coefficients, one for each support vector
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Coefficients Coefficients {
      get { return coefficients_; }
      set {
        coefficients_ = value;
      }
    }

    /// <summary>Field number for the "rho" field.</summary>
    public const int RhoFieldNumber = 5;
    private double rho_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Rho {
      get { return rho_; }
      set {
        rho_ = value;
      }
    }

    private object supportVectors_;
    /// <summary>Enum of possible cases for the "supportVectors" oneof.</summary>
    public enum SupportVectorsOneofCase {
      None = 0,
      SparseSupportVectors = 2,
      DenseSupportVectors = 3,
    }
    private SupportVectorsOneofCase supportVectorsCase_ = SupportVectorsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupportVectorsOneofCase SupportVectorsCase {
      get { return supportVectorsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSupportVectors() {
      supportVectorsCase_ = SupportVectorsOneofCase.None;
      supportVectors_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SupportVectorRegressor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SupportVectorRegressor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Kernel, other.Kernel)) return false;
      if (!object.Equals(SparseSupportVectors, other.SparseSupportVectors)) return false;
      if (!object.Equals(DenseSupportVectors, other.DenseSupportVectors)) return false;
      if (!object.Equals(Coefficients, other.Coefficients)) return false;
      if (Rho != other.Rho) return false;
      if (SupportVectorsCase != other.SupportVectorsCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (kernel_ != null) hash ^= Kernel.GetHashCode();
      if (supportVectorsCase_ == SupportVectorsOneofCase.SparseSupportVectors) hash ^= SparseSupportVectors.GetHashCode();
      if (supportVectorsCase_ == SupportVectorsOneofCase.DenseSupportVectors) hash ^= DenseSupportVectors.GetHashCode();
      if (coefficients_ != null) hash ^= Coefficients.GetHashCode();
      if (Rho != 0D) hash ^= Rho.GetHashCode();
      hash ^= (int) supportVectorsCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (kernel_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Kernel);
      }
      if (supportVectorsCase_ == SupportVectorsOneofCase.SparseSupportVectors) {
        output.WriteRawTag(18);
        output.WriteMessage(SparseSupportVectors);
      }
      if (supportVectorsCase_ == SupportVectorsOneofCase.DenseSupportVectors) {
        output.WriteRawTag(26);
        output.WriteMessage(DenseSupportVectors);
      }
      if (coefficients_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Coefficients);
      }
      if (Rho != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Rho);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (kernel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kernel);
      }
      if (supportVectorsCase_ == SupportVectorsOneofCase.SparseSupportVectors) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SparseSupportVectors);
      }
      if (supportVectorsCase_ == SupportVectorsOneofCase.DenseSupportVectors) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DenseSupportVectors);
      }
      if (coefficients_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Coefficients);
      }
      if (Rho != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SupportVectorRegressor other) {
      if (other == null) {
        return;
      }
      if (other.kernel_ != null) {
        if (kernel_ == null) {
          kernel_ = new global::CoreML.Specification.Kernel();
        }
        Kernel.MergeFrom(other.Kernel);
      }
      if (other.coefficients_ != null) {
        if (coefficients_ == null) {
          coefficients_ = new global::CoreML.Specification.Coefficients();
        }
        Coefficients.MergeFrom(other.Coefficients);
      }
      if (other.Rho != 0D) {
        Rho = other.Rho;
      }
      switch (other.SupportVectorsCase) {
        case SupportVectorsOneofCase.SparseSupportVectors:
          SparseSupportVectors = other.SparseSupportVectors;
          break;
        case SupportVectorsOneofCase.DenseSupportVectors:
          DenseSupportVectors = other.DenseSupportVectors;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (kernel_ == null) {
              kernel_ = new global::CoreML.Specification.Kernel();
            }
            input.ReadMessage(kernel_);
            break;
          }
          case 18: {
            global::CoreML.Specification.SparseSupportVectors subBuilder = new global::CoreML.Specification.SparseSupportVectors();
            if (supportVectorsCase_ == SupportVectorsOneofCase.SparseSupportVectors) {
              subBuilder.MergeFrom(SparseSupportVectors);
            }
            input.ReadMessage(subBuilder);
            SparseSupportVectors = subBuilder;
            break;
          }
          case 26: {
            global::CoreML.Specification.DenseSupportVectors subBuilder = new global::CoreML.Specification.DenseSupportVectors();
            if (supportVectorsCase_ == SupportVectorsOneofCase.DenseSupportVectors) {
              subBuilder.MergeFrom(DenseSupportVectors);
            }
            input.ReadMessage(subBuilder);
            DenseSupportVectors = subBuilder;
            break;
          }
          case 34: {
            if (coefficients_ == null) {
              coefficients_ = new global::CoreML.Specification.Coefficients();
            }
            input.ReadMessage(coefficients_);
            break;
          }
          case 41: {
            Rho = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A support vector classifier
  /// </summary>
  public sealed partial class SupportVectorClassifier : pb::IMessage<SupportVectorClassifier> {
    private static readonly pb::MessageParser<SupportVectorClassifier> _parser = new pb::MessageParser<SupportVectorClassifier>(() => new SupportVectorClassifier());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SupportVectorClassifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.SVMReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupportVectorClassifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupportVectorClassifier(SupportVectorClassifier other) : this() {
      Kernel = other.kernel_ != null ? other.Kernel.Clone() : null;
      numberOfSupportVectorsPerClass_ = other.numberOfSupportVectorsPerClass_.Clone();
      coefficients_ = other.coefficients_.Clone();
      rho_ = other.rho_.Clone();
      probA_ = other.probA_.Clone();
      probB_ = other.probB_.Clone();
      switch (other.SupportVectorsCase) {
        case SupportVectorsOneofCase.SparseSupportVectors:
          SparseSupportVectors = other.SparseSupportVectors.Clone();
          break;
        case SupportVectorsOneofCase.DenseSupportVectors:
          DenseSupportVectors = other.DenseSupportVectors.Clone();
          break;
      }

      switch (other.ClassLabelsCase) {
        case ClassLabelsOneofCase.StringClassLabels:
          StringClassLabels = other.StringClassLabels.Clone();
          break;
        case ClassLabelsOneofCase.Int64ClassLabels:
          Int64ClassLabels = other.Int64ClassLabels.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupportVectorClassifier Clone() {
      return new SupportVectorClassifier(this);
    }

    /// <summary>Field number for the "kernel" field.</summary>
    public const int KernelFieldNumber = 1;
    private global::CoreML.Specification.Kernel kernel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Kernel Kernel {
      get { return kernel_; }
      set {
        kernel_ = value;
      }
    }

    /// <summary>Field number for the "numberOfSupportVectorsPerClass" field.</summary>
    public const int NumberOfSupportVectorsPerClassFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_numberOfSupportVectorsPerClass_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> numberOfSupportVectorsPerClass_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///*
    /// The number of support vectors for each class.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> NumberOfSupportVectorsPerClass {
      get { return numberOfSupportVectorsPerClass_; }
    }

    /// <summary>Field number for the "sparseSupportVectors" field.</summary>
    public const int SparseSupportVectorsFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.SparseSupportVectors SparseSupportVectors {
      get { return supportVectorsCase_ == SupportVectorsOneofCase.SparseSupportVectors ? (global::CoreML.Specification.SparseSupportVectors) supportVectors_ : null; }
      set {
        supportVectors_ = value;
        supportVectorsCase_ = value == null ? SupportVectorsOneofCase.None : SupportVectorsOneofCase.SparseSupportVectors;
      }
    }

    /// <summary>Field number for the "denseSupportVectors" field.</summary>
    public const int DenseSupportVectorsFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.DenseSupportVectors DenseSupportVectors {
      get { return supportVectorsCase_ == SupportVectorsOneofCase.DenseSupportVectors ? (global::CoreML.Specification.DenseSupportVectors) supportVectors_ : null; }
      set {
        supportVectors_ = value;
        supportVectorsCase_ = value == null ? SupportVectorsOneofCase.None : SupportVectorsOneofCase.DenseSupportVectors;
      }
    }

    /// <summary>Field number for the "coefficients" field.</summary>
    public const int CoefficientsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::CoreML.Specification.Coefficients> _repeated_coefficients_codec
        = pb::FieldCodec.ForMessage(42, global::CoreML.Specification.Coefficients.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.Coefficients> coefficients_ = new pbc::RepeatedField<global::CoreML.Specification.Coefficients>();
    /// <summary>
    ///*
    /// The coefficients, essentially a two dimensional array of
    /// size: (numberOfClasses-1) by (total number of support vectors)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.Coefficients> Coefficients {
      get { return coefficients_; }
    }

    /// <summary>Field number for the "rho" field.</summary>
    public const int RhoFieldNumber = 6;
    private static readonly pb::FieldCodec<double> _repeated_rho_codec
        = pb::FieldCodec.ForDouble(50);
    private readonly pbc::RepeatedField<double> rho_ = new pbc::RepeatedField<double>();
    /// <summary>
    ///*
    /// Constants for decision function,
    /// with K*(K-1) / 2 elements,
    /// where K is the number of classes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Rho {
      get { return rho_; }
    }

    /// <summary>Field number for the "probA" field.</summary>
    public const int ProbAFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_probA_codec
        = pb::FieldCodec.ForDouble(58);
    private readonly pbc::RepeatedField<double> probA_ = new pbc::RepeatedField<double>();
    /// <summary>
    ///*
    /// Pairwise probability information for A vs B classifier.
    /// Total of K*(K-1)/2 elements where K is the number of classes.
    /// These fields are optional,
    /// and only required if you want probabilities or multi class predictions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> ProbA {
      get { return probA_; }
    }

    /// <summary>Field number for the "probB" field.</summary>
    public const int ProbBFieldNumber = 8;
    private static readonly pb::FieldCodec<double> _repeated_probB_codec
        = pb::FieldCodec.ForDouble(66);
    private readonly pbc::RepeatedField<double> probB_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> ProbB {
      get { return probB_; }
    }

    /// <summary>Field number for the "stringClassLabels" field.</summary>
    public const int StringClassLabelsFieldNumber = 100;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.StringVector StringClassLabels {
      get { return classLabelsCase_ == ClassLabelsOneofCase.StringClassLabels ? (global::CoreML.Specification.StringVector) classLabels_ : null; }
      set {
        classLabels_ = value;
        classLabelsCase_ = value == null ? ClassLabelsOneofCase.None : ClassLabelsOneofCase.StringClassLabels;
      }
    }

    /// <summary>Field number for the "int64ClassLabels" field.</summary>
    public const int Int64ClassLabelsFieldNumber = 101;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Int64Vector Int64ClassLabels {
      get { return classLabelsCase_ == ClassLabelsOneofCase.Int64ClassLabels ? (global::CoreML.Specification.Int64Vector) classLabels_ : null; }
      set {
        classLabels_ = value;
        classLabelsCase_ = value == null ? ClassLabelsOneofCase.None : ClassLabelsOneofCase.Int64ClassLabels;
      }
    }

    private object supportVectors_;
    /// <summary>Enum of possible cases for the "supportVectors" oneof.</summary>
    public enum SupportVectorsOneofCase {
      None = 0,
      SparseSupportVectors = 3,
      DenseSupportVectors = 4,
    }
    private SupportVectorsOneofCase supportVectorsCase_ = SupportVectorsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupportVectorsOneofCase SupportVectorsCase {
      get { return supportVectorsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSupportVectors() {
      supportVectorsCase_ = SupportVectorsOneofCase.None;
      supportVectors_ = null;
    }

    private object classLabels_;
    /// <summary>Enum of possible cases for the "ClassLabels" oneof.</summary>
    public enum ClassLabelsOneofCase {
      None = 0,
      StringClassLabels = 100,
      Int64ClassLabels = 101,
    }
    private ClassLabelsOneofCase classLabelsCase_ = ClassLabelsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassLabelsOneofCase ClassLabelsCase {
      get { return classLabelsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClassLabels() {
      classLabelsCase_ = ClassLabelsOneofCase.None;
      classLabels_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SupportVectorClassifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SupportVectorClassifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Kernel, other.Kernel)) return false;
      if(!numberOfSupportVectorsPerClass_.Equals(other.numberOfSupportVectorsPerClass_)) return false;
      if (!object.Equals(SparseSupportVectors, other.SparseSupportVectors)) return false;
      if (!object.Equals(DenseSupportVectors, other.DenseSupportVectors)) return false;
      if(!coefficients_.Equals(other.coefficients_)) return false;
      if(!rho_.Equals(other.rho_)) return false;
      if(!probA_.Equals(other.probA_)) return false;
      if(!probB_.Equals(other.probB_)) return false;
      if (!object.Equals(StringClassLabels, other.StringClassLabels)) return false;
      if (!object.Equals(Int64ClassLabels, other.Int64ClassLabels)) return false;
      if (SupportVectorsCase != other.SupportVectorsCase) return false;
      if (ClassLabelsCase != other.ClassLabelsCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (kernel_ != null) hash ^= Kernel.GetHashCode();
      hash ^= numberOfSupportVectorsPerClass_.GetHashCode();
      if (supportVectorsCase_ == SupportVectorsOneofCase.SparseSupportVectors) hash ^= SparseSupportVectors.GetHashCode();
      if (supportVectorsCase_ == SupportVectorsOneofCase.DenseSupportVectors) hash ^= DenseSupportVectors.GetHashCode();
      hash ^= coefficients_.GetHashCode();
      hash ^= rho_.GetHashCode();
      hash ^= probA_.GetHashCode();
      hash ^= probB_.GetHashCode();
      if (classLabelsCase_ == ClassLabelsOneofCase.StringClassLabels) hash ^= StringClassLabels.GetHashCode();
      if (classLabelsCase_ == ClassLabelsOneofCase.Int64ClassLabels) hash ^= Int64ClassLabels.GetHashCode();
      hash ^= (int) supportVectorsCase_;
      hash ^= (int) classLabelsCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (kernel_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Kernel);
      }
      numberOfSupportVectorsPerClass_.WriteTo(output, _repeated_numberOfSupportVectorsPerClass_codec);
      if (supportVectorsCase_ == SupportVectorsOneofCase.SparseSupportVectors) {
        output.WriteRawTag(26);
        output.WriteMessage(SparseSupportVectors);
      }
      if (supportVectorsCase_ == SupportVectorsOneofCase.DenseSupportVectors) {
        output.WriteRawTag(34);
        output.WriteMessage(DenseSupportVectors);
      }
      coefficients_.WriteTo(output, _repeated_coefficients_codec);
      rho_.WriteTo(output, _repeated_rho_codec);
      probA_.WriteTo(output, _repeated_probA_codec);
      probB_.WriteTo(output, _repeated_probB_codec);
      if (classLabelsCase_ == ClassLabelsOneofCase.StringClassLabels) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(StringClassLabels);
      }
      if (classLabelsCase_ == ClassLabelsOneofCase.Int64ClassLabels) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(Int64ClassLabels);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (kernel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kernel);
      }
      size += numberOfSupportVectorsPerClass_.CalculateSize(_repeated_numberOfSupportVectorsPerClass_codec);
      if (supportVectorsCase_ == SupportVectorsOneofCase.SparseSupportVectors) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SparseSupportVectors);
      }
      if (supportVectorsCase_ == SupportVectorsOneofCase.DenseSupportVectors) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DenseSupportVectors);
      }
      size += coefficients_.CalculateSize(_repeated_coefficients_codec);
      size += rho_.CalculateSize(_repeated_rho_codec);
      size += probA_.CalculateSize(_repeated_probA_codec);
      size += probB_.CalculateSize(_repeated_probB_codec);
      if (classLabelsCase_ == ClassLabelsOneofCase.StringClassLabels) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StringClassLabels);
      }
      if (classLabelsCase_ == ClassLabelsOneofCase.Int64ClassLabels) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Int64ClassLabels);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SupportVectorClassifier other) {
      if (other == null) {
        return;
      }
      if (other.kernel_ != null) {
        if (kernel_ == null) {
          kernel_ = new global::CoreML.Specification.Kernel();
        }
        Kernel.MergeFrom(other.Kernel);
      }
      numberOfSupportVectorsPerClass_.Add(other.numberOfSupportVectorsPerClass_);
      coefficients_.Add(other.coefficients_);
      rho_.Add(other.rho_);
      probA_.Add(other.probA_);
      probB_.Add(other.probB_);
      switch (other.SupportVectorsCase) {
        case SupportVectorsOneofCase.SparseSupportVectors:
          SparseSupportVectors = other.SparseSupportVectors;
          break;
        case SupportVectorsOneofCase.DenseSupportVectors:
          DenseSupportVectors = other.DenseSupportVectors;
          break;
      }

      switch (other.ClassLabelsCase) {
        case ClassLabelsOneofCase.StringClassLabels:
          StringClassLabels = other.StringClassLabels;
          break;
        case ClassLabelsOneofCase.Int64ClassLabels:
          Int64ClassLabels = other.Int64ClassLabels;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (kernel_ == null) {
              kernel_ = new global::CoreML.Specification.Kernel();
            }
            input.ReadMessage(kernel_);
            break;
          }
          case 18:
          case 16: {
            numberOfSupportVectorsPerClass_.AddEntriesFrom(input, _repeated_numberOfSupportVectorsPerClass_codec);
            break;
          }
          case 26: {
            global::CoreML.Specification.SparseSupportVectors subBuilder = new global::CoreML.Specification.SparseSupportVectors();
            if (supportVectorsCase_ == SupportVectorsOneofCase.SparseSupportVectors) {
              subBuilder.MergeFrom(SparseSupportVectors);
            }
            input.ReadMessage(subBuilder);
            SparseSupportVectors = subBuilder;
            break;
          }
          case 34: {
            global::CoreML.Specification.DenseSupportVectors subBuilder = new global::CoreML.Specification.DenseSupportVectors();
            if (supportVectorsCase_ == SupportVectorsOneofCase.DenseSupportVectors) {
              subBuilder.MergeFrom(DenseSupportVectors);
            }
            input.ReadMessage(subBuilder);
            DenseSupportVectors = subBuilder;
            break;
          }
          case 42: {
            coefficients_.AddEntriesFrom(input, _repeated_coefficients_codec);
            break;
          }
          case 50:
          case 49: {
            rho_.AddEntriesFrom(input, _repeated_rho_codec);
            break;
          }
          case 58:
          case 57: {
            probA_.AddEntriesFrom(input, _repeated_probA_codec);
            break;
          }
          case 66:
          case 65: {
            probB_.AddEntriesFrom(input, _repeated_probB_codec);
            break;
          }
          case 802: {
            global::CoreML.Specification.StringVector subBuilder = new global::CoreML.Specification.StringVector();
            if (classLabelsCase_ == ClassLabelsOneofCase.StringClassLabels) {
              subBuilder.MergeFrom(StringClassLabels);
            }
            input.ReadMessage(subBuilder);
            StringClassLabels = subBuilder;
            break;
          }
          case 810: {
            global::CoreML.Specification.Int64Vector subBuilder = new global::CoreML.Specification.Int64Vector();
            if (classLabelsCase_ == ClassLabelsOneofCase.Int64ClassLabels) {
              subBuilder.MergeFrom(Int64ClassLabels);
            }
            input.ReadMessage(subBuilder);
            Int64ClassLabels = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

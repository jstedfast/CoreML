// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: FeatureTypes.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CoreML.Specification {

  /// <summary>Holder for reflection information generated from FeatureTypes.proto</summary>
  public static partial class FeatureTypesReflection {

    #region Descriptor
    /// <summary>File descriptor for FeatureTypes.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FeatureTypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJGZWF0dXJlVHlwZXMucHJvdG8SFENvcmVNTC5TcGVjaWZpY2F0aW9uIhIK",
            "EEludDY0RmVhdHVyZVR5cGUiEwoRRG91YmxlRmVhdHVyZVR5cGUiEwoRU3Ry",
            "aW5nRmVhdHVyZVR5cGUiMwoJU2l6ZVJhbmdlEhIKCmxvd2VyQm91bmQYASAB",
            "KAQSEgoKdXBwZXJCb3VuZBgCIAEoAyL+BAoQSW1hZ2VGZWF0dXJlVHlwZRIN",
            "CgV3aWR0aBgBIAEoAxIOCgZoZWlnaHQYAiABKAMSVgoPZW51bWVyYXRlZFNp",
            "emVzGBUgASgLMjsuQ29yZU1MLlNwZWNpZmljYXRpb24uSW1hZ2VGZWF0dXJl",
            "VHlwZS5FbnVtZXJhdGVkSW1hZ2VTaXplc0gAEk8KDmltYWdlU2l6ZVJhbmdl",
            "GB8gASgLMjUuQ29yZU1MLlNwZWNpZmljYXRpb24uSW1hZ2VGZWF0dXJlVHlw",
            "ZS5JbWFnZVNpemVSYW5nZUgAEkUKCmNvbG9yU3BhY2UYAyABKA4yMS5Db3Jl",
            "TUwuU3BlY2lmaWNhdGlvbi5JbWFnZUZlYXR1cmVUeXBlLkNvbG9yU3BhY2Ua",
            "KgoJSW1hZ2VTaXplEg0KBXdpZHRoGAEgASgEEg4KBmhlaWdodBgCIAEoBBpX",
            "ChRFbnVtZXJhdGVkSW1hZ2VTaXplcxI/CgVzaXplcxgBIAMoCzIwLkNvcmVN",
            "TC5TcGVjaWZpY2F0aW9uLkltYWdlRmVhdHVyZVR5cGUuSW1hZ2VTaXplGnsK",
            "DkltYWdlU2l6ZVJhbmdlEjMKCndpZHRoUmFuZ2UYASABKAsyHy5Db3JlTUwu",
            "U3BlY2lmaWNhdGlvbi5TaXplUmFuZ2USNAoLaGVpZ2h0UmFuZ2UYAiABKAsy",
            "Hy5Db3JlTUwuU3BlY2lmaWNhdGlvbi5TaXplUmFuZ2UiRgoKQ29sb3JTcGFj",
            "ZRIXChNJTlZBTElEX0NPTE9SX1NQQUNFEAASDQoJR1JBWVNDQUxFEAoSBwoD",
            "UkdCEBQSBwoDQkdSEB5CEQoPU2l6ZUZsZXhpYmlsaXR5IqAEChBBcnJheUZl",
            "YXR1cmVUeXBlEg0KBXNoYXBlGAEgAygDEkYKCGRhdGFUeXBlGAIgASgOMjQu",
            "Q29yZU1MLlNwZWNpZmljYXRpb24uQXJyYXlGZWF0dXJlVHlwZS5BcnJheURh",
            "dGFUeXBlElMKEGVudW1lcmF0ZWRTaGFwZXMYFSABKAsyNy5Db3JlTUwuU3Bl",
            "Y2lmaWNhdGlvbi5BcnJheUZlYXR1cmVUeXBlLkVudW1lcmF0ZWRTaGFwZXNI",
            "ABJHCgpzaGFwZVJhbmdlGB8gASgLMjEuQ29yZU1MLlNwZWNpZmljYXRpb24u",
            "QXJyYXlGZWF0dXJlVHlwZS5TaGFwZVJhbmdlSAAaFgoFU2hhcGUSDQoFc2hh",
            "cGUYASADKAMaUAoQRW51bWVyYXRlZFNoYXBlcxI8CgZzaGFwZXMYASADKAsy",
            "LC5Db3JlTUwuU3BlY2lmaWNhdGlvbi5BcnJheUZlYXR1cmVUeXBlLlNoYXBl",
            "GkEKClNoYXBlUmFuZ2USMwoKc2l6ZVJhbmdlcxgBIAMoCzIfLkNvcmVNTC5T",
            "cGVjaWZpY2F0aW9uLlNpemVSYW5nZSJWCg1BcnJheURhdGFUeXBlEhsKF0lO",
            "VkFMSURfQVJSQVlfREFUQV9UWVBFEAASDQoHRkxPQVQzMhCggAQSDAoGRE9V",
            "QkxFEMCABBILCgVJTlQzMhCggAhCEgoQU2hhcGVGbGV4aWJpbGl0eSKkAQoV",
            "RGljdGlvbmFyeUZlYXR1cmVUeXBlEj4KDGludDY0S2V5VHlwZRgBIAEoCzIm",
            "LkNvcmVNTC5TcGVjaWZpY2F0aW9uLkludDY0RmVhdHVyZVR5cGVIABJACg1z",
            "dHJpbmdLZXlUeXBlGAIgASgLMicuQ29yZU1MLlNwZWNpZmljYXRpb24uU3Ry",
            "aW5nRmVhdHVyZVR5cGVIAEIJCgdLZXlUeXBlIs0BChNTZXF1ZW5jZUZlYXR1",
            "cmVUeXBlEjsKCWludDY0VHlwZRgBIAEoCzImLkNvcmVNTC5TcGVjaWZpY2F0",
            "aW9uLkludDY0RmVhdHVyZVR5cGVIABI9CgpzdHJpbmdUeXBlGAMgASgLMicu",
            "Q29yZU1MLlNwZWNpZmljYXRpb24uU3RyaW5nRmVhdHVyZVR5cGVIABIyCglz",
            "aXplUmFuZ2UYZSABKAsyHy5Db3JlTUwuU3BlY2lmaWNhdGlvbi5TaXplUmFu",
            "Z2VCBgoEVHlwZSLuAwoLRmVhdHVyZVR5cGUSOwoJaW50NjRUeXBlGAEgASgL",
            "MiYuQ29yZU1MLlNwZWNpZmljYXRpb24uSW50NjRGZWF0dXJlVHlwZUgAEj0K",
            "CmRvdWJsZVR5cGUYAiABKAsyJy5Db3JlTUwuU3BlY2lmaWNhdGlvbi5Eb3Vi",
            "bGVGZWF0dXJlVHlwZUgAEj0KCnN0cmluZ1R5cGUYAyABKAsyJy5Db3JlTUwu",
            "U3BlY2lmaWNhdGlvbi5TdHJpbmdGZWF0dXJlVHlwZUgAEjsKCWltYWdlVHlw",
            "ZRgEIAEoCzImLkNvcmVNTC5TcGVjaWZpY2F0aW9uLkltYWdlRmVhdHVyZVR5",
            "cGVIABJACg5tdWx0aUFycmF5VHlwZRgFIAEoCzImLkNvcmVNTC5TcGVjaWZp",
            "Y2F0aW9uLkFycmF5RmVhdHVyZVR5cGVIABJFCg5kaWN0aW9uYXJ5VHlwZRgG",
            "IAEoCzIrLkNvcmVNTC5TcGVjaWZpY2F0aW9uLkRpY3Rpb25hcnlGZWF0dXJl",
            "VHlwZUgAEkEKDHNlcXVlbmNlVHlwZRgHIAEoCzIpLkNvcmVNTC5TcGVjaWZp",
            "Y2F0aW9uLlNlcXVlbmNlRmVhdHVyZVR5cGVIABITCgppc09wdGlvbmFsGOgH",
            "IAEoCEIGCgRUeXBlQgJIA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.Int64FeatureType), global::CoreML.Specification.Int64FeatureType.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.DoubleFeatureType), global::CoreML.Specification.DoubleFeatureType.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.StringFeatureType), global::CoreML.Specification.StringFeatureType.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.SizeRange), global::CoreML.Specification.SizeRange.Parser, new[]{ "LowerBound", "UpperBound" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ImageFeatureType), global::CoreML.Specification.ImageFeatureType.Parser, new[]{ "Width", "Height", "EnumeratedSizes", "ImageSizeRange", "ColorSpace" }, new[]{ "SizeFlexibility" }, new[]{ typeof(global::CoreML.Specification.ImageFeatureType.Types.ColorSpace) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ImageFeatureType.Types.ImageSize), global::CoreML.Specification.ImageFeatureType.Types.ImageSize.Parser, new[]{ "Width", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ImageFeatureType.Types.EnumeratedImageSizes), global::CoreML.Specification.ImageFeatureType.Types.EnumeratedImageSizes.Parser, new[]{ "Sizes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ImageFeatureType.Types.ImageSizeRange), global::CoreML.Specification.ImageFeatureType.Types.ImageSizeRange.Parser, new[]{ "WidthRange", "HeightRange" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ArrayFeatureType), global::CoreML.Specification.ArrayFeatureType.Parser, new[]{ "Shape", "DataType", "EnumeratedShapes", "ShapeRange" }, new[]{ "ShapeFlexibility" }, new[]{ typeof(global::CoreML.Specification.ArrayFeatureType.Types.ArrayDataType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ArrayFeatureType.Types.Shape), global::CoreML.Specification.ArrayFeatureType.Types.Shape.Parser, new[]{ "Shape_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ArrayFeatureType.Types.EnumeratedShapes), global::CoreML.Specification.ArrayFeatureType.Types.EnumeratedShapes.Parser, new[]{ "Shapes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ArrayFeatureType.Types.ShapeRange), global::CoreML.Specification.ArrayFeatureType.Types.ShapeRange.Parser, new[]{ "SizeRanges" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.DictionaryFeatureType), global::CoreML.Specification.DictionaryFeatureType.Parser, new[]{ "Int64KeyType", "StringKeyType" }, new[]{ "KeyType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.SequenceFeatureType), global::CoreML.Specification.SequenceFeatureType.Parser, new[]{ "Int64Type", "StringType", "SizeRange" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.FeatureType), global::CoreML.Specification.FeatureType.Parser, new[]{ "Int64Type", "DoubleType", "StringType", "ImageType", "MultiArrayType", "DictionaryType", "SequenceType", "IsOptional" }, new[]{ "Type" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// The 64-bit integer feature type.
  /// </summary>
  public sealed partial class Int64FeatureType : pb::IMessage<Int64FeatureType> {
    private static readonly pb::MessageParser<Int64FeatureType> _parser = new pb::MessageParser<Int64FeatureType>(() => new Int64FeatureType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Int64FeatureType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.FeatureTypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int64FeatureType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int64FeatureType(Int64FeatureType other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int64FeatureType Clone() {
      return new Int64FeatureType(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Int64FeatureType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Int64FeatureType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Int64FeatureType other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///*
  /// The double-precision floating point number feature type.
  /// </summary>
  public sealed partial class DoubleFeatureType : pb::IMessage<DoubleFeatureType> {
    private static readonly pb::MessageParser<DoubleFeatureType> _parser = new pb::MessageParser<DoubleFeatureType>(() => new DoubleFeatureType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DoubleFeatureType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.FeatureTypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleFeatureType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleFeatureType(DoubleFeatureType other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleFeatureType Clone() {
      return new DoubleFeatureType(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DoubleFeatureType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DoubleFeatureType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DoubleFeatureType other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///*
  /// The string feature type.
  /// </summary>
  public sealed partial class StringFeatureType : pb::IMessage<StringFeatureType> {
    private static readonly pb::MessageParser<StringFeatureType> _parser = new pb::MessageParser<StringFeatureType>(() => new StringFeatureType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringFeatureType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.FeatureTypesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringFeatureType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringFeatureType(StringFeatureType other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringFeatureType Clone() {
      return new StringFeatureType(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringFeatureType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringFeatureType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringFeatureType other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class SizeRange : pb::IMessage<SizeRange> {
    private static readonly pb::MessageParser<SizeRange> _parser = new pb::MessageParser<SizeRange>(() => new SizeRange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SizeRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.FeatureTypesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SizeRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SizeRange(SizeRange other) : this() {
      lowerBound_ = other.lowerBound_;
      upperBound_ = other.upperBound_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SizeRange Clone() {
      return new SizeRange(this);
    }

    /// <summary>Field number for the "lowerBound" field.</summary>
    public const int LowerBoundFieldNumber = 1;
    private ulong lowerBound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LowerBound {
      get { return lowerBound_; }
      set {
        lowerBound_ = value;
      }
    }

    /// <summary>Field number for the "upperBound" field.</summary>
    public const int UpperBoundFieldNumber = 2;
    private long upperBound_;
    /// <summary>
    /// negative value means unbound otherwise upperbound is included in range
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpperBound {
      get { return upperBound_; }
      set {
        upperBound_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SizeRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SizeRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LowerBound != other.LowerBound) return false;
      if (UpperBound != other.UpperBound) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LowerBound != 0UL) hash ^= LowerBound.GetHashCode();
      if (UpperBound != 0L) hash ^= UpperBound.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LowerBound != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(LowerBound);
      }
      if (UpperBound != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UpperBound);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LowerBound != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LowerBound);
      }
      if (UpperBound != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpperBound);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SizeRange other) {
      if (other == null) {
        return;
      }
      if (other.LowerBound != 0UL) {
        LowerBound = other.LowerBound;
      }
      if (other.UpperBound != 0L) {
        UpperBound = other.UpperBound;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LowerBound = input.ReadUInt64();
            break;
          }
          case 16: {
            UpperBound = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// The image feature type.
  /// </summary>
  public sealed partial class ImageFeatureType : pb::IMessage<ImageFeatureType> {
    private static readonly pb::MessageParser<ImageFeatureType> _parser = new pb::MessageParser<ImageFeatureType>(() => new ImageFeatureType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageFeatureType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.FeatureTypesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageFeatureType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageFeatureType(ImageFeatureType other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      colorSpace_ = other.colorSpace_;
      switch (other.SizeFlexibilityCase) {
        case SizeFlexibilityOneofCase.EnumeratedSizes:
          EnumeratedSizes = other.EnumeratedSizes.Clone();
          break;
        case SizeFlexibilityOneofCase.ImageSizeRange:
          ImageSizeRange = other.ImageSizeRange.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageFeatureType Clone() {
      return new ImageFeatureType(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private long width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private long height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "enumeratedSizes" field.</summary>
    public const int EnumeratedSizesFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ImageFeatureType.Types.EnumeratedImageSizes EnumeratedSizes {
      get { return sizeFlexibilityCase_ == SizeFlexibilityOneofCase.EnumeratedSizes ? (global::CoreML.Specification.ImageFeatureType.Types.EnumeratedImageSizes) sizeFlexibility_ : null; }
      set {
        sizeFlexibility_ = value;
        sizeFlexibilityCase_ = value == null ? SizeFlexibilityOneofCase.None : SizeFlexibilityOneofCase.EnumeratedSizes;
      }
    }

    /// <summary>Field number for the "imageSizeRange" field.</summary>
    public const int ImageSizeRangeFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ImageFeatureType.Types.ImageSizeRange ImageSizeRange {
      get { return sizeFlexibilityCase_ == SizeFlexibilityOneofCase.ImageSizeRange ? (global::CoreML.Specification.ImageFeatureType.Types.ImageSizeRange) sizeFlexibility_ : null; }
      set {
        sizeFlexibility_ = value;
        sizeFlexibilityCase_ = value == null ? SizeFlexibilityOneofCase.None : SizeFlexibilityOneofCase.ImageSizeRange;
      }
    }

    /// <summary>Field number for the "colorSpace" field.</summary>
    public const int ColorSpaceFieldNumber = 3;
    private global::CoreML.Specification.ImageFeatureType.Types.ColorSpace colorSpace_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ImageFeatureType.Types.ColorSpace ColorSpace {
      get { return colorSpace_; }
      set {
        colorSpace_ = value;
      }
    }

    private object sizeFlexibility_;
    /// <summary>Enum of possible cases for the "SizeFlexibility" oneof.</summary>
    public enum SizeFlexibilityOneofCase {
      None = 0,
      EnumeratedSizes = 21,
      ImageSizeRange = 31,
    }
    private SizeFlexibilityOneofCase sizeFlexibilityCase_ = SizeFlexibilityOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SizeFlexibilityOneofCase SizeFlexibilityCase {
      get { return sizeFlexibilityCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSizeFlexibility() {
      sizeFlexibilityCase_ = SizeFlexibilityOneofCase.None;
      sizeFlexibility_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageFeatureType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageFeatureType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (!object.Equals(EnumeratedSizes, other.EnumeratedSizes)) return false;
      if (!object.Equals(ImageSizeRange, other.ImageSizeRange)) return false;
      if (ColorSpace != other.ColorSpace) return false;
      if (SizeFlexibilityCase != other.SizeFlexibilityCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0L) hash ^= Width.GetHashCode();
      if (Height != 0L) hash ^= Height.GetHashCode();
      if (sizeFlexibilityCase_ == SizeFlexibilityOneofCase.EnumeratedSizes) hash ^= EnumeratedSizes.GetHashCode();
      if (sizeFlexibilityCase_ == SizeFlexibilityOneofCase.ImageSizeRange) hash ^= ImageSizeRange.GetHashCode();
      if (ColorSpace != 0) hash ^= ColorSpace.GetHashCode();
      hash ^= (int) sizeFlexibilityCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Width);
      }
      if (Height != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Height);
      }
      if (ColorSpace != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ColorSpace);
      }
      if (sizeFlexibilityCase_ == SizeFlexibilityOneofCase.EnumeratedSizes) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(EnumeratedSizes);
      }
      if (sizeFlexibilityCase_ == SizeFlexibilityOneofCase.ImageSizeRange) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(ImageSizeRange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Width);
      }
      if (Height != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Height);
      }
      if (sizeFlexibilityCase_ == SizeFlexibilityOneofCase.EnumeratedSizes) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EnumeratedSizes);
      }
      if (sizeFlexibilityCase_ == SizeFlexibilityOneofCase.ImageSizeRange) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImageSizeRange);
      }
      if (ColorSpace != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ColorSpace);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageFeatureType other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0L) {
        Width = other.Width;
      }
      if (other.Height != 0L) {
        Height = other.Height;
      }
      if (other.ColorSpace != 0) {
        ColorSpace = other.ColorSpace;
      }
      switch (other.SizeFlexibilityCase) {
        case SizeFlexibilityOneofCase.EnumeratedSizes:
          if (EnumeratedSizes == null) {
            EnumeratedSizes = new global::CoreML.Specification.ImageFeatureType.Types.EnumeratedImageSizes();
          }
          EnumeratedSizes.MergeFrom(other.EnumeratedSizes);
          break;
        case SizeFlexibilityOneofCase.ImageSizeRange:
          if (ImageSizeRange == null) {
            ImageSizeRange = new global::CoreML.Specification.ImageFeatureType.Types.ImageSizeRange();
          }
          ImageSizeRange.MergeFrom(other.ImageSizeRange);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Width = input.ReadInt64();
            break;
          }
          case 16: {
            Height = input.ReadInt64();
            break;
          }
          case 24: {
            colorSpace_ = (global::CoreML.Specification.ImageFeatureType.Types.ColorSpace) input.ReadEnum();
            break;
          }
          case 170: {
            global::CoreML.Specification.ImageFeatureType.Types.EnumeratedImageSizes subBuilder = new global::CoreML.Specification.ImageFeatureType.Types.EnumeratedImageSizes();
            if (sizeFlexibilityCase_ == SizeFlexibilityOneofCase.EnumeratedSizes) {
              subBuilder.MergeFrom(EnumeratedSizes);
            }
            input.ReadMessage(subBuilder);
            EnumeratedSizes = subBuilder;
            break;
          }
          case 250: {
            global::CoreML.Specification.ImageFeatureType.Types.ImageSizeRange subBuilder = new global::CoreML.Specification.ImageFeatureType.Types.ImageSizeRange();
            if (sizeFlexibilityCase_ == SizeFlexibilityOneofCase.ImageSizeRange) {
              subBuilder.MergeFrom(ImageSizeRange);
            }
            input.ReadMessage(subBuilder);
            ImageSizeRange = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ImageFeatureType message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Assumes raw (decompressed) format
      /// </summary>
      public enum ColorSpace {
        [pbr::OriginalName("INVALID_COLOR_SPACE")] InvalidColorSpace = 0,
        /// <summary>
        ///  8 bits per pixel
        /// </summary>
        [pbr::OriginalName("GRAYSCALE")] Grayscale = 10,
        /// <summary>
        /// 32 bits per pixel: RGBA with A channel ignored
        /// </summary>
        [pbr::OriginalName("RGB")] Rgb = 20,
        /// <summary>
        /// 32 bits per pixel: BGRA with A channel ignored
        /// </summary>
        [pbr::OriginalName("BGR")] Bgr = 30,
      }

      public sealed partial class ImageSize : pb::IMessage<ImageSize> {
        private static readonly pb::MessageParser<ImageSize> _parser = new pb::MessageParser<ImageSize>(() => new ImageSize());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ImageSize> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CoreML.Specification.ImageFeatureType.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageSize() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageSize(ImageSize other) : this() {
          width_ = other.width_;
          height_ = other.height_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageSize Clone() {
          return new ImageSize(this);
        }

        /// <summary>Field number for the "width" field.</summary>
        public const int WidthFieldNumber = 1;
        private ulong width_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Width {
          get { return width_; }
          set {
            width_ = value;
          }
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 2;
        private ulong height_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Height {
          get { return height_; }
          set {
            height_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ImageSize);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ImageSize other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Width != other.Width) return false;
          if (Height != other.Height) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Width != 0UL) hash ^= Width.GetHashCode();
          if (Height != 0UL) hash ^= Height.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Width != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Width);
          }
          if (Height != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Height);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Width != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Width);
          }
          if (Height != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Height);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ImageSize other) {
          if (other == null) {
            return;
          }
          if (other.Width != 0UL) {
            Width = other.Width;
          }
          if (other.Height != 0UL) {
            Height = other.Height;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Width = input.ReadUInt64();
                break;
              }
              case 16: {
                Height = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class EnumeratedImageSizes : pb::IMessage<EnumeratedImageSizes> {
        private static readonly pb::MessageParser<EnumeratedImageSizes> _parser = new pb::MessageParser<EnumeratedImageSizes>(() => new EnumeratedImageSizes());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EnumeratedImageSizes> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CoreML.Specification.ImageFeatureType.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumeratedImageSizes() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumeratedImageSizes(EnumeratedImageSizes other) : this() {
          sizes_ = other.sizes_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumeratedImageSizes Clone() {
          return new EnumeratedImageSizes(this);
        }

        /// <summary>Field number for the "sizes" field.</summary>
        public const int SizesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::CoreML.Specification.ImageFeatureType.Types.ImageSize> _repeated_sizes_codec
            = pb::FieldCodec.ForMessage(10, global::CoreML.Specification.ImageFeatureType.Types.ImageSize.Parser);
        private readonly pbc::RepeatedField<global::CoreML.Specification.ImageFeatureType.Types.ImageSize> sizes_ = new pbc::RepeatedField<global::CoreML.Specification.ImageFeatureType.Types.ImageSize>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::CoreML.Specification.ImageFeatureType.Types.ImageSize> Sizes {
          get { return sizes_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EnumeratedImageSizes);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EnumeratedImageSizes other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!sizes_.Equals(other.sizes_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= sizes_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          sizes_.WriteTo(output, _repeated_sizes_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += sizes_.CalculateSize(_repeated_sizes_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EnumeratedImageSizes other) {
          if (other == null) {
            return;
          }
          sizes_.Add(other.sizes_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                sizes_.AddEntriesFrom(input, _repeated_sizes_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class ImageSizeRange : pb::IMessage<ImageSizeRange> {
        private static readonly pb::MessageParser<ImageSizeRange> _parser = new pb::MessageParser<ImageSizeRange>(() => new ImageSizeRange());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ImageSizeRange> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CoreML.Specification.ImageFeatureType.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageSizeRange() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageSizeRange(ImageSizeRange other) : this() {
          widthRange_ = other.widthRange_ != null ? other.widthRange_.Clone() : null;
          heightRange_ = other.heightRange_ != null ? other.heightRange_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageSizeRange Clone() {
          return new ImageSizeRange(this);
        }

        /// <summary>Field number for the "widthRange" field.</summary>
        public const int WidthRangeFieldNumber = 1;
        private global::CoreML.Specification.SizeRange widthRange_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CoreML.Specification.SizeRange WidthRange {
          get { return widthRange_; }
          set {
            widthRange_ = value;
          }
        }

        /// <summary>Field number for the "heightRange" field.</summary>
        public const int HeightRangeFieldNumber = 2;
        private global::CoreML.Specification.SizeRange heightRange_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CoreML.Specification.SizeRange HeightRange {
          get { return heightRange_; }
          set {
            heightRange_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ImageSizeRange);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ImageSizeRange other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(WidthRange, other.WidthRange)) return false;
          if (!object.Equals(HeightRange, other.HeightRange)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (widthRange_ != null) hash ^= WidthRange.GetHashCode();
          if (heightRange_ != null) hash ^= HeightRange.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (widthRange_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(WidthRange);
          }
          if (heightRange_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(HeightRange);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (widthRange_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(WidthRange);
          }
          if (heightRange_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeightRange);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ImageSizeRange other) {
          if (other == null) {
            return;
          }
          if (other.widthRange_ != null) {
            if (widthRange_ == null) {
              widthRange_ = new global::CoreML.Specification.SizeRange();
            }
            WidthRange.MergeFrom(other.WidthRange);
          }
          if (other.heightRange_ != null) {
            if (heightRange_ == null) {
              heightRange_ = new global::CoreML.Specification.SizeRange();
            }
            HeightRange.MergeFrom(other.HeightRange);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (widthRange_ == null) {
                  widthRange_ = new global::CoreML.Specification.SizeRange();
                }
                input.ReadMessage(widthRange_);
                break;
              }
              case 18: {
                if (heightRange_ == null) {
                  heightRange_ = new global::CoreML.Specification.SizeRange();
                }
                input.ReadMessage(heightRange_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// The array feature type.
  /// </summary>
  public sealed partial class ArrayFeatureType : pb::IMessage<ArrayFeatureType> {
    private static readonly pb::MessageParser<ArrayFeatureType> _parser = new pb::MessageParser<ArrayFeatureType>(() => new ArrayFeatureType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArrayFeatureType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.FeatureTypesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArrayFeatureType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArrayFeatureType(ArrayFeatureType other) : this() {
      shape_ = other.shape_.Clone();
      dataType_ = other.dataType_;
      switch (other.ShapeFlexibilityCase) {
        case ShapeFlexibilityOneofCase.EnumeratedShapes:
          EnumeratedShapes = other.EnumeratedShapes.Clone();
          break;
        case ShapeFlexibilityOneofCase.ShapeRange:
          ShapeRange = other.ShapeRange.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArrayFeatureType Clone() {
      return new ArrayFeatureType(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_shape_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> shape_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// The required or default shape
    ///
    /// If specificationVersion &lt;= 2 or ShapeFlexibility is empty,
    /// shape is the required fixed shape
    ///
    /// If ShapeFlexibility is present, shape indicate a "default"
    /// shape which must be consistent with the flexibilty specified
    ///
    /// For neural networks, shape must be of length 1 or 3, representing input shape [C] or [C,H,W], respectively.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Shape {
      get { return shape_; }
    }

    /// <summary>Field number for the "dataType" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private global::CoreML.Specification.ArrayFeatureType.Types.ArrayDataType dataType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ArrayFeatureType.Types.ArrayDataType DataType {
      get { return dataType_; }
      set {
        dataType_ = value;
      }
    }

    /// <summary>Field number for the "enumeratedShapes" field.</summary>
    public const int EnumeratedShapesFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ArrayFeatureType.Types.EnumeratedShapes EnumeratedShapes {
      get { return shapeFlexibilityCase_ == ShapeFlexibilityOneofCase.EnumeratedShapes ? (global::CoreML.Specification.ArrayFeatureType.Types.EnumeratedShapes) shapeFlexibility_ : null; }
      set {
        shapeFlexibility_ = value;
        shapeFlexibilityCase_ = value == null ? ShapeFlexibilityOneofCase.None : ShapeFlexibilityOneofCase.EnumeratedShapes;
      }
    }

    /// <summary>Field number for the "shapeRange" field.</summary>
    public const int ShapeRangeFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ArrayFeatureType.Types.ShapeRange ShapeRange {
      get { return shapeFlexibilityCase_ == ShapeFlexibilityOneofCase.ShapeRange ? (global::CoreML.Specification.ArrayFeatureType.Types.ShapeRange) shapeFlexibility_ : null; }
      set {
        shapeFlexibility_ = value;
        shapeFlexibilityCase_ = value == null ? ShapeFlexibilityOneofCase.None : ShapeFlexibilityOneofCase.ShapeRange;
      }
    }

    private object shapeFlexibility_;
    /// <summary>Enum of possible cases for the "ShapeFlexibility" oneof.</summary>
    public enum ShapeFlexibilityOneofCase {
      None = 0,
      EnumeratedShapes = 21,
      ShapeRange = 31,
    }
    private ShapeFlexibilityOneofCase shapeFlexibilityCase_ = ShapeFlexibilityOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShapeFlexibilityOneofCase ShapeFlexibilityCase {
      get { return shapeFlexibilityCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShapeFlexibility() {
      shapeFlexibilityCase_ = ShapeFlexibilityOneofCase.None;
      shapeFlexibility_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArrayFeatureType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArrayFeatureType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!shape_.Equals(other.shape_)) return false;
      if (DataType != other.DataType) return false;
      if (!object.Equals(EnumeratedShapes, other.EnumeratedShapes)) return false;
      if (!object.Equals(ShapeRange, other.ShapeRange)) return false;
      if (ShapeFlexibilityCase != other.ShapeFlexibilityCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= shape_.GetHashCode();
      if (DataType != 0) hash ^= DataType.GetHashCode();
      if (shapeFlexibilityCase_ == ShapeFlexibilityOneofCase.EnumeratedShapes) hash ^= EnumeratedShapes.GetHashCode();
      if (shapeFlexibilityCase_ == ShapeFlexibilityOneofCase.ShapeRange) hash ^= ShapeRange.GetHashCode();
      hash ^= (int) shapeFlexibilityCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      shape_.WriteTo(output, _repeated_shape_codec);
      if (DataType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DataType);
      }
      if (shapeFlexibilityCase_ == ShapeFlexibilityOneofCase.EnumeratedShapes) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(EnumeratedShapes);
      }
      if (shapeFlexibilityCase_ == ShapeFlexibilityOneofCase.ShapeRange) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(ShapeRange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += shape_.CalculateSize(_repeated_shape_codec);
      if (DataType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataType);
      }
      if (shapeFlexibilityCase_ == ShapeFlexibilityOneofCase.EnumeratedShapes) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EnumeratedShapes);
      }
      if (shapeFlexibilityCase_ == ShapeFlexibilityOneofCase.ShapeRange) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ShapeRange);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArrayFeatureType other) {
      if (other == null) {
        return;
      }
      shape_.Add(other.shape_);
      if (other.DataType != 0) {
        DataType = other.DataType;
      }
      switch (other.ShapeFlexibilityCase) {
        case ShapeFlexibilityOneofCase.EnumeratedShapes:
          if (EnumeratedShapes == null) {
            EnumeratedShapes = new global::CoreML.Specification.ArrayFeatureType.Types.EnumeratedShapes();
          }
          EnumeratedShapes.MergeFrom(other.EnumeratedShapes);
          break;
        case ShapeFlexibilityOneofCase.ShapeRange:
          if (ShapeRange == null) {
            ShapeRange = new global::CoreML.Specification.ArrayFeatureType.Types.ShapeRange();
          }
          ShapeRange.MergeFrom(other.ShapeRange);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            shape_.AddEntriesFrom(input, _repeated_shape_codec);
            break;
          }
          case 16: {
            dataType_ = (global::CoreML.Specification.ArrayFeatureType.Types.ArrayDataType) input.ReadEnum();
            break;
          }
          case 170: {
            global::CoreML.Specification.ArrayFeatureType.Types.EnumeratedShapes subBuilder = new global::CoreML.Specification.ArrayFeatureType.Types.EnumeratedShapes();
            if (shapeFlexibilityCase_ == ShapeFlexibilityOneofCase.EnumeratedShapes) {
              subBuilder.MergeFrom(EnumeratedShapes);
            }
            input.ReadMessage(subBuilder);
            EnumeratedShapes = subBuilder;
            break;
          }
          case 250: {
            global::CoreML.Specification.ArrayFeatureType.Types.ShapeRange subBuilder = new global::CoreML.Specification.ArrayFeatureType.Types.ShapeRange();
            if (shapeFlexibilityCase_ == ShapeFlexibilityOneofCase.ShapeRange) {
              subBuilder.MergeFrom(ShapeRange);
            }
            input.ReadMessage(subBuilder);
            ShapeRange = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ArrayFeatureType message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ArrayDataType {
        [pbr::OriginalName("INVALID_ARRAY_DATA_TYPE")] InvalidArrayDataType = 0,
        /// <summary>
        /// 0x10000 | 32
        /// </summary>
        [pbr::OriginalName("FLOAT32")] Float32 = 65568,
        /// <summary>
        /// 0x10000 | 64
        /// </summary>
        [pbr::OriginalName("DOUBLE")] Double = 65600,
        /// <summary>
        /// 0x20000 | 32
        /// </summary>
        [pbr::OriginalName("INT32")] Int32 = 131104,
      }

      public sealed partial class Shape : pb::IMessage<Shape> {
        private static readonly pb::MessageParser<Shape> _parser = new pb::MessageParser<Shape>(() => new Shape());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Shape> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CoreML.Specification.ArrayFeatureType.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Shape() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Shape(Shape other) : this() {
          shape_ = other.shape_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Shape Clone() {
          return new Shape(this);
        }

        /// <summary>Field number for the "shape" field.</summary>
        public const int Shape_FieldNumber = 1;
        private static readonly pb::FieldCodec<long> _repeated_shape_codec
            = pb::FieldCodec.ForInt64(10);
        private readonly pbc::RepeatedField<long> shape_ = new pbc::RepeatedField<long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> Shape_ {
          get { return shape_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Shape);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Shape other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!shape_.Equals(other.shape_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= shape_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          shape_.WriteTo(output, _repeated_shape_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += shape_.CalculateSize(_repeated_shape_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Shape other) {
          if (other == null) {
            return;
          }
          shape_.Add(other.shape_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 8: {
                shape_.AddEntriesFrom(input, _repeated_shape_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class EnumeratedShapes : pb::IMessage<EnumeratedShapes> {
        private static readonly pb::MessageParser<EnumeratedShapes> _parser = new pb::MessageParser<EnumeratedShapes>(() => new EnumeratedShapes());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EnumeratedShapes> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CoreML.Specification.ArrayFeatureType.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumeratedShapes() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumeratedShapes(EnumeratedShapes other) : this() {
          shapes_ = other.shapes_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumeratedShapes Clone() {
          return new EnumeratedShapes(this);
        }

        /// <summary>Field number for the "shapes" field.</summary>
        public const int ShapesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::CoreML.Specification.ArrayFeatureType.Types.Shape> _repeated_shapes_codec
            = pb::FieldCodec.ForMessage(10, global::CoreML.Specification.ArrayFeatureType.Types.Shape.Parser);
        private readonly pbc::RepeatedField<global::CoreML.Specification.ArrayFeatureType.Types.Shape> shapes_ = new pbc::RepeatedField<global::CoreML.Specification.ArrayFeatureType.Types.Shape>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::CoreML.Specification.ArrayFeatureType.Types.Shape> Shapes {
          get { return shapes_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EnumeratedShapes);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EnumeratedShapes other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!shapes_.Equals(other.shapes_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= shapes_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          shapes_.WriteTo(output, _repeated_shapes_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += shapes_.CalculateSize(_repeated_shapes_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EnumeratedShapes other) {
          if (other == null) {
            return;
          }
          shapes_.Add(other.shapes_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                shapes_.AddEntriesFrom(input, _repeated_shapes_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class ShapeRange : pb::IMessage<ShapeRange> {
        private static readonly pb::MessageParser<ShapeRange> _parser = new pb::MessageParser<ShapeRange>(() => new ShapeRange());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ShapeRange> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CoreML.Specification.ArrayFeatureType.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShapeRange() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShapeRange(ShapeRange other) : this() {
          sizeRanges_ = other.sizeRanges_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShapeRange Clone() {
          return new ShapeRange(this);
        }

        /// <summary>Field number for the "sizeRanges" field.</summary>
        public const int SizeRangesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::CoreML.Specification.SizeRange> _repeated_sizeRanges_codec
            = pb::FieldCodec.ForMessage(10, global::CoreML.Specification.SizeRange.Parser);
        private readonly pbc::RepeatedField<global::CoreML.Specification.SizeRange> sizeRanges_ = new pbc::RepeatedField<global::CoreML.Specification.SizeRange>();
        /// <summary>
        /// sizeRanges.size() must be length 1 or 3
        /// sizeRanges[d] specifies the allowed range for dimension d
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::CoreML.Specification.SizeRange> SizeRanges {
          get { return sizeRanges_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ShapeRange);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ShapeRange other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!sizeRanges_.Equals(other.sizeRanges_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= sizeRanges_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          sizeRanges_.WriteTo(output, _repeated_sizeRanges_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += sizeRanges_.CalculateSize(_repeated_sizeRanges_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ShapeRange other) {
          if (other == null) {
            return;
          }
          sizeRanges_.Add(other.sizeRanges_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                sizeRanges_.AddEntriesFrom(input, _repeated_sizeRanges_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// The dictionary feature type.
  /// </summary>
  public sealed partial class DictionaryFeatureType : pb::IMessage<DictionaryFeatureType> {
    private static readonly pb::MessageParser<DictionaryFeatureType> _parser = new pb::MessageParser<DictionaryFeatureType>(() => new DictionaryFeatureType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DictionaryFeatureType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.FeatureTypesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DictionaryFeatureType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DictionaryFeatureType(DictionaryFeatureType other) : this() {
      switch (other.KeyTypeCase) {
        case KeyTypeOneofCase.Int64KeyType:
          Int64KeyType = other.Int64KeyType.Clone();
          break;
        case KeyTypeOneofCase.StringKeyType:
          StringKeyType = other.StringKeyType.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DictionaryFeatureType Clone() {
      return new DictionaryFeatureType(this);
    }

    /// <summary>Field number for the "int64KeyType" field.</summary>
    public const int Int64KeyTypeFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Int64FeatureType Int64KeyType {
      get { return keyTypeCase_ == KeyTypeOneofCase.Int64KeyType ? (global::CoreML.Specification.Int64FeatureType) keyType_ : null; }
      set {
        keyType_ = value;
        keyTypeCase_ = value == null ? KeyTypeOneofCase.None : KeyTypeOneofCase.Int64KeyType;
      }
    }

    /// <summary>Field number for the "stringKeyType" field.</summary>
    public const int StringKeyTypeFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.StringFeatureType StringKeyType {
      get { return keyTypeCase_ == KeyTypeOneofCase.StringKeyType ? (global::CoreML.Specification.StringFeatureType) keyType_ : null; }
      set {
        keyType_ = value;
        keyTypeCase_ = value == null ? KeyTypeOneofCase.None : KeyTypeOneofCase.StringKeyType;
      }
    }

    private object keyType_;
    /// <summary>Enum of possible cases for the "KeyType" oneof.</summary>
    public enum KeyTypeOneofCase {
      None = 0,
      Int64KeyType = 1,
      StringKeyType = 2,
    }
    private KeyTypeOneofCase keyTypeCase_ = KeyTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyTypeOneofCase KeyTypeCase {
      get { return keyTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKeyType() {
      keyTypeCase_ = KeyTypeOneofCase.None;
      keyType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DictionaryFeatureType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DictionaryFeatureType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Int64KeyType, other.Int64KeyType)) return false;
      if (!object.Equals(StringKeyType, other.StringKeyType)) return false;
      if (KeyTypeCase != other.KeyTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (keyTypeCase_ == KeyTypeOneofCase.Int64KeyType) hash ^= Int64KeyType.GetHashCode();
      if (keyTypeCase_ == KeyTypeOneofCase.StringKeyType) hash ^= StringKeyType.GetHashCode();
      hash ^= (int) keyTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (keyTypeCase_ == KeyTypeOneofCase.Int64KeyType) {
        output.WriteRawTag(10);
        output.WriteMessage(Int64KeyType);
      }
      if (keyTypeCase_ == KeyTypeOneofCase.StringKeyType) {
        output.WriteRawTag(18);
        output.WriteMessage(StringKeyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (keyTypeCase_ == KeyTypeOneofCase.Int64KeyType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Int64KeyType);
      }
      if (keyTypeCase_ == KeyTypeOneofCase.StringKeyType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StringKeyType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DictionaryFeatureType other) {
      if (other == null) {
        return;
      }
      switch (other.KeyTypeCase) {
        case KeyTypeOneofCase.Int64KeyType:
          if (Int64KeyType == null) {
            Int64KeyType = new global::CoreML.Specification.Int64FeatureType();
          }
          Int64KeyType.MergeFrom(other.Int64KeyType);
          break;
        case KeyTypeOneofCase.StringKeyType:
          if (StringKeyType == null) {
            StringKeyType = new global::CoreML.Specification.StringFeatureType();
          }
          StringKeyType.MergeFrom(other.StringKeyType);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::CoreML.Specification.Int64FeatureType subBuilder = new global::CoreML.Specification.Int64FeatureType();
            if (keyTypeCase_ == KeyTypeOneofCase.Int64KeyType) {
              subBuilder.MergeFrom(Int64KeyType);
            }
            input.ReadMessage(subBuilder);
            Int64KeyType = subBuilder;
            break;
          }
          case 18: {
            global::CoreML.Specification.StringFeatureType subBuilder = new global::CoreML.Specification.StringFeatureType();
            if (keyTypeCase_ == KeyTypeOneofCase.StringKeyType) {
              subBuilder.MergeFrom(StringKeyType);
            }
            input.ReadMessage(subBuilder);
            StringKeyType = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// The Sequence feature type.
  /// </summary>
  public sealed partial class SequenceFeatureType : pb::IMessage<SequenceFeatureType> {
    private static readonly pb::MessageParser<SequenceFeatureType> _parser = new pb::MessageParser<SequenceFeatureType>(() => new SequenceFeatureType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SequenceFeatureType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.FeatureTypesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SequenceFeatureType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SequenceFeatureType(SequenceFeatureType other) : this() {
      sizeRange_ = other.sizeRange_ != null ? other.sizeRange_.Clone() : null;
      switch (other.TypeCase) {
        case TypeOneofCase.Int64Type:
          Int64Type = other.Int64Type.Clone();
          break;
        case TypeOneofCase.StringType:
          StringType = other.StringType.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SequenceFeatureType Clone() {
      return new SequenceFeatureType(this);
    }

    /// <summary>Field number for the "int64Type" field.</summary>
    public const int Int64TypeFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Int64FeatureType Int64Type {
      get { return typeCase_ == TypeOneofCase.Int64Type ? (global::CoreML.Specification.Int64FeatureType) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Int64Type;
      }
    }

    /// <summary>Field number for the "stringType" field.</summary>
    public const int StringTypeFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.StringFeatureType StringType {
      get { return typeCase_ == TypeOneofCase.StringType ? (global::CoreML.Specification.StringFeatureType) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.StringType;
      }
    }

    /// <summary>Field number for the "sizeRange" field.</summary>
    public const int SizeRangeFieldNumber = 101;
    private global::CoreML.Specification.SizeRange sizeRange_;
    /// <summary>
    /// Range of allowed size/length/count of sequence
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.SizeRange SizeRange {
      get { return sizeRange_; }
      set {
        sizeRange_ = value;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "Type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Int64Type = 1,
      StringType = 3,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SequenceFeatureType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SequenceFeatureType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Int64Type, other.Int64Type)) return false;
      if (!object.Equals(StringType, other.StringType)) return false;
      if (!object.Equals(SizeRange, other.SizeRange)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.Int64Type) hash ^= Int64Type.GetHashCode();
      if (typeCase_ == TypeOneofCase.StringType) hash ^= StringType.GetHashCode();
      if (sizeRange_ != null) hash ^= SizeRange.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.Int64Type) {
        output.WriteRawTag(10);
        output.WriteMessage(Int64Type);
      }
      if (typeCase_ == TypeOneofCase.StringType) {
        output.WriteRawTag(26);
        output.WriteMessage(StringType);
      }
      if (sizeRange_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(SizeRange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.Int64Type) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Int64Type);
      }
      if (typeCase_ == TypeOneofCase.StringType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StringType);
      }
      if (sizeRange_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SizeRange);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SequenceFeatureType other) {
      if (other == null) {
        return;
      }
      if (other.sizeRange_ != null) {
        if (sizeRange_ == null) {
          sizeRange_ = new global::CoreML.Specification.SizeRange();
        }
        SizeRange.MergeFrom(other.SizeRange);
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Int64Type:
          if (Int64Type == null) {
            Int64Type = new global::CoreML.Specification.Int64FeatureType();
          }
          Int64Type.MergeFrom(other.Int64Type);
          break;
        case TypeOneofCase.StringType:
          if (StringType == null) {
            StringType = new global::CoreML.Specification.StringFeatureType();
          }
          StringType.MergeFrom(other.StringType);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::CoreML.Specification.Int64FeatureType subBuilder = new global::CoreML.Specification.Int64FeatureType();
            if (typeCase_ == TypeOneofCase.Int64Type) {
              subBuilder.MergeFrom(Int64Type);
            }
            input.ReadMessage(subBuilder);
            Int64Type = subBuilder;
            break;
          }
          case 26: {
            global::CoreML.Specification.StringFeatureType subBuilder = new global::CoreML.Specification.StringFeatureType();
            if (typeCase_ == TypeOneofCase.StringType) {
              subBuilder.MergeFrom(StringType);
            }
            input.ReadMessage(subBuilder);
            StringType = subBuilder;
            break;
          }
          case 810: {
            if (sizeRange_ == null) {
              sizeRange_ = new global::CoreML.Specification.SizeRange();
            }
            input.ReadMessage(sizeRange_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A feature, which may be optional.
  /// </summary>
  public sealed partial class FeatureType : pb::IMessage<FeatureType> {
    private static readonly pb::MessageParser<FeatureType> _parser = new pb::MessageParser<FeatureType>(() => new FeatureType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeatureType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.FeatureTypesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureType(FeatureType other) : this() {
      isOptional_ = other.isOptional_;
      switch (other.TypeCase) {
        case TypeOneofCase.Int64Type:
          Int64Type = other.Int64Type.Clone();
          break;
        case TypeOneofCase.DoubleType:
          DoubleType = other.DoubleType.Clone();
          break;
        case TypeOneofCase.StringType:
          StringType = other.StringType.Clone();
          break;
        case TypeOneofCase.ImageType:
          ImageType = other.ImageType.Clone();
          break;
        case TypeOneofCase.MultiArrayType:
          MultiArrayType = other.MultiArrayType.Clone();
          break;
        case TypeOneofCase.DictionaryType:
          DictionaryType = other.DictionaryType.Clone();
          break;
        case TypeOneofCase.SequenceType:
          SequenceType = other.SequenceType.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureType Clone() {
      return new FeatureType(this);
    }

    /// <summary>Field number for the "int64Type" field.</summary>
    public const int Int64TypeFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Int64FeatureType Int64Type {
      get { return typeCase_ == TypeOneofCase.Int64Type ? (global::CoreML.Specification.Int64FeatureType) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Int64Type;
      }
    }

    /// <summary>Field number for the "doubleType" field.</summary>
    public const int DoubleTypeFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.DoubleFeatureType DoubleType {
      get { return typeCase_ == TypeOneofCase.DoubleType ? (global::CoreML.Specification.DoubleFeatureType) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.DoubleType;
      }
    }

    /// <summary>Field number for the "stringType" field.</summary>
    public const int StringTypeFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.StringFeatureType StringType {
      get { return typeCase_ == TypeOneofCase.StringType ? (global::CoreML.Specification.StringFeatureType) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.StringType;
      }
    }

    /// <summary>Field number for the "imageType" field.</summary>
    public const int ImageTypeFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ImageFeatureType ImageType {
      get { return typeCase_ == TypeOneofCase.ImageType ? (global::CoreML.Specification.ImageFeatureType) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.ImageType;
      }
    }

    /// <summary>Field number for the "multiArrayType" field.</summary>
    public const int MultiArrayTypeFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ArrayFeatureType MultiArrayType {
      get { return typeCase_ == TypeOneofCase.MultiArrayType ? (global::CoreML.Specification.ArrayFeatureType) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.MultiArrayType;
      }
    }

    /// <summary>Field number for the "dictionaryType" field.</summary>
    public const int DictionaryTypeFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.DictionaryFeatureType DictionaryType {
      get { return typeCase_ == TypeOneofCase.DictionaryType ? (global::CoreML.Specification.DictionaryFeatureType) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.DictionaryType;
      }
    }

    /// <summary>Field number for the "sequenceType" field.</summary>
    public const int SequenceTypeFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.SequenceFeatureType SequenceType {
      get { return typeCase_ == TypeOneofCase.SequenceType ? (global::CoreML.Specification.SequenceFeatureType) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.SequenceType;
      }
    }

    /// <summary>Field number for the "isOptional" field.</summary>
    public const int IsOptionalFieldNumber = 1000;
    private bool isOptional_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOptional {
      get { return isOptional_; }
      set {
        isOptional_ = value;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "Type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Int64Type = 1,
      DoubleType = 2,
      StringType = 3,
      ImageType = 4,
      MultiArrayType = 5,
      DictionaryType = 6,
      SequenceType = 7,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeatureType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeatureType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Int64Type, other.Int64Type)) return false;
      if (!object.Equals(DoubleType, other.DoubleType)) return false;
      if (!object.Equals(StringType, other.StringType)) return false;
      if (!object.Equals(ImageType, other.ImageType)) return false;
      if (!object.Equals(MultiArrayType, other.MultiArrayType)) return false;
      if (!object.Equals(DictionaryType, other.DictionaryType)) return false;
      if (!object.Equals(SequenceType, other.SequenceType)) return false;
      if (IsOptional != other.IsOptional) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.Int64Type) hash ^= Int64Type.GetHashCode();
      if (typeCase_ == TypeOneofCase.DoubleType) hash ^= DoubleType.GetHashCode();
      if (typeCase_ == TypeOneofCase.StringType) hash ^= StringType.GetHashCode();
      if (typeCase_ == TypeOneofCase.ImageType) hash ^= ImageType.GetHashCode();
      if (typeCase_ == TypeOneofCase.MultiArrayType) hash ^= MultiArrayType.GetHashCode();
      if (typeCase_ == TypeOneofCase.DictionaryType) hash ^= DictionaryType.GetHashCode();
      if (typeCase_ == TypeOneofCase.SequenceType) hash ^= SequenceType.GetHashCode();
      if (IsOptional != false) hash ^= IsOptional.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.Int64Type) {
        output.WriteRawTag(10);
        output.WriteMessage(Int64Type);
      }
      if (typeCase_ == TypeOneofCase.DoubleType) {
        output.WriteRawTag(18);
        output.WriteMessage(DoubleType);
      }
      if (typeCase_ == TypeOneofCase.StringType) {
        output.WriteRawTag(26);
        output.WriteMessage(StringType);
      }
      if (typeCase_ == TypeOneofCase.ImageType) {
        output.WriteRawTag(34);
        output.WriteMessage(ImageType);
      }
      if (typeCase_ == TypeOneofCase.MultiArrayType) {
        output.WriteRawTag(42);
        output.WriteMessage(MultiArrayType);
      }
      if (typeCase_ == TypeOneofCase.DictionaryType) {
        output.WriteRawTag(50);
        output.WriteMessage(DictionaryType);
      }
      if (typeCase_ == TypeOneofCase.SequenceType) {
        output.WriteRawTag(58);
        output.WriteMessage(SequenceType);
      }
      if (IsOptional != false) {
        output.WriteRawTag(192, 62);
        output.WriteBool(IsOptional);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.Int64Type) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Int64Type);
      }
      if (typeCase_ == TypeOneofCase.DoubleType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DoubleType);
      }
      if (typeCase_ == TypeOneofCase.StringType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StringType);
      }
      if (typeCase_ == TypeOneofCase.ImageType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImageType);
      }
      if (typeCase_ == TypeOneofCase.MultiArrayType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MultiArrayType);
      }
      if (typeCase_ == TypeOneofCase.DictionaryType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DictionaryType);
      }
      if (typeCase_ == TypeOneofCase.SequenceType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SequenceType);
      }
      if (IsOptional != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeatureType other) {
      if (other == null) {
        return;
      }
      if (other.IsOptional != false) {
        IsOptional = other.IsOptional;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Int64Type:
          if (Int64Type == null) {
            Int64Type = new global::CoreML.Specification.Int64FeatureType();
          }
          Int64Type.MergeFrom(other.Int64Type);
          break;
        case TypeOneofCase.DoubleType:
          if (DoubleType == null) {
            DoubleType = new global::CoreML.Specification.DoubleFeatureType();
          }
          DoubleType.MergeFrom(other.DoubleType);
          break;
        case TypeOneofCase.StringType:
          if (StringType == null) {
            StringType = new global::CoreML.Specification.StringFeatureType();
          }
          StringType.MergeFrom(other.StringType);
          break;
        case TypeOneofCase.ImageType:
          if (ImageType == null) {
            ImageType = new global::CoreML.Specification.ImageFeatureType();
          }
          ImageType.MergeFrom(other.ImageType);
          break;
        case TypeOneofCase.MultiArrayType:
          if (MultiArrayType == null) {
            MultiArrayType = new global::CoreML.Specification.ArrayFeatureType();
          }
          MultiArrayType.MergeFrom(other.MultiArrayType);
          break;
        case TypeOneofCase.DictionaryType:
          if (DictionaryType == null) {
            DictionaryType = new global::CoreML.Specification.DictionaryFeatureType();
          }
          DictionaryType.MergeFrom(other.DictionaryType);
          break;
        case TypeOneofCase.SequenceType:
          if (SequenceType == null) {
            SequenceType = new global::CoreML.Specification.SequenceFeatureType();
          }
          SequenceType.MergeFrom(other.SequenceType);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::CoreML.Specification.Int64FeatureType subBuilder = new global::CoreML.Specification.Int64FeatureType();
            if (typeCase_ == TypeOneofCase.Int64Type) {
              subBuilder.MergeFrom(Int64Type);
            }
            input.ReadMessage(subBuilder);
            Int64Type = subBuilder;
            break;
          }
          case 18: {
            global::CoreML.Specification.DoubleFeatureType subBuilder = new global::CoreML.Specification.DoubleFeatureType();
            if (typeCase_ == TypeOneofCase.DoubleType) {
              subBuilder.MergeFrom(DoubleType);
            }
            input.ReadMessage(subBuilder);
            DoubleType = subBuilder;
            break;
          }
          case 26: {
            global::CoreML.Specification.StringFeatureType subBuilder = new global::CoreML.Specification.StringFeatureType();
            if (typeCase_ == TypeOneofCase.StringType) {
              subBuilder.MergeFrom(StringType);
            }
            input.ReadMessage(subBuilder);
            StringType = subBuilder;
            break;
          }
          case 34: {
            global::CoreML.Specification.ImageFeatureType subBuilder = new global::CoreML.Specification.ImageFeatureType();
            if (typeCase_ == TypeOneofCase.ImageType) {
              subBuilder.MergeFrom(ImageType);
            }
            input.ReadMessage(subBuilder);
            ImageType = subBuilder;
            break;
          }
          case 42: {
            global::CoreML.Specification.ArrayFeatureType subBuilder = new global::CoreML.Specification.ArrayFeatureType();
            if (typeCase_ == TypeOneofCase.MultiArrayType) {
              subBuilder.MergeFrom(MultiArrayType);
            }
            input.ReadMessage(subBuilder);
            MultiArrayType = subBuilder;
            break;
          }
          case 50: {
            global::CoreML.Specification.DictionaryFeatureType subBuilder = new global::CoreML.Specification.DictionaryFeatureType();
            if (typeCase_ == TypeOneofCase.DictionaryType) {
              subBuilder.MergeFrom(DictionaryType);
            }
            input.ReadMessage(subBuilder);
            DictionaryType = subBuilder;
            break;
          }
          case 58: {
            global::CoreML.Specification.SequenceFeatureType subBuilder = new global::CoreML.Specification.SequenceFeatureType();
            if (typeCase_ == TypeOneofCase.SequenceType) {
              subBuilder.MergeFrom(SequenceType);
            }
            input.ReadMessage(subBuilder);
            SequenceType = subBuilder;
            break;
          }
          case 8000: {
            IsOptional = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

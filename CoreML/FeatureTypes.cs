// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FeatureTypes.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CoreML.Specification {

  /// <summary>Holder for reflection information generated from FeatureTypes.proto</summary>
  public static partial class FeatureTypesReflection {

    #region Descriptor
    /// <summary>File descriptor for FeatureTypes.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FeatureTypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJGZWF0dXJlVHlwZXMucHJvdG8SFENvcmVNTC5TcGVjaWZpY2F0aW9uIhIK",
            "EEludDY0RmVhdHVyZVR5cGUiEwoRRG91YmxlRmVhdHVyZVR5cGUiEwoRU3Ry",
            "aW5nRmVhdHVyZVR5cGUiwAEKEEltYWdlRmVhdHVyZVR5cGUSDQoFd2lkdGgY",
            "ASABKAMSDgoGaGVpZ2h0GAIgASgDEkUKCmNvbG9yU3BhY2UYAyABKA4yMS5D",
            "b3JlTUwuU3BlY2lmaWNhdGlvbi5JbWFnZUZlYXR1cmVUeXBlLkNvbG9yU3Bh",
            "Y2UiRgoKQ29sb3JTcGFjZRIXChNJTlZBTElEX0NPTE9SX1NQQUNFEAASDQoJ",
            "R1JBWVNDQUxFEAoSBwoDUkdCEBQSBwoDQkdSEB4iwQEKEEFycmF5RmVhdHVy",
            "ZVR5cGUSDQoFc2hhcGUYASADKAMSRgoIZGF0YVR5cGUYAiABKA4yNC5Db3Jl",
            "TUwuU3BlY2lmaWNhdGlvbi5BcnJheUZlYXR1cmVUeXBlLkFycmF5RGF0YVR5",
            "cGUiVgoNQXJyYXlEYXRhVHlwZRIbChdJTlZBTElEX0FSUkFZX0RBVEFfVFlQ",
            "RRAAEg0KB0ZMT0FUMzIQoIAEEgwKBkRPVUJMRRDAgAQSCwoFSU5UMzIQoIAI",
            "IqQBChVEaWN0aW9uYXJ5RmVhdHVyZVR5cGUSPgoMaW50NjRLZXlUeXBlGAEg",
            "ASgLMiYuQ29yZU1MLlNwZWNpZmljYXRpb24uSW50NjRGZWF0dXJlVHlwZUgA",
            "EkAKDXN0cmluZ0tleVR5cGUYAiABKAsyJy5Db3JlTUwuU3BlY2lmaWNhdGlv",
            "bi5TdHJpbmdGZWF0dXJlVHlwZUgAQgkKB0tleVR5cGUiqwMKC0ZlYXR1cmVU",
            "eXBlEjsKCWludDY0VHlwZRgBIAEoCzImLkNvcmVNTC5TcGVjaWZpY2F0aW9u",
            "LkludDY0RmVhdHVyZVR5cGVIABI9Cgpkb3VibGVUeXBlGAIgASgLMicuQ29y",
            "ZU1MLlNwZWNpZmljYXRpb24uRG91YmxlRmVhdHVyZVR5cGVIABI9CgpzdHJp",
            "bmdUeXBlGAMgASgLMicuQ29yZU1MLlNwZWNpZmljYXRpb24uU3RyaW5nRmVh",
            "dHVyZVR5cGVIABI7CglpbWFnZVR5cGUYBCABKAsyJi5Db3JlTUwuU3BlY2lm",
            "aWNhdGlvbi5JbWFnZUZlYXR1cmVUeXBlSAASQAoObXVsdGlBcnJheVR5cGUY",
            "BSABKAsyJi5Db3JlTUwuU3BlY2lmaWNhdGlvbi5BcnJheUZlYXR1cmVUeXBl",
            "SAASRQoOZGljdGlvbmFyeVR5cGUYBiABKAsyKy5Db3JlTUwuU3BlY2lmaWNh",
            "dGlvbi5EaWN0aW9uYXJ5RmVhdHVyZVR5cGVIABITCgppc09wdGlvbmFsGOgH",
            "IAEoCEIGCgRUeXBlQgJIA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.Int64FeatureType), global::CoreML.Specification.Int64FeatureType.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.DoubleFeatureType), global::CoreML.Specification.DoubleFeatureType.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.StringFeatureType), global::CoreML.Specification.StringFeatureType.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ImageFeatureType), global::CoreML.Specification.ImageFeatureType.Parser, new[]{ "Width", "Height", "ColorSpace" }, null, new[]{ typeof(global::CoreML.Specification.ImageFeatureType.Types.ColorSpace) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ArrayFeatureType), global::CoreML.Specification.ArrayFeatureType.Parser, new[]{ "Shape", "DataType" }, null, new[]{ typeof(global::CoreML.Specification.ArrayFeatureType.Types.ArrayDataType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.DictionaryFeatureType), global::CoreML.Specification.DictionaryFeatureType.Parser, new[]{ "Int64KeyType", "StringKeyType" }, new[]{ "KeyType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.FeatureType), global::CoreML.Specification.FeatureType.Parser, new[]{ "Int64Type", "DoubleType", "StringType", "ImageType", "MultiArrayType", "DictionaryType", "IsOptional" }, new[]{ "Type" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// The 64-bit integer feature type.
  /// </summary>
  public sealed partial class Int64FeatureType : pb::IMessage<Int64FeatureType> {
    private static readonly pb::MessageParser<Int64FeatureType> _parser = new pb::MessageParser<Int64FeatureType>(() => new Int64FeatureType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Int64FeatureType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.FeatureTypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int64FeatureType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int64FeatureType(Int64FeatureType other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int64FeatureType Clone() {
      return new Int64FeatureType(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Int64FeatureType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Int64FeatureType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Int64FeatureType other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///*
  /// The double-precision floating point number feature type.
  /// </summary>
  public sealed partial class DoubleFeatureType : pb::IMessage<DoubleFeatureType> {
    private static readonly pb::MessageParser<DoubleFeatureType> _parser = new pb::MessageParser<DoubleFeatureType>(() => new DoubleFeatureType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DoubleFeatureType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.FeatureTypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleFeatureType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleFeatureType(DoubleFeatureType other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleFeatureType Clone() {
      return new DoubleFeatureType(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DoubleFeatureType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DoubleFeatureType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DoubleFeatureType other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///*
  /// The string feature type.
  /// </summary>
  public sealed partial class StringFeatureType : pb::IMessage<StringFeatureType> {
    private static readonly pb::MessageParser<StringFeatureType> _parser = new pb::MessageParser<StringFeatureType>(() => new StringFeatureType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringFeatureType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.FeatureTypesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringFeatureType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringFeatureType(StringFeatureType other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringFeatureType Clone() {
      return new StringFeatureType(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringFeatureType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringFeatureType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringFeatureType other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///*
  /// The image feature type.
  /// </summary>
  public sealed partial class ImageFeatureType : pb::IMessage<ImageFeatureType> {
    private static readonly pb::MessageParser<ImageFeatureType> _parser = new pb::MessageParser<ImageFeatureType>(() => new ImageFeatureType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageFeatureType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.FeatureTypesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageFeatureType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageFeatureType(ImageFeatureType other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      colorSpace_ = other.colorSpace_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageFeatureType Clone() {
      return new ImageFeatureType(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private long width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private long height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "colorSpace" field.</summary>
    public const int ColorSpaceFieldNumber = 3;
    private global::CoreML.Specification.ImageFeatureType.Types.ColorSpace colorSpace_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ImageFeatureType.Types.ColorSpace ColorSpace {
      get { return colorSpace_; }
      set {
        colorSpace_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageFeatureType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageFeatureType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (ColorSpace != other.ColorSpace) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0L) hash ^= Width.GetHashCode();
      if (Height != 0L) hash ^= Height.GetHashCode();
      if (ColorSpace != 0) hash ^= ColorSpace.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Width);
      }
      if (Height != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Height);
      }
      if (ColorSpace != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ColorSpace);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Width);
      }
      if (Height != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Height);
      }
      if (ColorSpace != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ColorSpace);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageFeatureType other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0L) {
        Width = other.Width;
      }
      if (other.Height != 0L) {
        Height = other.Height;
      }
      if (other.ColorSpace != 0) {
        ColorSpace = other.ColorSpace;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Width = input.ReadInt64();
            break;
          }
          case 16: {
            Height = input.ReadInt64();
            break;
          }
          case 24: {
            colorSpace_ = (global::CoreML.Specification.ImageFeatureType.Types.ColorSpace) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ImageFeatureType message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Assumes raw (decompressed) format
      /// </summary>
      public enum ColorSpace {
        [pbr::OriginalName("INVALID_COLOR_SPACE")] InvalidColorSpace = 0,
        /// <summary>
        ///  8 bit pixel: 0=black, 255=white
        /// </summary>
        [pbr::OriginalName("GRAYSCALE")] Grayscale = 10,
        /// <summary>
        /// 32 bit pixel: RGBA with A channel ignored
        /// </summary>
        [pbr::OriginalName("RGB")] Rgb = 20,
        /// <summary>
        /// 32 bit pixel: BGRA with A channel ignored
        /// </summary>
        [pbr::OriginalName("BGR")] Bgr = 30,
      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// The array feature type.
  /// </summary>
  public sealed partial class ArrayFeatureType : pb::IMessage<ArrayFeatureType> {
    private static readonly pb::MessageParser<ArrayFeatureType> _parser = new pb::MessageParser<ArrayFeatureType>(() => new ArrayFeatureType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArrayFeatureType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.FeatureTypesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArrayFeatureType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArrayFeatureType(ArrayFeatureType other) : this() {
      shape_ = other.shape_.Clone();
      dataType_ = other.dataType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArrayFeatureType Clone() {
      return new ArrayFeatureType(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_shape_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> shape_ = new pbc::RepeatedField<long>();
    /// <summary>
    //// For neural networks, must be of length 1 or 3, representing input shape [C] or [C,H,W], respectively.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Shape {
      get { return shape_; }
    }

    /// <summary>Field number for the "dataType" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private global::CoreML.Specification.ArrayFeatureType.Types.ArrayDataType dataType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ArrayFeatureType.Types.ArrayDataType DataType {
      get { return dataType_; }
      set {
        dataType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArrayFeatureType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArrayFeatureType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!shape_.Equals(other.shape_)) return false;
      if (DataType != other.DataType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= shape_.GetHashCode();
      if (DataType != 0) hash ^= DataType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      shape_.WriteTo(output, _repeated_shape_codec);
      if (DataType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DataType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += shape_.CalculateSize(_repeated_shape_codec);
      if (DataType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArrayFeatureType other) {
      if (other == null) {
        return;
      }
      shape_.Add(other.shape_);
      if (other.DataType != 0) {
        DataType = other.DataType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            shape_.AddEntriesFrom(input, _repeated_shape_codec);
            break;
          }
          case 16: {
            dataType_ = (global::CoreML.Specification.ArrayFeatureType.Types.ArrayDataType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ArrayFeatureType message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ArrayDataType {
        [pbr::OriginalName("INVALID_ARRAY_DATA_TYPE")] InvalidArrayDataType = 0,
        /// <summary>
        /// 0x10000 | 32
        /// </summary>
        [pbr::OriginalName("FLOAT32")] Float32 = 65568,
        /// <summary>
        /// 0x10000 | 64
        /// </summary>
        [pbr::OriginalName("DOUBLE")] Double = 65600,
        /// <summary>
        /// 0x20000 | 32
        /// </summary>
        [pbr::OriginalName("INT32")] Int32 = 131104,
      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// The dictionary feature type.
  /// </summary>
  public sealed partial class DictionaryFeatureType : pb::IMessage<DictionaryFeatureType> {
    private static readonly pb::MessageParser<DictionaryFeatureType> _parser = new pb::MessageParser<DictionaryFeatureType>(() => new DictionaryFeatureType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DictionaryFeatureType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.FeatureTypesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DictionaryFeatureType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DictionaryFeatureType(DictionaryFeatureType other) : this() {
      switch (other.KeyTypeCase) {
        case KeyTypeOneofCase.Int64KeyType:
          Int64KeyType = other.Int64KeyType.Clone();
          break;
        case KeyTypeOneofCase.StringKeyType:
          StringKeyType = other.StringKeyType.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DictionaryFeatureType Clone() {
      return new DictionaryFeatureType(this);
    }

    /// <summary>Field number for the "int64KeyType" field.</summary>
    public const int Int64KeyTypeFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Int64FeatureType Int64KeyType {
      get { return keyTypeCase_ == KeyTypeOneofCase.Int64KeyType ? (global::CoreML.Specification.Int64FeatureType) keyType_ : null; }
      set {
        keyType_ = value;
        keyTypeCase_ = value == null ? KeyTypeOneofCase.None : KeyTypeOneofCase.Int64KeyType;
      }
    }

    /// <summary>Field number for the "stringKeyType" field.</summary>
    public const int StringKeyTypeFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.StringFeatureType StringKeyType {
      get { return keyTypeCase_ == KeyTypeOneofCase.StringKeyType ? (global::CoreML.Specification.StringFeatureType) keyType_ : null; }
      set {
        keyType_ = value;
        keyTypeCase_ = value == null ? KeyTypeOneofCase.None : KeyTypeOneofCase.StringKeyType;
      }
    }

    private object keyType_;
    /// <summary>Enum of possible cases for the "KeyType" oneof.</summary>
    public enum KeyTypeOneofCase {
      None = 0,
      Int64KeyType = 1,
      StringKeyType = 2,
    }
    private KeyTypeOneofCase keyTypeCase_ = KeyTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyTypeOneofCase KeyTypeCase {
      get { return keyTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKeyType() {
      keyTypeCase_ = KeyTypeOneofCase.None;
      keyType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DictionaryFeatureType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DictionaryFeatureType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Int64KeyType, other.Int64KeyType)) return false;
      if (!object.Equals(StringKeyType, other.StringKeyType)) return false;
      if (KeyTypeCase != other.KeyTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (keyTypeCase_ == KeyTypeOneofCase.Int64KeyType) hash ^= Int64KeyType.GetHashCode();
      if (keyTypeCase_ == KeyTypeOneofCase.StringKeyType) hash ^= StringKeyType.GetHashCode();
      hash ^= (int) keyTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (keyTypeCase_ == KeyTypeOneofCase.Int64KeyType) {
        output.WriteRawTag(10);
        output.WriteMessage(Int64KeyType);
      }
      if (keyTypeCase_ == KeyTypeOneofCase.StringKeyType) {
        output.WriteRawTag(18);
        output.WriteMessage(StringKeyType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (keyTypeCase_ == KeyTypeOneofCase.Int64KeyType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Int64KeyType);
      }
      if (keyTypeCase_ == KeyTypeOneofCase.StringKeyType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StringKeyType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DictionaryFeatureType other) {
      if (other == null) {
        return;
      }
      switch (other.KeyTypeCase) {
        case KeyTypeOneofCase.Int64KeyType:
          Int64KeyType = other.Int64KeyType;
          break;
        case KeyTypeOneofCase.StringKeyType:
          StringKeyType = other.StringKeyType;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::CoreML.Specification.Int64FeatureType subBuilder = new global::CoreML.Specification.Int64FeatureType();
            if (keyTypeCase_ == KeyTypeOneofCase.Int64KeyType) {
              subBuilder.MergeFrom(Int64KeyType);
            }
            input.ReadMessage(subBuilder);
            Int64KeyType = subBuilder;
            break;
          }
          case 18: {
            global::CoreML.Specification.StringFeatureType subBuilder = new global::CoreML.Specification.StringFeatureType();
            if (keyTypeCase_ == KeyTypeOneofCase.StringKeyType) {
              subBuilder.MergeFrom(StringKeyType);
            }
            input.ReadMessage(subBuilder);
            StringKeyType = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A feature, which may be optional.
  /// </summary>
  public sealed partial class FeatureType : pb::IMessage<FeatureType> {
    private static readonly pb::MessageParser<FeatureType> _parser = new pb::MessageParser<FeatureType>(() => new FeatureType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeatureType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.FeatureTypesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureType(FeatureType other) : this() {
      isOptional_ = other.isOptional_;
      switch (other.TypeCase) {
        case TypeOneofCase.Int64Type:
          Int64Type = other.Int64Type.Clone();
          break;
        case TypeOneofCase.DoubleType:
          DoubleType = other.DoubleType.Clone();
          break;
        case TypeOneofCase.StringType:
          StringType = other.StringType.Clone();
          break;
        case TypeOneofCase.ImageType:
          ImageType = other.ImageType.Clone();
          break;
        case TypeOneofCase.MultiArrayType:
          MultiArrayType = other.MultiArrayType.Clone();
          break;
        case TypeOneofCase.DictionaryType:
          DictionaryType = other.DictionaryType.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureType Clone() {
      return new FeatureType(this);
    }

    /// <summary>Field number for the "int64Type" field.</summary>
    public const int Int64TypeFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Int64FeatureType Int64Type {
      get { return typeCase_ == TypeOneofCase.Int64Type ? (global::CoreML.Specification.Int64FeatureType) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Int64Type;
      }
    }

    /// <summary>Field number for the "doubleType" field.</summary>
    public const int DoubleTypeFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.DoubleFeatureType DoubleType {
      get { return typeCase_ == TypeOneofCase.DoubleType ? (global::CoreML.Specification.DoubleFeatureType) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.DoubleType;
      }
    }

    /// <summary>Field number for the "stringType" field.</summary>
    public const int StringTypeFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.StringFeatureType StringType {
      get { return typeCase_ == TypeOneofCase.StringType ? (global::CoreML.Specification.StringFeatureType) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.StringType;
      }
    }

    /// <summary>Field number for the "imageType" field.</summary>
    public const int ImageTypeFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ImageFeatureType ImageType {
      get { return typeCase_ == TypeOneofCase.ImageType ? (global::CoreML.Specification.ImageFeatureType) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.ImageType;
      }
    }

    /// <summary>Field number for the "multiArrayType" field.</summary>
    public const int MultiArrayTypeFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ArrayFeatureType MultiArrayType {
      get { return typeCase_ == TypeOneofCase.MultiArrayType ? (global::CoreML.Specification.ArrayFeatureType) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.MultiArrayType;
      }
    }

    /// <summary>Field number for the "dictionaryType" field.</summary>
    public const int DictionaryTypeFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.DictionaryFeatureType DictionaryType {
      get { return typeCase_ == TypeOneofCase.DictionaryType ? (global::CoreML.Specification.DictionaryFeatureType) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.DictionaryType;
      }
    }

    /// <summary>Field number for the "isOptional" field.</summary>
    public const int IsOptionalFieldNumber = 1000;
    private bool isOptional_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOptional {
      get { return isOptional_; }
      set {
        isOptional_ = value;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "Type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Int64Type = 1,
      DoubleType = 2,
      StringType = 3,
      ImageType = 4,
      MultiArrayType = 5,
      DictionaryType = 6,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeatureType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeatureType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Int64Type, other.Int64Type)) return false;
      if (!object.Equals(DoubleType, other.DoubleType)) return false;
      if (!object.Equals(StringType, other.StringType)) return false;
      if (!object.Equals(ImageType, other.ImageType)) return false;
      if (!object.Equals(MultiArrayType, other.MultiArrayType)) return false;
      if (!object.Equals(DictionaryType, other.DictionaryType)) return false;
      if (IsOptional != other.IsOptional) return false;
      if (TypeCase != other.TypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.Int64Type) hash ^= Int64Type.GetHashCode();
      if (typeCase_ == TypeOneofCase.DoubleType) hash ^= DoubleType.GetHashCode();
      if (typeCase_ == TypeOneofCase.StringType) hash ^= StringType.GetHashCode();
      if (typeCase_ == TypeOneofCase.ImageType) hash ^= ImageType.GetHashCode();
      if (typeCase_ == TypeOneofCase.MultiArrayType) hash ^= MultiArrayType.GetHashCode();
      if (typeCase_ == TypeOneofCase.DictionaryType) hash ^= DictionaryType.GetHashCode();
      if (IsOptional != false) hash ^= IsOptional.GetHashCode();
      hash ^= (int) typeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.Int64Type) {
        output.WriteRawTag(10);
        output.WriteMessage(Int64Type);
      }
      if (typeCase_ == TypeOneofCase.DoubleType) {
        output.WriteRawTag(18);
        output.WriteMessage(DoubleType);
      }
      if (typeCase_ == TypeOneofCase.StringType) {
        output.WriteRawTag(26);
        output.WriteMessage(StringType);
      }
      if (typeCase_ == TypeOneofCase.ImageType) {
        output.WriteRawTag(34);
        output.WriteMessage(ImageType);
      }
      if (typeCase_ == TypeOneofCase.MultiArrayType) {
        output.WriteRawTag(42);
        output.WriteMessage(MultiArrayType);
      }
      if (typeCase_ == TypeOneofCase.DictionaryType) {
        output.WriteRawTag(50);
        output.WriteMessage(DictionaryType);
      }
      if (IsOptional != false) {
        output.WriteRawTag(192, 62);
        output.WriteBool(IsOptional);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.Int64Type) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Int64Type);
      }
      if (typeCase_ == TypeOneofCase.DoubleType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DoubleType);
      }
      if (typeCase_ == TypeOneofCase.StringType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StringType);
      }
      if (typeCase_ == TypeOneofCase.ImageType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImageType);
      }
      if (typeCase_ == TypeOneofCase.MultiArrayType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MultiArrayType);
      }
      if (typeCase_ == TypeOneofCase.DictionaryType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DictionaryType);
      }
      if (IsOptional != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeatureType other) {
      if (other == null) {
        return;
      }
      if (other.IsOptional != false) {
        IsOptional = other.IsOptional;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Int64Type:
          Int64Type = other.Int64Type;
          break;
        case TypeOneofCase.DoubleType:
          DoubleType = other.DoubleType;
          break;
        case TypeOneofCase.StringType:
          StringType = other.StringType;
          break;
        case TypeOneofCase.ImageType:
          ImageType = other.ImageType;
          break;
        case TypeOneofCase.MultiArrayType:
          MultiArrayType = other.MultiArrayType;
          break;
        case TypeOneofCase.DictionaryType:
          DictionaryType = other.DictionaryType;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::CoreML.Specification.Int64FeatureType subBuilder = new global::CoreML.Specification.Int64FeatureType();
            if (typeCase_ == TypeOneofCase.Int64Type) {
              subBuilder.MergeFrom(Int64Type);
            }
            input.ReadMessage(subBuilder);
            Int64Type = subBuilder;
            break;
          }
          case 18: {
            global::CoreML.Specification.DoubleFeatureType subBuilder = new global::CoreML.Specification.DoubleFeatureType();
            if (typeCase_ == TypeOneofCase.DoubleType) {
              subBuilder.MergeFrom(DoubleType);
            }
            input.ReadMessage(subBuilder);
            DoubleType = subBuilder;
            break;
          }
          case 26: {
            global::CoreML.Specification.StringFeatureType subBuilder = new global::CoreML.Specification.StringFeatureType();
            if (typeCase_ == TypeOneofCase.StringType) {
              subBuilder.MergeFrom(StringType);
            }
            input.ReadMessage(subBuilder);
            StringType = subBuilder;
            break;
          }
          case 34: {
            global::CoreML.Specification.ImageFeatureType subBuilder = new global::CoreML.Specification.ImageFeatureType();
            if (typeCase_ == TypeOneofCase.ImageType) {
              subBuilder.MergeFrom(ImageType);
            }
            input.ReadMessage(subBuilder);
            ImageType = subBuilder;
            break;
          }
          case 42: {
            global::CoreML.Specification.ArrayFeatureType subBuilder = new global::CoreML.Specification.ArrayFeatureType();
            if (typeCase_ == TypeOneofCase.MultiArrayType) {
              subBuilder.MergeFrom(MultiArrayType);
            }
            input.ReadMessage(subBuilder);
            MultiArrayType = subBuilder;
            break;
          }
          case 50: {
            global::CoreML.Specification.DictionaryFeatureType subBuilder = new global::CoreML.Specification.DictionaryFeatureType();
            if (typeCase_ == TypeOneofCase.DictionaryType) {
              subBuilder.MergeFrom(DictionaryType);
            }
            input.ReadMessage(subBuilder);
            DictionaryType = subBuilder;
            break;
          }
          case 8000: {
            IsOptional = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Model.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CoreML.Specification {

  /// <summary>Holder for reflection information generated from Model.proto</summary>
  public static partial class ModelReflection {

    #region Descriptor
    /// <summary>File descriptor for Model.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtNb2RlbC5wcm90bxIUQ29yZU1MLlNwZWNpZmljYXRpb24aG0FycmF5RmVh",
            "dHVyZUV4dHJhY3Rvci5wcm90bxoYQ2F0ZWdvcmljYWxNYXBwaW5nLnByb3Rv",
            "GhREaWN0VmVjdG9yaXplci5wcm90bxoSRmVhdHVyZVR5cGVzLnByb3RvGhdG",
            "ZWF0dXJlVmVjdG9yaXplci5wcm90bxoSR0xNUmVncmVzc29yLnByb3RvGhNH",
            "TE1DbGFzc2lmaWVyLnByb3RvGg5JZGVudGl0eS5wcm90bxoNSW1wdXRlci5w",
            "cm90bxoTTmV1cmFsTmV0d29yay5wcm90bxoQTm9ybWFsaXplci5wcm90bxoT",
            "T25lSG90RW5jb2Rlci5wcm90bxoMU2NhbGVyLnByb3RvGglTVk0ucHJvdG8a",
            "ElRyZWVFbnNlbWJsZS5wcm90byI3CghQaXBlbGluZRIrCgZtb2RlbHMYASAD",
            "KAsyGy5Db3JlTUwuU3BlY2lmaWNhdGlvbi5Nb2RlbCJGChJQaXBlbGluZUNs",
            "YXNzaWZpZXISMAoIcGlwZWxpbmUYASABKAsyHi5Db3JlTUwuU3BlY2lmaWNh",
            "dGlvbi5QaXBlbGluZSJFChFQaXBlbGluZVJlZ3Jlc3NvchIwCghwaXBlbGlu",
            "ZRgBIAEoCzIeLkNvcmVNTC5TcGVjaWZpY2F0aW9uLlBpcGVsaW5lIm0KEkZl",
            "YXR1cmVEZXNjcmlwdGlvbhIMCgRuYW1lGAEgASgJEhgKEHNob3J0RGVzY3Jp",
            "cHRpb24YAiABKAkSLwoEdHlwZRgDIAEoCzIhLkNvcmVNTC5TcGVjaWZpY2F0",
            "aW9uLkZlYXR1cmVUeXBlItYBCghNZXRhZGF0YRIYChBzaG9ydERlc2NyaXB0",
            "aW9uGAEgASgJEhUKDXZlcnNpb25TdHJpbmcYAiABKAkSDgoGYXV0aG9yGAMg",
            "ASgJEg8KB2xpY2Vuc2UYBCABKAkSRAoLdXNlckRlZmluZWQYZCADKAsyLy5D",
            "b3JlTUwuU3BlY2lmaWNhdGlvbi5NZXRhZGF0YS5Vc2VyRGVmaW5lZEVudHJ5",
            "GjIKEFVzZXJEZWZpbmVkRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIg",
            "ASgJOgI4ASL5AQoQTW9kZWxEZXNjcmlwdGlvbhI3CgVpbnB1dBgBIAMoCzIo",
            "LkNvcmVNTC5TcGVjaWZpY2F0aW9uLkZlYXR1cmVEZXNjcmlwdGlvbhI4CgZv",
            "dXRwdXQYCiADKAsyKC5Db3JlTUwuU3BlY2lmaWNhdGlvbi5GZWF0dXJlRGVz",
            "Y3JpcHRpb24SHAoUcHJlZGljdGVkRmVhdHVyZU5hbWUYCyABKAkSIgoacHJl",
            "ZGljdGVkUHJvYmFiaWxpdGllc05hbWUYDCABKAkSMAoIbWV0YWRhdGEYZCAB",
            "KAsyHi5Db3JlTUwuU3BlY2lmaWNhdGlvbi5NZXRhZGF0YSKDDAoFTW9kZWwS",
            "HAoUc3BlY2lmaWNhdGlvblZlcnNpb24YASABKAUSOwoLZGVzY3JpcHRpb24Y",
            "AiABKAsyJi5Db3JlTUwuU3BlY2lmaWNhdGlvbi5Nb2RlbERlc2NyaXB0aW9u",
            "EkcKEnBpcGVsaW5lQ2xhc3NpZmllchjIASABKAsyKC5Db3JlTUwuU3BlY2lm",
            "aWNhdGlvbi5QaXBlbGluZUNsYXNzaWZpZXJIABJFChFwaXBlbGluZVJlZ3Jl",
            "c3NvchjJASABKAsyJy5Db3JlTUwuU3BlY2lmaWNhdGlvbi5QaXBlbGluZVJl",
            "Z3Jlc3NvckgAEjMKCHBpcGVsaW5lGMoBIAEoCzIeLkNvcmVNTC5TcGVjaWZp",
            "Y2F0aW9uLlBpcGVsaW5lSAASOwoMZ2xtUmVncmVzc29yGKwCIAEoCzIiLkNv",
            "cmVNTC5TcGVjaWZpY2F0aW9uLkdMTVJlZ3Jlc3NvckgAEk8KFnN1cHBvcnRW",
            "ZWN0b3JSZWdyZXNzb3IYrQIgASgLMiwuQ29yZU1MLlNwZWNpZmljYXRpb24u",
            "U3VwcG9ydFZlY3RvclJlZ3Jlc3NvckgAEk0KFXRyZWVFbnNlbWJsZVJlZ3Jl",
            "c3NvchiuAiABKAsyKy5Db3JlTUwuU3BlY2lmaWNhdGlvbi5UcmVlRW5zZW1i",
            "bGVSZWdyZXNzb3JIABJPChZuZXVyYWxOZXR3b3JrUmVncmVzc29yGK8CIAEo",
            "CzIsLkNvcmVNTC5TcGVjaWZpY2F0aW9uLk5ldXJhbE5ldHdvcmtSZWdyZXNz",
            "b3JIABI9Cg1nbG1DbGFzc2lmaWVyGJADIAEoCzIjLkNvcmVNTC5TcGVjaWZp",
            "Y2F0aW9uLkdMTUNsYXNzaWZpZXJIABJRChdzdXBwb3J0VmVjdG9yQ2xhc3Np",
            "ZmllchiRAyABKAsyLS5Db3JlTUwuU3BlY2lmaWNhdGlvbi5TdXBwb3J0VmVj",
            "dG9yQ2xhc3NpZmllckgAEk8KFnRyZWVFbnNlbWJsZUNsYXNzaWZpZXIYkgMg",
            "ASgLMiwuQ29yZU1MLlNwZWNpZmljYXRpb24uVHJlZUVuc2VtYmxlQ2xhc3Np",
            "ZmllckgAElEKF25ldXJhbE5ldHdvcmtDbGFzc2lmaWVyGJMDIAEoCzItLkNv",
            "cmVNTC5TcGVjaWZpY2F0aW9uLk5ldXJhbE5ldHdvcmtDbGFzc2lmaWVySAAS",
            "PQoNbmV1cmFsTmV0d29yaxj0AyABKAsyIy5Db3JlTUwuU3BlY2lmaWNhdGlv",
            "bi5OZXVyYWxOZXR3b3JrSAASPQoNb25lSG90RW5jb2RlchjYBCABKAsyIy5D",
            "b3JlTUwuU3BlY2lmaWNhdGlvbi5PbmVIb3RFbmNvZGVySAASMQoHaW1wdXRl",
            "chjZBCABKAsyHS5Db3JlTUwuU3BlY2lmaWNhdGlvbi5JbXB1dGVySAASRQoR",
            "ZmVhdHVyZVZlY3Rvcml6ZXIY2gQgASgLMicuQ29yZU1MLlNwZWNpZmljYXRp",
            "b24uRmVhdHVyZVZlY3Rvcml6ZXJIABI/Cg5kaWN0VmVjdG9yaXplchjbBCAB",
            "KAsyJC5Db3JlTUwuU3BlY2lmaWNhdGlvbi5EaWN0VmVjdG9yaXplckgAEi8K",
            "BnNjYWxlchjcBCABKAsyHC5Db3JlTUwuU3BlY2lmaWNhdGlvbi5TY2FsZXJI",
            "ABJHChJjYXRlZ29yaWNhbE1hcHBpbmcY3gQgASgLMiguQ29yZU1MLlNwZWNp",
            "ZmljYXRpb24uQ2F0ZWdvcmljYWxNYXBwaW5nSAASNwoKbm9ybWFsaXplchjf",
            "BCABKAsyIC5Db3JlTUwuU3BlY2lmaWNhdGlvbi5Ob3JtYWxpemVySAASTQoV",
            "YXJyYXlGZWF0dXJlRXh0cmFjdG9yGOEEIAEoCzIrLkNvcmVNTC5TcGVjaWZp",
            "Y2F0aW9uLkFycmF5RmVhdHVyZUV4dHJhY3RvckgAEjMKCGlkZW50aXR5GIQH",
            "IAEoCzIeLkNvcmVNTC5TcGVjaWZpY2F0aW9uLklkZW50aXR5SABCBgoEVHlw",
            "ZUICSANQAFABUAJQA1AEUAVQBlAHUAhQCVAKUAtQDFANUA5iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::CoreML.Specification.ArrayFeatureExtractorReflection.Descriptor, global::CoreML.Specification.CategoricalMappingReflection.Descriptor, global::CoreML.Specification.DictVectorizerReflection.Descriptor, global::CoreML.Specification.FeatureTypesReflection.Descriptor, global::CoreML.Specification.FeatureVectorizerReflection.Descriptor, global::CoreML.Specification.GLMRegressorReflection.Descriptor, global::CoreML.Specification.GLMClassifierReflection.Descriptor, global::CoreML.Specification.IdentityReflection.Descriptor, global::CoreML.Specification.ImputerReflection.Descriptor, global::CoreML.Specification.NeuralNetworkReflection.Descriptor, global::CoreML.Specification.NormalizerReflection.Descriptor, global::CoreML.Specification.OneHotEncoderReflection.Descriptor, global::CoreML.Specification.ScalerReflection.Descriptor, global::CoreML.Specification.SVMReflection.Descriptor, global::CoreML.Specification.TreeEnsembleReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.Pipeline), global::CoreML.Specification.Pipeline.Parser, new[]{ "Models" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.PipelineClassifier), global::CoreML.Specification.PipelineClassifier.Parser, new[]{ "Pipeline" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.PipelineRegressor), global::CoreML.Specification.PipelineRegressor.Parser, new[]{ "Pipeline" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.FeatureDescription), global::CoreML.Specification.FeatureDescription.Parser, new[]{ "Name", "ShortDescription", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.Metadata), global::CoreML.Specification.Metadata.Parser, new[]{ "ShortDescription", "VersionString", "Author", "License", "UserDefined" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ModelDescription), global::CoreML.Specification.ModelDescription.Parser, new[]{ "Input", "Output", "PredictedFeatureName", "PredictedProbabilitiesName", "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.Model), global::CoreML.Specification.Model.Parser, new[]{ "SpecificationVersion", "Description", "PipelineClassifier", "PipelineRegressor", "Pipeline", "GlmRegressor", "SupportVectorRegressor", "TreeEnsembleRegressor", "NeuralNetworkRegressor", "GlmClassifier", "SupportVectorClassifier", "TreeEnsembleClassifier", "NeuralNetworkClassifier", "NeuralNetwork", "OneHotEncoder", "Imputer", "FeatureVectorizer", "DictVectorizer", "Scaler", "CategoricalMapping", "Normalizer", "ArrayFeatureExtractor", "Identity" }, new[]{ "Type" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// A pipeline consisting of one or more models.
  /// </summary>
  public sealed partial class Pipeline : pb::IMessage<Pipeline> {
    private static readonly pb::MessageParser<Pipeline> _parser = new pb::MessageParser<Pipeline>(() => new Pipeline());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pipeline> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.ModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pipeline() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pipeline(Pipeline other) : this() {
      models_ = other.models_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pipeline Clone() {
      return new Pipeline(this);
    }

    /// <summary>Field number for the "models" field.</summary>
    public const int ModelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CoreML.Specification.Model> _repeated_models_codec
        = pb::FieldCodec.ForMessage(10, global::CoreML.Specification.Model.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.Model> models_ = new pbc::RepeatedField<global::CoreML.Specification.Model>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.Model> Models {
      get { return models_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pipeline);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pipeline other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!models_.Equals(other.models_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= models_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      models_.WriteTo(output, _repeated_models_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += models_.CalculateSize(_repeated_models_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pipeline other) {
      if (other == null) {
        return;
      }
      models_.Add(other.models_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            models_.AddEntriesFrom(input, _repeated_models_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A classifier pipeline.
  /// </summary>
  public sealed partial class PipelineClassifier : pb::IMessage<PipelineClassifier> {
    private static readonly pb::MessageParser<PipelineClassifier> _parser = new pb::MessageParser<PipelineClassifier>(() => new PipelineClassifier());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PipelineClassifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.ModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PipelineClassifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PipelineClassifier(PipelineClassifier other) : this() {
      Pipeline = other.pipeline_ != null ? other.Pipeline.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PipelineClassifier Clone() {
      return new PipelineClassifier(this);
    }

    /// <summary>Field number for the "pipeline" field.</summary>
    public const int PipelineFieldNumber = 1;
    private global::CoreML.Specification.Pipeline pipeline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Pipeline Pipeline {
      get { return pipeline_; }
      set {
        pipeline_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PipelineClassifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PipelineClassifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pipeline, other.Pipeline)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pipeline_ != null) hash ^= Pipeline.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pipeline_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pipeline);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pipeline_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pipeline);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PipelineClassifier other) {
      if (other == null) {
        return;
      }
      if (other.pipeline_ != null) {
        if (pipeline_ == null) {
          pipeline_ = new global::CoreML.Specification.Pipeline();
        }
        Pipeline.MergeFrom(other.Pipeline);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pipeline_ == null) {
              pipeline_ = new global::CoreML.Specification.Pipeline();
            }
            input.ReadMessage(pipeline_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A regressor pipeline.
  /// </summary>
  public sealed partial class PipelineRegressor : pb::IMessage<PipelineRegressor> {
    private static readonly pb::MessageParser<PipelineRegressor> _parser = new pb::MessageParser<PipelineRegressor>(() => new PipelineRegressor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PipelineRegressor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.ModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PipelineRegressor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PipelineRegressor(PipelineRegressor other) : this() {
      Pipeline = other.pipeline_ != null ? other.Pipeline.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PipelineRegressor Clone() {
      return new PipelineRegressor(this);
    }

    /// <summary>Field number for the "pipeline" field.</summary>
    public const int PipelineFieldNumber = 1;
    private global::CoreML.Specification.Pipeline pipeline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Pipeline Pipeline {
      get { return pipeline_; }
      set {
        pipeline_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PipelineRegressor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PipelineRegressor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pipeline, other.Pipeline)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pipeline_ != null) hash ^= Pipeline.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pipeline_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pipeline);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pipeline_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pipeline);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PipelineRegressor other) {
      if (other == null) {
        return;
      }
      if (other.pipeline_ != null) {
        if (pipeline_ == null) {
          pipeline_ = new global::CoreML.Specification.Pipeline();
        }
        Pipeline.MergeFrom(other.Pipeline);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pipeline_ == null) {
              pipeline_ = new global::CoreML.Specification.Pipeline();
            }
            input.ReadMessage(pipeline_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A feature description,
  /// consisting of a name, short description, and type.
  /// </summary>
  public sealed partial class FeatureDescription : pb::IMessage<FeatureDescription> {
    private static readonly pb::MessageParser<FeatureDescription> _parser = new pb::MessageParser<FeatureDescription>(() => new FeatureDescription());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeatureDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.ModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureDescription(FeatureDescription other) : this() {
      name_ = other.name_;
      shortDescription_ = other.shortDescription_;
      Type = other.type_ != null ? other.Type.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureDescription Clone() {
      return new FeatureDescription(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shortDescription" field.</summary>
    public const int ShortDescriptionFieldNumber = 2;
    private string shortDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShortDescription {
      get { return shortDescription_; }
      set {
        shortDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::CoreML.Specification.FeatureType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.FeatureType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeatureDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeatureDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ShortDescription != other.ShortDescription) return false;
      if (!object.Equals(Type, other.Type)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ShortDescription.Length != 0) hash ^= ShortDescription.GetHashCode();
      if (type_ != null) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ShortDescription.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShortDescription);
      }
      if (type_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ShortDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortDescription);
      }
      if (type_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeatureDescription other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ShortDescription.Length != 0) {
        ShortDescription = other.ShortDescription;
      }
      if (other.type_ != null) {
        if (type_ == null) {
          type_ = new global::CoreML.Specification.FeatureType();
        }
        Type.MergeFrom(other.Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ShortDescription = input.ReadString();
            break;
          }
          case 26: {
            if (type_ == null) {
              type_ = new global::CoreML.Specification.FeatureType();
            }
            input.ReadMessage(type_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Model metadata,
  /// consisting of a short description, a version string,
  /// an author, a license, and any other user defined
  /// key/value meta data.
  /// </summary>
  public sealed partial class Metadata : pb::IMessage<Metadata> {
    private static readonly pb::MessageParser<Metadata> _parser = new pb::MessageParser<Metadata>(() => new Metadata());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Metadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.ModelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata(Metadata other) : this() {
      shortDescription_ = other.shortDescription_;
      versionString_ = other.versionString_;
      author_ = other.author_;
      license_ = other.license_;
      userDefined_ = other.userDefined_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata Clone() {
      return new Metadata(this);
    }

    /// <summary>Field number for the "shortDescription" field.</summary>
    public const int ShortDescriptionFieldNumber = 1;
    private string shortDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShortDescription {
      get { return shortDescription_; }
      set {
        shortDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "versionString" field.</summary>
    public const int VersionStringFieldNumber = 2;
    private string versionString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionString {
      get { return versionString_; }
      set {
        versionString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 3;
    private string author_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Author {
      get { return author_; }
      set {
        author_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "license" field.</summary>
    public const int LicenseFieldNumber = 4;
    private string license_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string License {
      get { return license_; }
      set {
        license_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userDefined" field.</summary>
    public const int UserDefinedFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_userDefined_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> userDefined_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> UserDefined {
      get { return userDefined_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Metadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Metadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShortDescription != other.ShortDescription) return false;
      if (VersionString != other.VersionString) return false;
      if (Author != other.Author) return false;
      if (License != other.License) return false;
      if (!UserDefined.Equals(other.UserDefined)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShortDescription.Length != 0) hash ^= ShortDescription.GetHashCode();
      if (VersionString.Length != 0) hash ^= VersionString.GetHashCode();
      if (Author.Length != 0) hash ^= Author.GetHashCode();
      if (License.Length != 0) hash ^= License.GetHashCode();
      hash ^= UserDefined.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShortDescription.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ShortDescription);
      }
      if (VersionString.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VersionString);
      }
      if (Author.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Author);
      }
      if (License.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(License);
      }
      userDefined_.WriteTo(output, _map_userDefined_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShortDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortDescription);
      }
      if (VersionString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionString);
      }
      if (Author.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Author);
      }
      if (License.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(License);
      }
      size += userDefined_.CalculateSize(_map_userDefined_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Metadata other) {
      if (other == null) {
        return;
      }
      if (other.ShortDescription.Length != 0) {
        ShortDescription = other.ShortDescription;
      }
      if (other.VersionString.Length != 0) {
        VersionString = other.VersionString;
      }
      if (other.Author.Length != 0) {
        Author = other.Author;
      }
      if (other.License.Length != 0) {
        License = other.License;
      }
      userDefined_.Add(other.userDefined_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ShortDescription = input.ReadString();
            break;
          }
          case 18: {
            VersionString = input.ReadString();
            break;
          }
          case 26: {
            Author = input.ReadString();
            break;
          }
          case 34: {
            License = input.ReadString();
            break;
          }
          case 802: {
            userDefined_.AddEntriesFrom(input, _map_userDefined_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A description of a model,
  /// consisting of descriptions of its input and output features.
  /// Both regressor and classifier models require the name of the
  /// primary predicted output feature (``predictedFeatureName``).
  /// Classifier models can specify the output feature containing
  /// probabilities for the predicted classes
  /// (``predictedProbabilitiesName``).
  /// </summary>
  public sealed partial class ModelDescription : pb::IMessage<ModelDescription> {
    private static readonly pb::MessageParser<ModelDescription> _parser = new pb::MessageParser<ModelDescription>(() => new ModelDescription());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.ModelReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelDescription(ModelDescription other) : this() {
      input_ = other.input_.Clone();
      output_ = other.output_.Clone();
      predictedFeatureName_ = other.predictedFeatureName_;
      predictedProbabilitiesName_ = other.predictedProbabilitiesName_;
      Metadata = other.metadata_ != null ? other.Metadata.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelDescription Clone() {
      return new ModelDescription(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CoreML.Specification.FeatureDescription> _repeated_input_codec
        = pb::FieldCodec.ForMessage(10, global::CoreML.Specification.FeatureDescription.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.FeatureDescription> input_ = new pbc::RepeatedField<global::CoreML.Specification.FeatureDescription>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.FeatureDescription> Input {
      get { return input_; }
    }

    /// <summary>Field number for the "output" field.</summary>
    public const int OutputFieldNumber = 10;
    private static readonly pb::FieldCodec<global::CoreML.Specification.FeatureDescription> _repeated_output_codec
        = pb::FieldCodec.ForMessage(82, global::CoreML.Specification.FeatureDescription.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.FeatureDescription> output_ = new pbc::RepeatedField<global::CoreML.Specification.FeatureDescription>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.FeatureDescription> Output {
      get { return output_; }
    }

    /// <summary>Field number for the "predictedFeatureName" field.</summary>
    public const int PredictedFeatureNameFieldNumber = 11;
    private string predictedFeatureName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PredictedFeatureName {
      get { return predictedFeatureName_; }
      set {
        predictedFeatureName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "predictedProbabilitiesName" field.</summary>
    public const int PredictedProbabilitiesNameFieldNumber = 12;
    private string predictedProbabilitiesName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PredictedProbabilitiesName {
      get { return predictedProbabilitiesName_; }
      set {
        predictedProbabilitiesName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 100;
    private global::CoreML.Specification.Metadata metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Metadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!input_.Equals(other.input_)) return false;
      if(!output_.Equals(other.output_)) return false;
      if (PredictedFeatureName != other.PredictedFeatureName) return false;
      if (PredictedProbabilitiesName != other.PredictedProbabilitiesName) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= input_.GetHashCode();
      hash ^= output_.GetHashCode();
      if (PredictedFeatureName.Length != 0) hash ^= PredictedFeatureName.GetHashCode();
      if (PredictedProbabilitiesName.Length != 0) hash ^= PredictedProbabilitiesName.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      input_.WriteTo(output, _repeated_input_codec);
      output_.WriteTo(output, _repeated_output_codec);
      if (PredictedFeatureName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(PredictedFeatureName);
      }
      if (PredictedProbabilitiesName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(PredictedProbabilitiesName);
      }
      if (metadata_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Metadata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += input_.CalculateSize(_repeated_input_codec);
      size += output_.CalculateSize(_repeated_output_codec);
      if (PredictedFeatureName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PredictedFeatureName);
      }
      if (PredictedProbabilitiesName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PredictedProbabilitiesName);
      }
      if (metadata_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelDescription other) {
      if (other == null) {
        return;
      }
      input_.Add(other.input_);
      output_.Add(other.output_);
      if (other.PredictedFeatureName.Length != 0) {
        PredictedFeatureName = other.PredictedFeatureName;
      }
      if (other.PredictedProbabilitiesName.Length != 0) {
        PredictedProbabilitiesName = other.PredictedProbabilitiesName;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::CoreML.Specification.Metadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            input_.AddEntriesFrom(input, _repeated_input_codec);
            break;
          }
          case 82: {
            output_.AddEntriesFrom(input, _repeated_output_codec);
            break;
          }
          case 90: {
            PredictedFeatureName = input.ReadString();
            break;
          }
          case 98: {
            PredictedProbabilitiesName = input.ReadString();
            break;
          }
          case 802: {
            if (metadata_ == null) {
              metadata_ = new global::CoreML.Specification.Metadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A Core ML model,
  /// consisting of a specification version,
  /// a model description, and a model type.
  ///
  /// Core ML model compatibility is indicated by
  /// a monotonically increasing specification version number,
  /// which is incremented anytime a backward-incompatible change is made
  /// (this is functionally equivalent to the MAJOR version number
  /// described by `Semantic Versioning 2.0.0 &lt;http://semver.org/>`_).
  /// The Core ML framework in macOS currently supports specification version `1`.
  /// </summary>
  public sealed partial class Model : pb::IMessage<Model> {
    private static readonly pb::MessageParser<Model> _parser = new pb::MessageParser<Model>(() => new Model());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Model> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.ModelReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Model() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Model(Model other) : this() {
      specificationVersion_ = other.specificationVersion_;
      Description = other.description_ != null ? other.Description.Clone() : null;
      switch (other.TypeCase) {
        case TypeOneofCase.PipelineClassifier:
          PipelineClassifier = other.PipelineClassifier.Clone();
          break;
        case TypeOneofCase.PipelineRegressor:
          PipelineRegressor = other.PipelineRegressor.Clone();
          break;
        case TypeOneofCase.Pipeline:
          Pipeline = other.Pipeline.Clone();
          break;
        case TypeOneofCase.GlmRegressor:
          GlmRegressor = other.GlmRegressor.Clone();
          break;
        case TypeOneofCase.SupportVectorRegressor:
          SupportVectorRegressor = other.SupportVectorRegressor.Clone();
          break;
        case TypeOneofCase.TreeEnsembleRegressor:
          TreeEnsembleRegressor = other.TreeEnsembleRegressor.Clone();
          break;
        case TypeOneofCase.NeuralNetworkRegressor:
          NeuralNetworkRegressor = other.NeuralNetworkRegressor.Clone();
          break;
        case TypeOneofCase.GlmClassifier:
          GlmClassifier = other.GlmClassifier.Clone();
          break;
        case TypeOneofCase.SupportVectorClassifier:
          SupportVectorClassifier = other.SupportVectorClassifier.Clone();
          break;
        case TypeOneofCase.TreeEnsembleClassifier:
          TreeEnsembleClassifier = other.TreeEnsembleClassifier.Clone();
          break;
        case TypeOneofCase.NeuralNetworkClassifier:
          NeuralNetworkClassifier = other.NeuralNetworkClassifier.Clone();
          break;
        case TypeOneofCase.NeuralNetwork:
          NeuralNetwork = other.NeuralNetwork.Clone();
          break;
        case TypeOneofCase.OneHotEncoder:
          OneHotEncoder = other.OneHotEncoder.Clone();
          break;
        case TypeOneofCase.Imputer:
          Imputer = other.Imputer.Clone();
          break;
        case TypeOneofCase.FeatureVectorizer:
          FeatureVectorizer = other.FeatureVectorizer.Clone();
          break;
        case TypeOneofCase.DictVectorizer:
          DictVectorizer = other.DictVectorizer.Clone();
          break;
        case TypeOneofCase.Scaler:
          Scaler = other.Scaler.Clone();
          break;
        case TypeOneofCase.CategoricalMapping:
          CategoricalMapping = other.CategoricalMapping.Clone();
          break;
        case TypeOneofCase.Normalizer:
          Normalizer = other.Normalizer.Clone();
          break;
        case TypeOneofCase.ArrayFeatureExtractor:
          ArrayFeatureExtractor = other.ArrayFeatureExtractor.Clone();
          break;
        case TypeOneofCase.Identity:
          Identity = other.Identity.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Model Clone() {
      return new Model(this);
    }

    /// <summary>Field number for the "specificationVersion" field.</summary>
    public const int SpecificationVersionFieldNumber = 1;
    private int specificationVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecificationVersion {
      get { return specificationVersion_; }
      set {
        specificationVersion_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private global::CoreML.Specification.ModelDescription description_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ModelDescription Description {
      get { return description_; }
      set {
        description_ = value;
      }
    }

    /// <summary>Field number for the "pipelineClassifier" field.</summary>
    public const int PipelineClassifierFieldNumber = 200;
    /// <summary>
    /// pipeline starts at 200
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.PipelineClassifier PipelineClassifier {
      get { return typeCase_ == TypeOneofCase.PipelineClassifier ? (global::CoreML.Specification.PipelineClassifier) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.PipelineClassifier;
      }
    }

    /// <summary>Field number for the "pipelineRegressor" field.</summary>
    public const int PipelineRegressorFieldNumber = 201;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.PipelineRegressor PipelineRegressor {
      get { return typeCase_ == TypeOneofCase.PipelineRegressor ? (global::CoreML.Specification.PipelineRegressor) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.PipelineRegressor;
      }
    }

    /// <summary>Field number for the "pipeline" field.</summary>
    public const int PipelineFieldNumber = 202;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Pipeline Pipeline {
      get { return typeCase_ == TypeOneofCase.Pipeline ? (global::CoreML.Specification.Pipeline) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Pipeline;
      }
    }

    /// <summary>Field number for the "glmRegressor" field.</summary>
    public const int GlmRegressorFieldNumber = 300;
    /// <summary>
    /// regressors start at 300
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.GLMRegressor GlmRegressor {
      get { return typeCase_ == TypeOneofCase.GlmRegressor ? (global::CoreML.Specification.GLMRegressor) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.GlmRegressor;
      }
    }

    /// <summary>Field number for the "supportVectorRegressor" field.</summary>
    public const int SupportVectorRegressorFieldNumber = 301;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.SupportVectorRegressor SupportVectorRegressor {
      get { return typeCase_ == TypeOneofCase.SupportVectorRegressor ? (global::CoreML.Specification.SupportVectorRegressor) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.SupportVectorRegressor;
      }
    }

    /// <summary>Field number for the "treeEnsembleRegressor" field.</summary>
    public const int TreeEnsembleRegressorFieldNumber = 302;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.TreeEnsembleRegressor TreeEnsembleRegressor {
      get { return typeCase_ == TypeOneofCase.TreeEnsembleRegressor ? (global::CoreML.Specification.TreeEnsembleRegressor) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.TreeEnsembleRegressor;
      }
    }

    /// <summary>Field number for the "neuralNetworkRegressor" field.</summary>
    public const int NeuralNetworkRegressorFieldNumber = 303;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.NeuralNetworkRegressor NeuralNetworkRegressor {
      get { return typeCase_ == TypeOneofCase.NeuralNetworkRegressor ? (global::CoreML.Specification.NeuralNetworkRegressor) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.NeuralNetworkRegressor;
      }
    }

    /// <summary>Field number for the "glmClassifier" field.</summary>
    public const int GlmClassifierFieldNumber = 400;
    /// <summary>
    /// classifiers start at 400
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.GLMClassifier GlmClassifier {
      get { return typeCase_ == TypeOneofCase.GlmClassifier ? (global::CoreML.Specification.GLMClassifier) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.GlmClassifier;
      }
    }

    /// <summary>Field number for the "supportVectorClassifier" field.</summary>
    public const int SupportVectorClassifierFieldNumber = 401;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.SupportVectorClassifier SupportVectorClassifier {
      get { return typeCase_ == TypeOneofCase.SupportVectorClassifier ? (global::CoreML.Specification.SupportVectorClassifier) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.SupportVectorClassifier;
      }
    }

    /// <summary>Field number for the "treeEnsembleClassifier" field.</summary>
    public const int TreeEnsembleClassifierFieldNumber = 402;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.TreeEnsembleClassifier TreeEnsembleClassifier {
      get { return typeCase_ == TypeOneofCase.TreeEnsembleClassifier ? (global::CoreML.Specification.TreeEnsembleClassifier) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.TreeEnsembleClassifier;
      }
    }

    /// <summary>Field number for the "neuralNetworkClassifier" field.</summary>
    public const int NeuralNetworkClassifierFieldNumber = 403;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.NeuralNetworkClassifier NeuralNetworkClassifier {
      get { return typeCase_ == TypeOneofCase.NeuralNetworkClassifier ? (global::CoreML.Specification.NeuralNetworkClassifier) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.NeuralNetworkClassifier;
      }
    }

    /// <summary>Field number for the "neuralNetwork" field.</summary>
    public const int NeuralNetworkFieldNumber = 500;
    /// <summary>
    /// generic models start at 500
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.NeuralNetwork NeuralNetwork {
      get { return typeCase_ == TypeOneofCase.NeuralNetwork ? (global::CoreML.Specification.NeuralNetwork) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.NeuralNetwork;
      }
    }

    /// <summary>Field number for the "oneHotEncoder" field.</summary>
    public const int OneHotEncoderFieldNumber = 600;
    /// <summary>
    /// feature engineering starts at 600
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.OneHotEncoder OneHotEncoder {
      get { return typeCase_ == TypeOneofCase.OneHotEncoder ? (global::CoreML.Specification.OneHotEncoder) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.OneHotEncoder;
      }
    }

    /// <summary>Field number for the "imputer" field.</summary>
    public const int ImputerFieldNumber = 601;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Imputer Imputer {
      get { return typeCase_ == TypeOneofCase.Imputer ? (global::CoreML.Specification.Imputer) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Imputer;
      }
    }

    /// <summary>Field number for the "featureVectorizer" field.</summary>
    public const int FeatureVectorizerFieldNumber = 602;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.FeatureVectorizer FeatureVectorizer {
      get { return typeCase_ == TypeOneofCase.FeatureVectorizer ? (global::CoreML.Specification.FeatureVectorizer) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.FeatureVectorizer;
      }
    }

    /// <summary>Field number for the "dictVectorizer" field.</summary>
    public const int DictVectorizerFieldNumber = 603;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.DictVectorizer DictVectorizer {
      get { return typeCase_ == TypeOneofCase.DictVectorizer ? (global::CoreML.Specification.DictVectorizer) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.DictVectorizer;
      }
    }

    /// <summary>Field number for the "scaler" field.</summary>
    public const int ScalerFieldNumber = 604;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Scaler Scaler {
      get { return typeCase_ == TypeOneofCase.Scaler ? (global::CoreML.Specification.Scaler) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Scaler;
      }
    }

    /// <summary>Field number for the "categoricalMapping" field.</summary>
    public const int CategoricalMappingFieldNumber = 606;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.CategoricalMapping CategoricalMapping {
      get { return typeCase_ == TypeOneofCase.CategoricalMapping ? (global::CoreML.Specification.CategoricalMapping) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CategoricalMapping;
      }
    }

    /// <summary>Field number for the "normalizer" field.</summary>
    public const int NormalizerFieldNumber = 607;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Normalizer Normalizer {
      get { return typeCase_ == TypeOneofCase.Normalizer ? (global::CoreML.Specification.Normalizer) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Normalizer;
      }
    }

    /// <summary>Field number for the "arrayFeatureExtractor" field.</summary>
    public const int ArrayFeatureExtractorFieldNumber = 609;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ArrayFeatureExtractor ArrayFeatureExtractor {
      get { return typeCase_ == TypeOneofCase.ArrayFeatureExtractor ? (global::CoreML.Specification.ArrayFeatureExtractor) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.ArrayFeatureExtractor;
      }
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 900;
    /// <summary>
    /// simple mathematical functions used for testing start at 900
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Identity Identity {
      get { return typeCase_ == TypeOneofCase.Identity ? (global::CoreML.Specification.Identity) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Identity;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "Type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      PipelineClassifier = 200,
      PipelineRegressor = 201,
      Pipeline = 202,
      GlmRegressor = 300,
      SupportVectorRegressor = 301,
      TreeEnsembleRegressor = 302,
      NeuralNetworkRegressor = 303,
      GlmClassifier = 400,
      SupportVectorClassifier = 401,
      TreeEnsembleClassifier = 402,
      NeuralNetworkClassifier = 403,
      NeuralNetwork = 500,
      OneHotEncoder = 600,
      Imputer = 601,
      FeatureVectorizer = 602,
      DictVectorizer = 603,
      Scaler = 604,
      CategoricalMapping = 606,
      Normalizer = 607,
      ArrayFeatureExtractor = 609,
      Identity = 900,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Model);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Model other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpecificationVersion != other.SpecificationVersion) return false;
      if (!object.Equals(Description, other.Description)) return false;
      if (!object.Equals(PipelineClassifier, other.PipelineClassifier)) return false;
      if (!object.Equals(PipelineRegressor, other.PipelineRegressor)) return false;
      if (!object.Equals(Pipeline, other.Pipeline)) return false;
      if (!object.Equals(GlmRegressor, other.GlmRegressor)) return false;
      if (!object.Equals(SupportVectorRegressor, other.SupportVectorRegressor)) return false;
      if (!object.Equals(TreeEnsembleRegressor, other.TreeEnsembleRegressor)) return false;
      if (!object.Equals(NeuralNetworkRegressor, other.NeuralNetworkRegressor)) return false;
      if (!object.Equals(GlmClassifier, other.GlmClassifier)) return false;
      if (!object.Equals(SupportVectorClassifier, other.SupportVectorClassifier)) return false;
      if (!object.Equals(TreeEnsembleClassifier, other.TreeEnsembleClassifier)) return false;
      if (!object.Equals(NeuralNetworkClassifier, other.NeuralNetworkClassifier)) return false;
      if (!object.Equals(NeuralNetwork, other.NeuralNetwork)) return false;
      if (!object.Equals(OneHotEncoder, other.OneHotEncoder)) return false;
      if (!object.Equals(Imputer, other.Imputer)) return false;
      if (!object.Equals(FeatureVectorizer, other.FeatureVectorizer)) return false;
      if (!object.Equals(DictVectorizer, other.DictVectorizer)) return false;
      if (!object.Equals(Scaler, other.Scaler)) return false;
      if (!object.Equals(CategoricalMapping, other.CategoricalMapping)) return false;
      if (!object.Equals(Normalizer, other.Normalizer)) return false;
      if (!object.Equals(ArrayFeatureExtractor, other.ArrayFeatureExtractor)) return false;
      if (!object.Equals(Identity, other.Identity)) return false;
      if (TypeCase != other.TypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpecificationVersion != 0) hash ^= SpecificationVersion.GetHashCode();
      if (description_ != null) hash ^= Description.GetHashCode();
      if (typeCase_ == TypeOneofCase.PipelineClassifier) hash ^= PipelineClassifier.GetHashCode();
      if (typeCase_ == TypeOneofCase.PipelineRegressor) hash ^= PipelineRegressor.GetHashCode();
      if (typeCase_ == TypeOneofCase.Pipeline) hash ^= Pipeline.GetHashCode();
      if (typeCase_ == TypeOneofCase.GlmRegressor) hash ^= GlmRegressor.GetHashCode();
      if (typeCase_ == TypeOneofCase.SupportVectorRegressor) hash ^= SupportVectorRegressor.GetHashCode();
      if (typeCase_ == TypeOneofCase.TreeEnsembleRegressor) hash ^= TreeEnsembleRegressor.GetHashCode();
      if (typeCase_ == TypeOneofCase.NeuralNetworkRegressor) hash ^= NeuralNetworkRegressor.GetHashCode();
      if (typeCase_ == TypeOneofCase.GlmClassifier) hash ^= GlmClassifier.GetHashCode();
      if (typeCase_ == TypeOneofCase.SupportVectorClassifier) hash ^= SupportVectorClassifier.GetHashCode();
      if (typeCase_ == TypeOneofCase.TreeEnsembleClassifier) hash ^= TreeEnsembleClassifier.GetHashCode();
      if (typeCase_ == TypeOneofCase.NeuralNetworkClassifier) hash ^= NeuralNetworkClassifier.GetHashCode();
      if (typeCase_ == TypeOneofCase.NeuralNetwork) hash ^= NeuralNetwork.GetHashCode();
      if (typeCase_ == TypeOneofCase.OneHotEncoder) hash ^= OneHotEncoder.GetHashCode();
      if (typeCase_ == TypeOneofCase.Imputer) hash ^= Imputer.GetHashCode();
      if (typeCase_ == TypeOneofCase.FeatureVectorizer) hash ^= FeatureVectorizer.GetHashCode();
      if (typeCase_ == TypeOneofCase.DictVectorizer) hash ^= DictVectorizer.GetHashCode();
      if (typeCase_ == TypeOneofCase.Scaler) hash ^= Scaler.GetHashCode();
      if (typeCase_ == TypeOneofCase.CategoricalMapping) hash ^= CategoricalMapping.GetHashCode();
      if (typeCase_ == TypeOneofCase.Normalizer) hash ^= Normalizer.GetHashCode();
      if (typeCase_ == TypeOneofCase.ArrayFeatureExtractor) hash ^= ArrayFeatureExtractor.GetHashCode();
      if (typeCase_ == TypeOneofCase.Identity) hash ^= Identity.GetHashCode();
      hash ^= (int) typeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpecificationVersion != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpecificationVersion);
      }
      if (description_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Description);
      }
      if (typeCase_ == TypeOneofCase.PipelineClassifier) {
        output.WriteRawTag(194, 12);
        output.WriteMessage(PipelineClassifier);
      }
      if (typeCase_ == TypeOneofCase.PipelineRegressor) {
        output.WriteRawTag(202, 12);
        output.WriteMessage(PipelineRegressor);
      }
      if (typeCase_ == TypeOneofCase.Pipeline) {
        output.WriteRawTag(210, 12);
        output.WriteMessage(Pipeline);
      }
      if (typeCase_ == TypeOneofCase.GlmRegressor) {
        output.WriteRawTag(226, 18);
        output.WriteMessage(GlmRegressor);
      }
      if (typeCase_ == TypeOneofCase.SupportVectorRegressor) {
        output.WriteRawTag(234, 18);
        output.WriteMessage(SupportVectorRegressor);
      }
      if (typeCase_ == TypeOneofCase.TreeEnsembleRegressor) {
        output.WriteRawTag(242, 18);
        output.WriteMessage(TreeEnsembleRegressor);
      }
      if (typeCase_ == TypeOneofCase.NeuralNetworkRegressor) {
        output.WriteRawTag(250, 18);
        output.WriteMessage(NeuralNetworkRegressor);
      }
      if (typeCase_ == TypeOneofCase.GlmClassifier) {
        output.WriteRawTag(130, 25);
        output.WriteMessage(GlmClassifier);
      }
      if (typeCase_ == TypeOneofCase.SupportVectorClassifier) {
        output.WriteRawTag(138, 25);
        output.WriteMessage(SupportVectorClassifier);
      }
      if (typeCase_ == TypeOneofCase.TreeEnsembleClassifier) {
        output.WriteRawTag(146, 25);
        output.WriteMessage(TreeEnsembleClassifier);
      }
      if (typeCase_ == TypeOneofCase.NeuralNetworkClassifier) {
        output.WriteRawTag(154, 25);
        output.WriteMessage(NeuralNetworkClassifier);
      }
      if (typeCase_ == TypeOneofCase.NeuralNetwork) {
        output.WriteRawTag(162, 31);
        output.WriteMessage(NeuralNetwork);
      }
      if (typeCase_ == TypeOneofCase.OneHotEncoder) {
        output.WriteRawTag(194, 37);
        output.WriteMessage(OneHotEncoder);
      }
      if (typeCase_ == TypeOneofCase.Imputer) {
        output.WriteRawTag(202, 37);
        output.WriteMessage(Imputer);
      }
      if (typeCase_ == TypeOneofCase.FeatureVectorizer) {
        output.WriteRawTag(210, 37);
        output.WriteMessage(FeatureVectorizer);
      }
      if (typeCase_ == TypeOneofCase.DictVectorizer) {
        output.WriteRawTag(218, 37);
        output.WriteMessage(DictVectorizer);
      }
      if (typeCase_ == TypeOneofCase.Scaler) {
        output.WriteRawTag(226, 37);
        output.WriteMessage(Scaler);
      }
      if (typeCase_ == TypeOneofCase.CategoricalMapping) {
        output.WriteRawTag(242, 37);
        output.WriteMessage(CategoricalMapping);
      }
      if (typeCase_ == TypeOneofCase.Normalizer) {
        output.WriteRawTag(250, 37);
        output.WriteMessage(Normalizer);
      }
      if (typeCase_ == TypeOneofCase.ArrayFeatureExtractor) {
        output.WriteRawTag(138, 38);
        output.WriteMessage(ArrayFeatureExtractor);
      }
      if (typeCase_ == TypeOneofCase.Identity) {
        output.WriteRawTag(162, 56);
        output.WriteMessage(Identity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpecificationVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpecificationVersion);
      }
      if (description_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
      }
      if (typeCase_ == TypeOneofCase.PipelineClassifier) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PipelineClassifier);
      }
      if (typeCase_ == TypeOneofCase.PipelineRegressor) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PipelineRegressor);
      }
      if (typeCase_ == TypeOneofCase.Pipeline) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pipeline);
      }
      if (typeCase_ == TypeOneofCase.GlmRegressor) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GlmRegressor);
      }
      if (typeCase_ == TypeOneofCase.SupportVectorRegressor) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SupportVectorRegressor);
      }
      if (typeCase_ == TypeOneofCase.TreeEnsembleRegressor) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TreeEnsembleRegressor);
      }
      if (typeCase_ == TypeOneofCase.NeuralNetworkRegressor) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NeuralNetworkRegressor);
      }
      if (typeCase_ == TypeOneofCase.GlmClassifier) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GlmClassifier);
      }
      if (typeCase_ == TypeOneofCase.SupportVectorClassifier) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SupportVectorClassifier);
      }
      if (typeCase_ == TypeOneofCase.TreeEnsembleClassifier) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TreeEnsembleClassifier);
      }
      if (typeCase_ == TypeOneofCase.NeuralNetworkClassifier) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NeuralNetworkClassifier);
      }
      if (typeCase_ == TypeOneofCase.NeuralNetwork) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NeuralNetwork);
      }
      if (typeCase_ == TypeOneofCase.OneHotEncoder) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OneHotEncoder);
      }
      if (typeCase_ == TypeOneofCase.Imputer) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Imputer);
      }
      if (typeCase_ == TypeOneofCase.FeatureVectorizer) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FeatureVectorizer);
      }
      if (typeCase_ == TypeOneofCase.DictVectorizer) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DictVectorizer);
      }
      if (typeCase_ == TypeOneofCase.Scaler) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Scaler);
      }
      if (typeCase_ == TypeOneofCase.CategoricalMapping) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CategoricalMapping);
      }
      if (typeCase_ == TypeOneofCase.Normalizer) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Normalizer);
      }
      if (typeCase_ == TypeOneofCase.ArrayFeatureExtractor) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ArrayFeatureExtractor);
      }
      if (typeCase_ == TypeOneofCase.Identity) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Identity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Model other) {
      if (other == null) {
        return;
      }
      if (other.SpecificationVersion != 0) {
        SpecificationVersion = other.SpecificationVersion;
      }
      if (other.description_ != null) {
        if (description_ == null) {
          description_ = new global::CoreML.Specification.ModelDescription();
        }
        Description.MergeFrom(other.Description);
      }
      switch (other.TypeCase) {
        case TypeOneofCase.PipelineClassifier:
          PipelineClassifier = other.PipelineClassifier;
          break;
        case TypeOneofCase.PipelineRegressor:
          PipelineRegressor = other.PipelineRegressor;
          break;
        case TypeOneofCase.Pipeline:
          Pipeline = other.Pipeline;
          break;
        case TypeOneofCase.GlmRegressor:
          GlmRegressor = other.GlmRegressor;
          break;
        case TypeOneofCase.SupportVectorRegressor:
          SupportVectorRegressor = other.SupportVectorRegressor;
          break;
        case TypeOneofCase.TreeEnsembleRegressor:
          TreeEnsembleRegressor = other.TreeEnsembleRegressor;
          break;
        case TypeOneofCase.NeuralNetworkRegressor:
          NeuralNetworkRegressor = other.NeuralNetworkRegressor;
          break;
        case TypeOneofCase.GlmClassifier:
          GlmClassifier = other.GlmClassifier;
          break;
        case TypeOneofCase.SupportVectorClassifier:
          SupportVectorClassifier = other.SupportVectorClassifier;
          break;
        case TypeOneofCase.TreeEnsembleClassifier:
          TreeEnsembleClassifier = other.TreeEnsembleClassifier;
          break;
        case TypeOneofCase.NeuralNetworkClassifier:
          NeuralNetworkClassifier = other.NeuralNetworkClassifier;
          break;
        case TypeOneofCase.NeuralNetwork:
          NeuralNetwork = other.NeuralNetwork;
          break;
        case TypeOneofCase.OneHotEncoder:
          OneHotEncoder = other.OneHotEncoder;
          break;
        case TypeOneofCase.Imputer:
          Imputer = other.Imputer;
          break;
        case TypeOneofCase.FeatureVectorizer:
          FeatureVectorizer = other.FeatureVectorizer;
          break;
        case TypeOneofCase.DictVectorizer:
          DictVectorizer = other.DictVectorizer;
          break;
        case TypeOneofCase.Scaler:
          Scaler = other.Scaler;
          break;
        case TypeOneofCase.CategoricalMapping:
          CategoricalMapping = other.CategoricalMapping;
          break;
        case TypeOneofCase.Normalizer:
          Normalizer = other.Normalizer;
          break;
        case TypeOneofCase.ArrayFeatureExtractor:
          ArrayFeatureExtractor = other.ArrayFeatureExtractor;
          break;
        case TypeOneofCase.Identity:
          Identity = other.Identity;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SpecificationVersion = input.ReadInt32();
            break;
          }
          case 18: {
            if (description_ == null) {
              description_ = new global::CoreML.Specification.ModelDescription();
            }
            input.ReadMessage(description_);
            break;
          }
          case 1602: {
            global::CoreML.Specification.PipelineClassifier subBuilder = new global::CoreML.Specification.PipelineClassifier();
            if (typeCase_ == TypeOneofCase.PipelineClassifier) {
              subBuilder.MergeFrom(PipelineClassifier);
            }
            input.ReadMessage(subBuilder);
            PipelineClassifier = subBuilder;
            break;
          }
          case 1610: {
            global::CoreML.Specification.PipelineRegressor subBuilder = new global::CoreML.Specification.PipelineRegressor();
            if (typeCase_ == TypeOneofCase.PipelineRegressor) {
              subBuilder.MergeFrom(PipelineRegressor);
            }
            input.ReadMessage(subBuilder);
            PipelineRegressor = subBuilder;
            break;
          }
          case 1618: {
            global::CoreML.Specification.Pipeline subBuilder = new global::CoreML.Specification.Pipeline();
            if (typeCase_ == TypeOneofCase.Pipeline) {
              subBuilder.MergeFrom(Pipeline);
            }
            input.ReadMessage(subBuilder);
            Pipeline = subBuilder;
            break;
          }
          case 2402: {
            global::CoreML.Specification.GLMRegressor subBuilder = new global::CoreML.Specification.GLMRegressor();
            if (typeCase_ == TypeOneofCase.GlmRegressor) {
              subBuilder.MergeFrom(GlmRegressor);
            }
            input.ReadMessage(subBuilder);
            GlmRegressor = subBuilder;
            break;
          }
          case 2410: {
            global::CoreML.Specification.SupportVectorRegressor subBuilder = new global::CoreML.Specification.SupportVectorRegressor();
            if (typeCase_ == TypeOneofCase.SupportVectorRegressor) {
              subBuilder.MergeFrom(SupportVectorRegressor);
            }
            input.ReadMessage(subBuilder);
            SupportVectorRegressor = subBuilder;
            break;
          }
          case 2418: {
            global::CoreML.Specification.TreeEnsembleRegressor subBuilder = new global::CoreML.Specification.TreeEnsembleRegressor();
            if (typeCase_ == TypeOneofCase.TreeEnsembleRegressor) {
              subBuilder.MergeFrom(TreeEnsembleRegressor);
            }
            input.ReadMessage(subBuilder);
            TreeEnsembleRegressor = subBuilder;
            break;
          }
          case 2426: {
            global::CoreML.Specification.NeuralNetworkRegressor subBuilder = new global::CoreML.Specification.NeuralNetworkRegressor();
            if (typeCase_ == TypeOneofCase.NeuralNetworkRegressor) {
              subBuilder.MergeFrom(NeuralNetworkRegressor);
            }
            input.ReadMessage(subBuilder);
            NeuralNetworkRegressor = subBuilder;
            break;
          }
          case 3202: {
            global::CoreML.Specification.GLMClassifier subBuilder = new global::CoreML.Specification.GLMClassifier();
            if (typeCase_ == TypeOneofCase.GlmClassifier) {
              subBuilder.MergeFrom(GlmClassifier);
            }
            input.ReadMessage(subBuilder);
            GlmClassifier = subBuilder;
            break;
          }
          case 3210: {
            global::CoreML.Specification.SupportVectorClassifier subBuilder = new global::CoreML.Specification.SupportVectorClassifier();
            if (typeCase_ == TypeOneofCase.SupportVectorClassifier) {
              subBuilder.MergeFrom(SupportVectorClassifier);
            }
            input.ReadMessage(subBuilder);
            SupportVectorClassifier = subBuilder;
            break;
          }
          case 3218: {
            global::CoreML.Specification.TreeEnsembleClassifier subBuilder = new global::CoreML.Specification.TreeEnsembleClassifier();
            if (typeCase_ == TypeOneofCase.TreeEnsembleClassifier) {
              subBuilder.MergeFrom(TreeEnsembleClassifier);
            }
            input.ReadMessage(subBuilder);
            TreeEnsembleClassifier = subBuilder;
            break;
          }
          case 3226: {
            global::CoreML.Specification.NeuralNetworkClassifier subBuilder = new global::CoreML.Specification.NeuralNetworkClassifier();
            if (typeCase_ == TypeOneofCase.NeuralNetworkClassifier) {
              subBuilder.MergeFrom(NeuralNetworkClassifier);
            }
            input.ReadMessage(subBuilder);
            NeuralNetworkClassifier = subBuilder;
            break;
          }
          case 4002: {
            global::CoreML.Specification.NeuralNetwork subBuilder = new global::CoreML.Specification.NeuralNetwork();
            if (typeCase_ == TypeOneofCase.NeuralNetwork) {
              subBuilder.MergeFrom(NeuralNetwork);
            }
            input.ReadMessage(subBuilder);
            NeuralNetwork = subBuilder;
            break;
          }
          case 4802: {
            global::CoreML.Specification.OneHotEncoder subBuilder = new global::CoreML.Specification.OneHotEncoder();
            if (typeCase_ == TypeOneofCase.OneHotEncoder) {
              subBuilder.MergeFrom(OneHotEncoder);
            }
            input.ReadMessage(subBuilder);
            OneHotEncoder = subBuilder;
            break;
          }
          case 4810: {
            global::CoreML.Specification.Imputer subBuilder = new global::CoreML.Specification.Imputer();
            if (typeCase_ == TypeOneofCase.Imputer) {
              subBuilder.MergeFrom(Imputer);
            }
            input.ReadMessage(subBuilder);
            Imputer = subBuilder;
            break;
          }
          case 4818: {
            global::CoreML.Specification.FeatureVectorizer subBuilder = new global::CoreML.Specification.FeatureVectorizer();
            if (typeCase_ == TypeOneofCase.FeatureVectorizer) {
              subBuilder.MergeFrom(FeatureVectorizer);
            }
            input.ReadMessage(subBuilder);
            FeatureVectorizer = subBuilder;
            break;
          }
          case 4826: {
            global::CoreML.Specification.DictVectorizer subBuilder = new global::CoreML.Specification.DictVectorizer();
            if (typeCase_ == TypeOneofCase.DictVectorizer) {
              subBuilder.MergeFrom(DictVectorizer);
            }
            input.ReadMessage(subBuilder);
            DictVectorizer = subBuilder;
            break;
          }
          case 4834: {
            global::CoreML.Specification.Scaler subBuilder = new global::CoreML.Specification.Scaler();
            if (typeCase_ == TypeOneofCase.Scaler) {
              subBuilder.MergeFrom(Scaler);
            }
            input.ReadMessage(subBuilder);
            Scaler = subBuilder;
            break;
          }
          case 4850: {
            global::CoreML.Specification.CategoricalMapping subBuilder = new global::CoreML.Specification.CategoricalMapping();
            if (typeCase_ == TypeOneofCase.CategoricalMapping) {
              subBuilder.MergeFrom(CategoricalMapping);
            }
            input.ReadMessage(subBuilder);
            CategoricalMapping = subBuilder;
            break;
          }
          case 4858: {
            global::CoreML.Specification.Normalizer subBuilder = new global::CoreML.Specification.Normalizer();
            if (typeCase_ == TypeOneofCase.Normalizer) {
              subBuilder.MergeFrom(Normalizer);
            }
            input.ReadMessage(subBuilder);
            Normalizer = subBuilder;
            break;
          }
          case 4874: {
            global::CoreML.Specification.ArrayFeatureExtractor subBuilder = new global::CoreML.Specification.ArrayFeatureExtractor();
            if (typeCase_ == TypeOneofCase.ArrayFeatureExtractor) {
              subBuilder.MergeFrom(ArrayFeatureExtractor);
            }
            input.ReadMessage(subBuilder);
            ArrayFeatureExtractor = subBuilder;
            break;
          }
          case 7202: {
            global::CoreML.Specification.Identity subBuilder = new global::CoreML.Specification.Identity();
            if (typeCase_ == TypeOneofCase.Identity) {
              subBuilder.MergeFrom(Identity);
            }
            input.ReadMessage(subBuilder);
            Identity = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

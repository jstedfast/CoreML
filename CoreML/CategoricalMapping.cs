// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CategoricalMapping.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CoreML.Specification {

  /// <summary>Holder for reflection information generated from CategoricalMapping.proto</summary>
  public static partial class CategoricalMappingReflection {

    #region Descriptor
    /// <summary>File descriptor for CategoricalMapping.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CategoricalMappingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhDYXRlZ29yaWNhbE1hcHBpbmcucHJvdG8SFENvcmVNTC5TcGVjaWZpY2F0",
            "aW9uGhREYXRhU3RydWN0dXJlcy5wcm90byLnAQoSQ2F0ZWdvcmljYWxNYXBw",
            "aW5nEkIKEHN0cmluZ1RvSW50NjRNYXAYASABKAsyJi5Db3JlTUwuU3BlY2lm",
            "aWNhdGlvbi5TdHJpbmdUb0ludDY0TWFwSAASQgoQaW50NjRUb1N0cmluZ01h",
            "cBgCIAEoCzImLkNvcmVNTC5TcGVjaWZpY2F0aW9uLkludDY0VG9TdHJpbmdN",
            "YXBIABISCghzdHJWYWx1ZRhlIAEoCUgBEhQKCmludDY0VmFsdWUYZiABKANI",
            "AUINCgtNYXBwaW5nVHlwZUIQCg5WYWx1ZU9uVW5rbm93bkICSANQAGIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::CoreML.Specification.DataStructuresReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.CategoricalMapping), global::CoreML.Specification.CategoricalMapping.Parser, new[]{ "StringToInt64Map", "Int64ToStringMap", "StrValue", "Int64Value" }, new[]{ "MappingType", "ValueOnUnknown" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// A categorical mapping.
  ///
  /// This allows conversion from integers to strings, or from strings to integers.
  /// </summary>
  public sealed partial class CategoricalMapping : pb::IMessage<CategoricalMapping> {
    private static readonly pb::MessageParser<CategoricalMapping> _parser = new pb::MessageParser<CategoricalMapping>(() => new CategoricalMapping());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CategoricalMapping> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.CategoricalMappingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoricalMapping() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoricalMapping(CategoricalMapping other) : this() {
      switch (other.MappingTypeCase) {
        case MappingTypeOneofCase.StringToInt64Map:
          StringToInt64Map = other.StringToInt64Map.Clone();
          break;
        case MappingTypeOneofCase.Int64ToStringMap:
          Int64ToStringMap = other.Int64ToStringMap.Clone();
          break;
      }

      switch (other.ValueOnUnknownCase) {
        case ValueOnUnknownOneofCase.StrValue:
          StrValue = other.StrValue;
          break;
        case ValueOnUnknownOneofCase.Int64Value:
          Int64Value = other.Int64Value;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoricalMapping Clone() {
      return new CategoricalMapping(this);
    }

    /// <summary>Field number for the "stringToInt64Map" field.</summary>
    public const int StringToInt64MapFieldNumber = 1;
    /// <summary>
    /// Conversion from strings to integers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.StringToInt64Map StringToInt64Map {
      get { return mappingTypeCase_ == MappingTypeOneofCase.StringToInt64Map ? (global::CoreML.Specification.StringToInt64Map) mappingType_ : null; }
      set {
        mappingType_ = value;
        mappingTypeCase_ = value == null ? MappingTypeOneofCase.None : MappingTypeOneofCase.StringToInt64Map;
      }
    }

    /// <summary>Field number for the "int64ToStringMap" field.</summary>
    public const int Int64ToStringMapFieldNumber = 2;
    /// <summary>
    /// Conversion from integer to string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Int64ToStringMap Int64ToStringMap {
      get { return mappingTypeCase_ == MappingTypeOneofCase.Int64ToStringMap ? (global::CoreML.Specification.Int64ToStringMap) mappingType_ : null; }
      set {
        mappingType_ = value;
        mappingTypeCase_ = value == null ? MappingTypeOneofCase.None : MappingTypeOneofCase.Int64ToStringMap;
      }
    }

    /// <summary>Field number for the "strValue" field.</summary>
    public const int StrValueFieldNumber = 101;
    /// <summary>
    /// Default output when converting from an integer to a string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrValue {
      get { return valueOnUnknownCase_ == ValueOnUnknownOneofCase.StrValue ? (string) valueOnUnknown_ : ""; }
      set {
        valueOnUnknown_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueOnUnknownCase_ = ValueOnUnknownOneofCase.StrValue;
      }
    }

    /// <summary>Field number for the "int64Value" field.</summary>
    public const int Int64ValueFieldNumber = 102;
    /// <summary>
    /// Default output when converting from an string to an integer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Int64Value {
      get { return valueOnUnknownCase_ == ValueOnUnknownOneofCase.Int64Value ? (long) valueOnUnknown_ : 0L; }
      set {
        valueOnUnknown_ = value;
        valueOnUnknownCase_ = ValueOnUnknownOneofCase.Int64Value;
      }
    }

    private object mappingType_;
    /// <summary>Enum of possible cases for the "MappingType" oneof.</summary>
    public enum MappingTypeOneofCase {
      None = 0,
      StringToInt64Map = 1,
      Int64ToStringMap = 2,
    }
    private MappingTypeOneofCase mappingTypeCase_ = MappingTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MappingTypeOneofCase MappingTypeCase {
      get { return mappingTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMappingType() {
      mappingTypeCase_ = MappingTypeOneofCase.None;
      mappingType_ = null;
    }

    private object valueOnUnknown_;
    /// <summary>Enum of possible cases for the "ValueOnUnknown" oneof.</summary>
    public enum ValueOnUnknownOneofCase {
      None = 0,
      StrValue = 101,
      Int64Value = 102,
    }
    private ValueOnUnknownOneofCase valueOnUnknownCase_ = ValueOnUnknownOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOnUnknownOneofCase ValueOnUnknownCase {
      get { return valueOnUnknownCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValueOnUnknown() {
      valueOnUnknownCase_ = ValueOnUnknownOneofCase.None;
      valueOnUnknown_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CategoricalMapping);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CategoricalMapping other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StringToInt64Map, other.StringToInt64Map)) return false;
      if (!object.Equals(Int64ToStringMap, other.Int64ToStringMap)) return false;
      if (StrValue != other.StrValue) return false;
      if (Int64Value != other.Int64Value) return false;
      if (MappingTypeCase != other.MappingTypeCase) return false;
      if (ValueOnUnknownCase != other.ValueOnUnknownCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mappingTypeCase_ == MappingTypeOneofCase.StringToInt64Map) hash ^= StringToInt64Map.GetHashCode();
      if (mappingTypeCase_ == MappingTypeOneofCase.Int64ToStringMap) hash ^= Int64ToStringMap.GetHashCode();
      if (valueOnUnknownCase_ == ValueOnUnknownOneofCase.StrValue) hash ^= StrValue.GetHashCode();
      if (valueOnUnknownCase_ == ValueOnUnknownOneofCase.Int64Value) hash ^= Int64Value.GetHashCode();
      hash ^= (int) mappingTypeCase_;
      hash ^= (int) valueOnUnknownCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mappingTypeCase_ == MappingTypeOneofCase.StringToInt64Map) {
        output.WriteRawTag(10);
        output.WriteMessage(StringToInt64Map);
      }
      if (mappingTypeCase_ == MappingTypeOneofCase.Int64ToStringMap) {
        output.WriteRawTag(18);
        output.WriteMessage(Int64ToStringMap);
      }
      if (valueOnUnknownCase_ == ValueOnUnknownOneofCase.StrValue) {
        output.WriteRawTag(170, 6);
        output.WriteString(StrValue);
      }
      if (valueOnUnknownCase_ == ValueOnUnknownOneofCase.Int64Value) {
        output.WriteRawTag(176, 6);
        output.WriteInt64(Int64Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mappingTypeCase_ == MappingTypeOneofCase.StringToInt64Map) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StringToInt64Map);
      }
      if (mappingTypeCase_ == MappingTypeOneofCase.Int64ToStringMap) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Int64ToStringMap);
      }
      if (valueOnUnknownCase_ == ValueOnUnknownOneofCase.StrValue) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StrValue);
      }
      if (valueOnUnknownCase_ == ValueOnUnknownOneofCase.Int64Value) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Int64Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CategoricalMapping other) {
      if (other == null) {
        return;
      }
      switch (other.MappingTypeCase) {
        case MappingTypeOneofCase.StringToInt64Map:
          StringToInt64Map = other.StringToInt64Map;
          break;
        case MappingTypeOneofCase.Int64ToStringMap:
          Int64ToStringMap = other.Int64ToStringMap;
          break;
      }

      switch (other.ValueOnUnknownCase) {
        case ValueOnUnknownOneofCase.StrValue:
          StrValue = other.StrValue;
          break;
        case ValueOnUnknownOneofCase.Int64Value:
          Int64Value = other.Int64Value;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::CoreML.Specification.StringToInt64Map subBuilder = new global::CoreML.Specification.StringToInt64Map();
            if (mappingTypeCase_ == MappingTypeOneofCase.StringToInt64Map) {
              subBuilder.MergeFrom(StringToInt64Map);
            }
            input.ReadMessage(subBuilder);
            StringToInt64Map = subBuilder;
            break;
          }
          case 18: {
            global::CoreML.Specification.Int64ToStringMap subBuilder = new global::CoreML.Specification.Int64ToStringMap();
            if (mappingTypeCase_ == MappingTypeOneofCase.Int64ToStringMap) {
              subBuilder.MergeFrom(Int64ToStringMap);
            }
            input.ReadMessage(subBuilder);
            Int64ToStringMap = subBuilder;
            break;
          }
          case 810: {
            StrValue = input.ReadString();
            break;
          }
          case 816: {
            Int64Value = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

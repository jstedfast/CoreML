// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GLMClassifier.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CoreML.Specification {

  /// <summary>Holder for reflection information generated from GLMClassifier.proto</summary>
  public static partial class GLMClassifierReflection {

    #region Descriptor
    /// <summary>File descriptor for GLMClassifier.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GLMClassifierReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNHTE1DbGFzc2lmaWVyLnByb3RvEhRDb3JlTUwuU3BlY2lmaWNhdGlvbhoU",
            "RGF0YVN0cnVjdHVyZXMucHJvdG8inAQKDUdMTUNsYXNzaWZpZXISQAoHd2Vp",
            "Z2h0cxgBIAMoCzIvLkNvcmVNTC5TcGVjaWZpY2F0aW9uLkdMTUNsYXNzaWZp",
            "ZXIuRG91YmxlQXJyYXkSDgoGb2Zmc2V0GAIgAygBElwKF3Bvc3RFdmFsdWF0",
            "aW9uVHJhbnNmb3JtGAMgASgOMjsuQ29yZU1MLlNwZWNpZmljYXRpb24uR0xN",
            "Q2xhc3NpZmllci5Qb3N0RXZhbHVhdGlvblRyYW5zZm9ybRJICg1jbGFzc0Vu",
            "Y29kaW5nGAQgASgOMjEuQ29yZU1MLlNwZWNpZmljYXRpb24uR0xNQ2xhc3Np",
            "Zmllci5DbGFzc0VuY29kaW5nEj8KEXN0cmluZ0NsYXNzTGFiZWxzGGQgASgL",
            "MiIuQ29yZU1MLlNwZWNpZmljYXRpb24uU3RyaW5nVmVjdG9ySAASPQoQaW50",
            "NjRDbGFzc0xhYmVscxhlIAEoCzIhLkNvcmVNTC5TcGVjaWZpY2F0aW9uLklu",
            "dDY0VmVjdG9ySAAaHAoLRG91YmxlQXJyYXkSDQoFdmFsdWUYASADKAEiMAoX",
            "UG9zdEV2YWx1YXRpb25UcmFuc2Zvcm0SCQoFTG9naXQQABIKCgZQcm9iaXQQ",
            "ASIyCg1DbGFzc0VuY29kaW5nEhIKDlJlZmVyZW5jZUNsYXNzEAASDQoJT25l",
            "VnNSZXN0EAFCDQoLQ2xhc3NMYWJlbHNCAkgDUABiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::CoreML.Specification.DataStructuresReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.GLMClassifier), global::CoreML.Specification.GLMClassifier.Parser, new[]{ "Weights", "Offset", "PostEvaluationTransform", "ClassEncoding", "StringClassLabels", "Int64ClassLabels" }, new[]{ "ClassLabels" }, new[]{ typeof(global::CoreML.Specification.GLMClassifier.Types.PostEvaluationTransform), typeof(global::CoreML.Specification.GLMClassifier.Types.ClassEncoding) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.GLMClassifier.Types.DoubleArray), global::CoreML.Specification.GLMClassifier.Types.DoubleArray.Parser, new[]{ "Value" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// A generalized linear model classifier.
  /// </summary>
  public sealed partial class GLMClassifier : pb::IMessage<GLMClassifier> {
    private static readonly pb::MessageParser<GLMClassifier> _parser = new pb::MessageParser<GLMClassifier>(() => new GLMClassifier());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GLMClassifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.GLMClassifierReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GLMClassifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GLMClassifier(GLMClassifier other) : this() {
      weights_ = other.weights_.Clone();
      offset_ = other.offset_.Clone();
      postEvaluationTransform_ = other.postEvaluationTransform_;
      classEncoding_ = other.classEncoding_;
      switch (other.ClassLabelsCase) {
        case ClassLabelsOneofCase.StringClassLabels:
          StringClassLabels = other.StringClassLabels.Clone();
          break;
        case ClassLabelsOneofCase.Int64ClassLabels:
          Int64ClassLabels = other.Int64ClassLabels.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GLMClassifier Clone() {
      return new GLMClassifier(this);
    }

    /// <summary>Field number for the "weights" field.</summary>
    public const int WeightsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CoreML.Specification.GLMClassifier.Types.DoubleArray> _repeated_weights_codec
        = pb::FieldCodec.ForMessage(10, global::CoreML.Specification.GLMClassifier.Types.DoubleArray.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.GLMClassifier.Types.DoubleArray> weights_ = new pbc::RepeatedField<global::CoreML.Specification.GLMClassifier.Types.DoubleArray>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.GLMClassifier.Types.DoubleArray> Weights {
      get { return weights_; }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private static readonly pb::FieldCodec<double> _repeated_offset_codec
        = pb::FieldCodec.ForDouble(18);
    private readonly pbc::RepeatedField<double> offset_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Offset {
      get { return offset_; }
    }

    /// <summary>Field number for the "postEvaluationTransform" field.</summary>
    public const int PostEvaluationTransformFieldNumber = 3;
    private global::CoreML.Specification.GLMClassifier.Types.PostEvaluationTransform postEvaluationTransform_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.GLMClassifier.Types.PostEvaluationTransform PostEvaluationTransform {
      get { return postEvaluationTransform_; }
      set {
        postEvaluationTransform_ = value;
      }
    }

    /// <summary>Field number for the "classEncoding" field.</summary>
    public const int ClassEncodingFieldNumber = 4;
    private global::CoreML.Specification.GLMClassifier.Types.ClassEncoding classEncoding_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.GLMClassifier.Types.ClassEncoding ClassEncoding {
      get { return classEncoding_; }
      set {
        classEncoding_ = value;
      }
    }

    /// <summary>Field number for the "stringClassLabels" field.</summary>
    public const int StringClassLabelsFieldNumber = 100;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.StringVector StringClassLabels {
      get { return classLabelsCase_ == ClassLabelsOneofCase.StringClassLabels ? (global::CoreML.Specification.StringVector) classLabels_ : null; }
      set {
        classLabels_ = value;
        classLabelsCase_ = value == null ? ClassLabelsOneofCase.None : ClassLabelsOneofCase.StringClassLabels;
      }
    }

    /// <summary>Field number for the "int64ClassLabels" field.</summary>
    public const int Int64ClassLabelsFieldNumber = 101;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Int64Vector Int64ClassLabels {
      get { return classLabelsCase_ == ClassLabelsOneofCase.Int64ClassLabels ? (global::CoreML.Specification.Int64Vector) classLabels_ : null; }
      set {
        classLabels_ = value;
        classLabelsCase_ = value == null ? ClassLabelsOneofCase.None : ClassLabelsOneofCase.Int64ClassLabels;
      }
    }

    private object classLabels_;
    /// <summary>Enum of possible cases for the "ClassLabels" oneof.</summary>
    public enum ClassLabelsOneofCase {
      None = 0,
      StringClassLabels = 100,
      Int64ClassLabels = 101,
    }
    private ClassLabelsOneofCase classLabelsCase_ = ClassLabelsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassLabelsOneofCase ClassLabelsCase {
      get { return classLabelsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClassLabels() {
      classLabelsCase_ = ClassLabelsOneofCase.None;
      classLabels_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GLMClassifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GLMClassifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!weights_.Equals(other.weights_)) return false;
      if(!offset_.Equals(other.offset_)) return false;
      if (PostEvaluationTransform != other.PostEvaluationTransform) return false;
      if (ClassEncoding != other.ClassEncoding) return false;
      if (!object.Equals(StringClassLabels, other.StringClassLabels)) return false;
      if (!object.Equals(Int64ClassLabels, other.Int64ClassLabels)) return false;
      if (ClassLabelsCase != other.ClassLabelsCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= weights_.GetHashCode();
      hash ^= offset_.GetHashCode();
      if (PostEvaluationTransform != 0) hash ^= PostEvaluationTransform.GetHashCode();
      if (ClassEncoding != 0) hash ^= ClassEncoding.GetHashCode();
      if (classLabelsCase_ == ClassLabelsOneofCase.StringClassLabels) hash ^= StringClassLabels.GetHashCode();
      if (classLabelsCase_ == ClassLabelsOneofCase.Int64ClassLabels) hash ^= Int64ClassLabels.GetHashCode();
      hash ^= (int) classLabelsCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      weights_.WriteTo(output, _repeated_weights_codec);
      offset_.WriteTo(output, _repeated_offset_codec);
      if (PostEvaluationTransform != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PostEvaluationTransform);
      }
      if (ClassEncoding != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ClassEncoding);
      }
      if (classLabelsCase_ == ClassLabelsOneofCase.StringClassLabels) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(StringClassLabels);
      }
      if (classLabelsCase_ == ClassLabelsOneofCase.Int64ClassLabels) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(Int64ClassLabels);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += weights_.CalculateSize(_repeated_weights_codec);
      size += offset_.CalculateSize(_repeated_offset_codec);
      if (PostEvaluationTransform != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PostEvaluationTransform);
      }
      if (ClassEncoding != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClassEncoding);
      }
      if (classLabelsCase_ == ClassLabelsOneofCase.StringClassLabels) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StringClassLabels);
      }
      if (classLabelsCase_ == ClassLabelsOneofCase.Int64ClassLabels) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Int64ClassLabels);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GLMClassifier other) {
      if (other == null) {
        return;
      }
      weights_.Add(other.weights_);
      offset_.Add(other.offset_);
      if (other.PostEvaluationTransform != 0) {
        PostEvaluationTransform = other.PostEvaluationTransform;
      }
      if (other.ClassEncoding != 0) {
        ClassEncoding = other.ClassEncoding;
      }
      switch (other.ClassLabelsCase) {
        case ClassLabelsOneofCase.StringClassLabels:
          StringClassLabels = other.StringClassLabels;
          break;
        case ClassLabelsOneofCase.Int64ClassLabels:
          Int64ClassLabels = other.Int64ClassLabels;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            weights_.AddEntriesFrom(input, _repeated_weights_codec);
            break;
          }
          case 18:
          case 17: {
            offset_.AddEntriesFrom(input, _repeated_offset_codec);
            break;
          }
          case 24: {
            postEvaluationTransform_ = (global::CoreML.Specification.GLMClassifier.Types.PostEvaluationTransform) input.ReadEnum();
            break;
          }
          case 32: {
            classEncoding_ = (global::CoreML.Specification.GLMClassifier.Types.ClassEncoding) input.ReadEnum();
            break;
          }
          case 802: {
            global::CoreML.Specification.StringVector subBuilder = new global::CoreML.Specification.StringVector();
            if (classLabelsCase_ == ClassLabelsOneofCase.StringClassLabels) {
              subBuilder.MergeFrom(StringClassLabels);
            }
            input.ReadMessage(subBuilder);
            StringClassLabels = subBuilder;
            break;
          }
          case 810: {
            global::CoreML.Specification.Int64Vector subBuilder = new global::CoreML.Specification.Int64Vector();
            if (classLabelsCase_ == ClassLabelsOneofCase.Int64ClassLabels) {
              subBuilder.MergeFrom(Int64ClassLabels);
            }
            input.ReadMessage(subBuilder);
            Int64ClassLabels = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GLMClassifier message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum PostEvaluationTransform {
        [pbr::OriginalName("Logit")] Logit = 0,
        /// <summary>
        //// Only binary classification is supported for probit
        /// </summary>
        [pbr::OriginalName("Probit")] Probit = 1,
      }

      public enum ClassEncoding {
        /// <summary>
        //// First class is the reference class
        /// </summary>
        [pbr::OriginalName("ReferenceClass")] ReferenceClass = 0,
        /// <summary>
        //// Also called One vs All
        /// </summary>
        [pbr::OriginalName("OneVsRest")] OneVsRest = 1,
      }

      public sealed partial class DoubleArray : pb::IMessage<DoubleArray> {
        private static readonly pb::MessageParser<DoubleArray> _parser = new pb::MessageParser<DoubleArray>(() => new DoubleArray());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DoubleArray> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CoreML.Specification.GLMClassifier.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DoubleArray() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DoubleArray(DoubleArray other) : this() {
          value_ = other.value_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DoubleArray Clone() {
          return new DoubleArray(this);
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 1;
        private static readonly pb::FieldCodec<double> _repeated_value_codec
            = pb::FieldCodec.ForDouble(10);
        private readonly pbc::RepeatedField<double> value_ = new pbc::RepeatedField<double>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> Value {
          get { return value_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DoubleArray);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DoubleArray other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!value_.Equals(other.value_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= value_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          value_.WriteTo(output, _repeated_value_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += value_.CalculateSize(_repeated_value_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DoubleArray other) {
          if (other == null) {
            return;
          }
          value_.Add(other.value_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10:
              case 9: {
                value_.AddEntriesFrom(input, _repeated_value_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code

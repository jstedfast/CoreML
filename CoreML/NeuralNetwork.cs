// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: NeuralNetwork.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CoreML.Specification {

  /// <summary>Holder for reflection information generated from NeuralNetwork.proto</summary>
  public static partial class NeuralNetworkReflection {

    #region Descriptor
    /// <summary>File descriptor for NeuralNetwork.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NeuralNetworkReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNOZXVyYWxOZXR3b3JrLnByb3RvEhRDb3JlTUwuU3BlY2lmaWNhdGlvbhoU",
            "RGF0YVN0cnVjdHVyZXMucHJvdG8ikgEKDU5ldXJhbE5ldHdvcmsSOAoGbGF5",
            "ZXJzGAEgAygLMiguQ29yZU1MLlNwZWNpZmljYXRpb24uTmV1cmFsTmV0d29y",
            "a0xheWVyEkcKDXByZXByb2Nlc3NpbmcYAiADKAsyMC5Db3JlTUwuU3BlY2lm",
            "aWNhdGlvbi5OZXVyYWxOZXR3b3JrUHJlcHJvY2Vzc2luZyJ4ChhOZXVyYWxO",
            "ZXR3b3JrSW1hZ2VTY2FsZXISFAoMY2hhbm5lbFNjYWxlGAogASgCEhAKCGJs",
            "dWVCaWFzGBQgASgCEhEKCWdyZWVuQmlhcxgVIAEoAhIPCgdyZWRCaWFzGBYg",
            "ASgCEhAKCGdyYXlCaWFzGB4gASgCIisKFk5ldXJhbE5ldHdvcmtNZWFuSW1h",
            "Z2USEQoJbWVhbkltYWdlGAEgAygCIsYBChpOZXVyYWxOZXR3b3JrUHJlcHJv",
            "Y2Vzc2luZxITCgtmZWF0dXJlTmFtZRgBIAEoCRJACgZzY2FsZXIYCiABKAsy",
            "Li5Db3JlTUwuU3BlY2lmaWNhdGlvbi5OZXVyYWxOZXR3b3JrSW1hZ2VTY2Fs",
            "ZXJIABJBCgltZWFuSW1hZ2UYCyABKAsyLC5Db3JlTUwuU3BlY2lmaWNhdGlv",
            "bi5OZXVyYWxOZXR3b3JrTWVhbkltYWdlSABCDgoMcHJlcHJvY2Vzc29yIhAK",
            "DkFjdGl2YXRpb25SZUxVIiQKE0FjdGl2YXRpb25MZWFreVJlTFUSDQoFYWxw",
            "aGEYASABKAIiEAoOQWN0aXZhdGlvblRhbmgiMwoUQWN0aXZhdGlvblNjYWxl",
            "ZFRhbmgSDQoFYWxwaGEYASABKAISDAoEYmV0YRgCIAEoAiITChFBY3RpdmF0",
            "aW9uU2lnbW9pZCIvChBBY3RpdmF0aW9uTGluZWFyEg0KBWFscGhhGAEgASgC",
            "EgwKBGJldGEYAiABKAIiNAoVQWN0aXZhdGlvblNpZ21vaWRIYXJkEg0KBWFs",
            "cGhhGAEgASgCEgwKBGJldGEYAiABKAIiRAoPQWN0aXZhdGlvblBSZUxVEjEK",
            "BWFscGhhGAEgASgLMiIuQ29yZU1MLlNwZWNpZmljYXRpb24uV2VpZ2h0UGFy",
            "YW1zIh4KDUFjdGl2YXRpb25FTFUSDQoFYWxwaGEYASABKAIiKgoZQWN0aXZh",
            "dGlvblRocmVzaG9sZGVkUmVMVRINCgVhbHBoYRgBIAEoAiIUChJBY3RpdmF0",
            "aW9uU29mdHNpZ24iFAoSQWN0aXZhdGlvblNvZnRwbHVzIoMBChxBY3RpdmF0",
            "aW9uUGFyYW1ldHJpY1NvZnRwbHVzEjEKBWFscGhhGAEgASgLMiIuQ29yZU1M",
            "LlNwZWNpZmljYXRpb24uV2VpZ2h0UGFyYW1zEjAKBGJldGEYAiABKAsyIi5D",
            "b3JlTUwuU3BlY2lmaWNhdGlvbi5XZWlnaHRQYXJhbXMi1AYKEEFjdGl2YXRp",
            "b25QYXJhbXMSOAoGbGluZWFyGAUgASgLMiYuQ29yZU1MLlNwZWNpZmljYXRp",
            "b24uQWN0aXZhdGlvbkxpbmVhckgAEjQKBFJlTFUYCiABKAsyJC5Db3JlTUwu",
            "U3BlY2lmaWNhdGlvbi5BY3RpdmF0aW9uUmVMVUgAEj4KCWxlYWt5UmVMVRgP",
            "IAEoCzIpLkNvcmVNTC5TcGVjaWZpY2F0aW9uLkFjdGl2YXRpb25MZWFreVJl",
            "TFVIABJKCg90aHJlc2hvbGRlZFJlTFUYFCABKAsyLy5Db3JlTUwuU3BlY2lm",
            "aWNhdGlvbi5BY3RpdmF0aW9uVGhyZXNob2xkZWRSZUxVSAASNgoFUFJlTFUY",
            "GSABKAsyJS5Db3JlTUwuU3BlY2lmaWNhdGlvbi5BY3RpdmF0aW9uUFJlTFVI",
            "ABI0CgR0YW5oGB4gASgLMiQuQ29yZU1MLlNwZWNpZmljYXRpb24uQWN0aXZh",
            "dGlvblRhbmhIABJACgpzY2FsZWRUYW5oGB8gASgLMiouQ29yZU1MLlNwZWNp",
            "ZmljYXRpb24uQWN0aXZhdGlvblNjYWxlZFRhbmhIABI6CgdzaWdtb2lkGCgg",
            "ASgLMicuQ29yZU1MLlNwZWNpZmljYXRpb24uQWN0aXZhdGlvblNpZ21vaWRI",
            "ABJCCgtzaWdtb2lkSGFyZBgpIAEoCzIrLkNvcmVNTC5TcGVjaWZpY2F0aW9u",
            "LkFjdGl2YXRpb25TaWdtb2lkSGFyZEgAEjIKA0VMVRgyIAEoCzIjLkNvcmVN",
            "TC5TcGVjaWZpY2F0aW9uLkFjdGl2YXRpb25FTFVIABI8Cghzb2Z0c2lnbhg8",
            "IAEoCzIoLkNvcmVNTC5TcGVjaWZpY2F0aW9uLkFjdGl2YXRpb25Tb2Z0c2ln",
            "bkgAEjwKCHNvZnRwbHVzGEYgASgLMiguQ29yZU1MLlNwZWNpZmljYXRpb24u",
            "QWN0aXZhdGlvblNvZnRwbHVzSAASUAoScGFyYW1ldHJpY1NvZnRwbHVzGEcg",
            "ASgLMjIuQ29yZU1MLlNwZWNpZmljYXRpb24uQWN0aXZhdGlvblBhcmFtZXRy",
            "aWNTb2Z0cGx1c0gAQhIKEE5vbmxpbmVhcml0eVR5cGUijBMKEk5ldXJhbE5l",
            "dHdvcmtMYXllchIMCgRuYW1lGAEgASgJEg0KBWlucHV0GAIgAygJEg4KBm91",
            "dHB1dBgDIAMoCRJDCgtjb252b2x1dGlvbhhkIAEoCzIsLkNvcmVNTC5TcGVj",
            "aWZpY2F0aW9uLkNvbnZvbHV0aW9uTGF5ZXJQYXJhbXNIABI7Cgdwb29saW5n",
            "GHggASgLMiguQ29yZU1MLlNwZWNpZmljYXRpb24uUG9vbGluZ0xheWVyUGFy",
            "YW1zSAASPQoKYWN0aXZhdGlvbhiCASABKAsyJi5Db3JlTUwuU3BlY2lmaWNh",
            "dGlvbi5BY3RpdmF0aW9uUGFyYW1zSAASRgoMaW5uZXJQcm9kdWN0GIwBIAEo",
            "CzItLkNvcmVNTC5TcGVjaWZpY2F0aW9uLklubmVyUHJvZHVjdExheWVyUGFy",
            "YW1zSAASQAoJZW1iZWRkaW5nGJYBIAEoCzIqLkNvcmVNTC5TcGVjaWZpY2F0",
            "aW9uLkVtYmVkZGluZ0xheWVyUGFyYW1zSAASQAoJYmF0Y2hub3JtGKABIAEo",
            "CzIqLkNvcmVNTC5TcGVjaWZpY2F0aW9uLkJhdGNobm9ybUxheWVyUGFyYW1z",
            "SAASRgoDbXZuGKUBIAEoCzI2LkNvcmVNTC5TcGVjaWZpY2F0aW9uLk1lYW5W",
            "YXJpYW5jZU5vcm1hbGl6ZUxheWVyUGFyYW1zSAASRAoLbDJub3JtYWxpemUY",
            "qgEgASgLMiwuQ29yZU1MLlNwZWNpZmljYXRpb24uTDJOb3JtYWxpemVMYXll",
            "clBhcmFtc0gAEjwKB3NvZnRtYXgYrwEgASgLMiguQ29yZU1MLlNwZWNpZmlj",
            "YXRpb24uU29mdG1heExheWVyUGFyYW1zSAASNAoDbHJuGLQBIAEoCzIkLkNv",
            "cmVNTC5TcGVjaWZpY2F0aW9uLkxSTkxheWVyUGFyYW1zSAASNgoEY3JvcBi+",
            "ASABKAsyJS5Db3JlTUwuU3BlY2lmaWNhdGlvbi5Dcm9wTGF5ZXJQYXJhbXNI",
            "ABI8CgdwYWRkaW5nGMgBIAEoCzIoLkNvcmVNTC5TcGVjaWZpY2F0aW9uLlBh",
            "ZGRpbmdMYXllclBhcmFtc0gAEj4KCHVwc2FtcGxlGNIBIAEoCzIpLkNvcmVN",
            "TC5TcGVjaWZpY2F0aW9uLlVwc2FtcGxlTGF5ZXJQYXJhbXNIABJACgV1bmFy",
            "eRjcASABKAsyLi5Db3JlTUwuU3BlY2lmaWNhdGlvbi5VbmFyeUZ1bmN0aW9u",
            "TGF5ZXJQYXJhbXNIABI0CgNhZGQY5gEgASgLMiQuQ29yZU1MLlNwZWNpZmlj",
            "YXRpb24uQWRkTGF5ZXJQYXJhbXNIABI+CghtdWx0aXBseRjnASABKAsyKS5D",
            "b3JlTUwuU3BlY2lmaWNhdGlvbi5NdWx0aXBseUxheWVyUGFyYW1zSAASPAoH",
            "YXZlcmFnZRjwASABKAsyKC5Db3JlTUwuU3BlY2lmaWNhdGlvbi5BdmVyYWdl",
            "TGF5ZXJQYXJhbXNIABI4CgVzY2FsZRj1ASABKAsyJi5Db3JlTUwuU3BlY2lm",
            "aWNhdGlvbi5TY2FsZUxheWVyUGFyYW1zSAASNgoEYmlhcxj6ASABKAsyJS5D",
            "b3JlTUwuU3BlY2lmaWNhdGlvbi5CaWFzTGF5ZXJQYXJhbXNIABI0CgNtYXgY",
            "hAIgASgLMiQuQ29yZU1MLlNwZWNpZmljYXRpb24uTWF4TGF5ZXJQYXJhbXNI",
            "ABI0CgNtaW4YhQIgASgLMiQuQ29yZU1MLlNwZWNpZmljYXRpb24uTWluTGF5",
            "ZXJQYXJhbXNIABI7CgNkb3QYjgIgASgLMisuQ29yZU1MLlNwZWNpZmljYXRp",
            "b24uRG90UHJvZHVjdExheWVyUGFyYW1zSAASOgoGcmVkdWNlGJgCIAEoCzIn",
            "LkNvcmVNTC5TcGVjaWZpY2F0aW9uLlJlZHVjZUxheWVyUGFyYW1zSAASRgoM",
            "bG9hZENvbnN0YW50GKICIAEoCzItLkNvcmVNTC5TcGVjaWZpY2F0aW9uLkxv",
            "YWRDb25zdGFudExheWVyUGFyYW1zSAASPAoHcmVzaGFwZRisAiABKAsyKC5D",
            "b3JlTUwuU3BlY2lmaWNhdGlvbi5SZXNoYXBlTGF5ZXJQYXJhbXNIABI8Cgdm",
            "bGF0dGVuGK0CIAEoCzIoLkNvcmVNTC5TcGVjaWZpY2F0aW9uLkZsYXR0ZW5M",
            "YXllclBhcmFtc0gAEjwKB3Blcm11dGUYtgIgASgLMiguQ29yZU1MLlNwZWNp",
            "ZmljYXRpb24uUGVybXV0ZUxheWVyUGFyYW1zSAASOgoGY29uY2F0GMACIAEo",
            "CzInLkNvcmVNTC5TcGVjaWZpY2F0aW9uLkNvbmNhdExheWVyUGFyYW1zSAAS",
            "OAoFc3BsaXQYygIgASgLMiYuQ29yZU1MLlNwZWNpZmljYXRpb24uU3BsaXRM",
            "YXllclBhcmFtc0gAEkoKDnNlcXVlbmNlUmVwZWF0GNQCIAEoCzIvLkNvcmVN",
            "TC5TcGVjaWZpY2F0aW9uLlNlcXVlbmNlUmVwZWF0TGF5ZXJQYXJhbXNIABJK",
            "Cg5yZW9yZ2FuaXplRGF0YRjZAiABKAsyLy5Db3JlTUwuU3BlY2lmaWNhdGlv",
            "bi5SZW9yZ2FuaXplRGF0YUxheWVyUGFyYW1zSAASOAoFc2xpY2UY3gIgASgL",
            "MiYuQ29yZU1MLlNwZWNpZmljYXRpb24uU2xpY2VMYXllclBhcmFtc0gAEkwK",
            "D3NpbXBsZVJlY3VycmVudBiQAyABKAsyMC5Db3JlTUwuU3BlY2lmaWNhdGlv",
            "bi5TaW1wbGVSZWN1cnJlbnRMYXllclBhcmFtc0gAEjQKA2dydRiaAyABKAsy",
            "JC5Db3JlTUwuU3BlY2lmaWNhdGlvbi5HUlVMYXllclBhcmFtc0gAElIKEnVu",
            "aURpcmVjdGlvbmFsTFNUTRikAyABKAsyMy5Db3JlTUwuU3BlY2lmaWNhdGlv",
            "bi5VbmlEaXJlY3Rpb25hbExTVE1MYXllclBhcmFtc0gAElAKEWJpRGlyZWN0",
            "aW9uYWxMU1RNGK4DIAEoCzIyLkNvcmVNTC5TcGVjaWZpY2F0aW9uLkJpRGly",
            "ZWN0aW9uYWxMU1RNTGF5ZXJQYXJhbXNIABI6CgZjdXN0b20Y9AMgASgLMicu",
            "Q29yZU1MLlNwZWNpZmljYXRpb24uQ3VzdG9tTGF5ZXJQYXJhbXNIAEIHCgVs",
            "YXllciKOAQoNQm9yZGVyQW1vdW50cxJECg1ib3JkZXJBbW91bnRzGAogAygL",
            "Mi0uQ29yZU1MLlNwZWNpZmljYXRpb24uQm9yZGVyQW1vdW50cy5FZGdlU2l6",
            "ZXMaNwoJRWRnZVNpemVzEhUKDXN0YXJ0RWRnZVNpemUYASABKAQSEwoLZW5k",
            "RWRnZVNpemUYAiABKAQiSwoMVmFsaWRQYWRkaW5nEjsKDnBhZGRpbmdBbW91",
            "bnRzGAEgASgLMiMuQ29yZU1MLlNwZWNpZmljYXRpb24uQm9yZGVyQW1vdW50",
            "cyKWAQoLU2FtZVBhZGRpbmcSSAoNYXN5bW1ldHJ5TW9kZRgBIAEoDjIxLkNv",
            "cmVNTC5TcGVjaWZpY2F0aW9uLlNhbWVQYWRkaW5nLlNhbWVQYWRkaW5nTW9k",
            "ZSI9Cg9TYW1lUGFkZGluZ01vZGUSFgoSQk9UVE9NX1JJR0hUX0hFQVZZEAAS",
            "EgoOVE9QX0xFRlRfSEVBVlkQASKKAQoMV2VpZ2h0UGFyYW1zEhIKCmZsb2F0",
            "VmFsdWUYASADKAISFAoMZmxvYXQxNlZhbHVlGAIgASgMEhAKCHJhd1ZhbHVl",
            "GB4gASgMEj4KDHF1YW50aXphdGlvbhgoIAEoCzIoLkNvcmVNTC5TcGVjaWZp",
            "Y2F0aW9uLlF1YW50aXphdGlvblBhcmFtcyLkAQoSUXVhbnRpemF0aW9uUGFy",
            "YW1zEhQKDG51bWJlck9mQml0cxgBIAEoBBJMChJsaW5lYXJRdWFudGl6YXRp",
            "b24YZSABKAsyLi5Db3JlTUwuU3BlY2lmaWNhdGlvbi5MaW5lYXJRdWFudGl6",
            "YXRpb25QYXJhbXNIABJWChdsb29rdXBUYWJsZVF1YW50aXphdGlvbhhmIAEo",
            "CzIzLkNvcmVNTC5TcGVjaWZpY2F0aW9uLkxvb2tVcFRhYmxlUXVhbnRpemF0",
            "aW9uUGFyYW1zSABCEgoQUXVhbnRpemF0aW9uVHlwZSI3ChhMaW5lYXJRdWFu",
            "dGl6YXRpb25QYXJhbXMSDQoFc2NhbGUYASADKAISDAoEYmlhcxgCIAMoAiIz",
            "Ch1Mb29rVXBUYWJsZVF1YW50aXphdGlvblBhcmFtcxISCgpmbG9hdFZhbHVl",
            "GAEgAygCIr0DChZDb252b2x1dGlvbkxheWVyUGFyYW1zEhYKDm91dHB1dENo",
            "YW5uZWxzGAEgASgEEhYKDmtlcm5lbENoYW5uZWxzGAIgASgEEg8KB25Hcm91",
            "cHMYCiABKAQSEgoKa2VybmVsU2l6ZRgUIAMoBBIOCgZzdHJpZGUYHiADKAQS",
            "FgoOZGlsYXRpb25GYWN0b3IYKCADKAQSMwoFdmFsaWQYMiABKAsyIi5Db3Jl",
            "TUwuU3BlY2lmaWNhdGlvbi5WYWxpZFBhZGRpbmdIABIxCgRzYW1lGDMgASgL",
            "MiEuQ29yZU1MLlNwZWNpZmljYXRpb24uU2FtZVBhZGRpbmdIABIXCg9pc0Rl",
            "Y29udm9sdXRpb24YPCABKAgSDwoHaGFzQmlhcxhGIAEoCBIzCgd3ZWlnaHRz",
            "GFogASgLMiIuQ29yZU1MLlNwZWNpZmljYXRpb24uV2VpZ2h0UGFyYW1zEjAK",
            "BGJpYXMYWyABKAsyIi5Db3JlTUwuU3BlY2lmaWNhdGlvbi5XZWlnaHRQYXJh",
            "bXMSEwoLb3V0cHV0U2hhcGUYZCADKARCGAoWQ29udm9sdXRpb25QYWRkaW5n",
            "VHlwZSLAAQoXSW5uZXJQcm9kdWN0TGF5ZXJQYXJhbXMSFQoNaW5wdXRDaGFu",
            "bmVscxgBIAEoBBIWCg5vdXRwdXRDaGFubmVscxgCIAEoBBIPCgdoYXNCaWFz",
            "GAogASgIEjMKB3dlaWdodHMYFCABKAsyIi5Db3JlTUwuU3BlY2lmaWNhdGlv",
            "bi5XZWlnaHRQYXJhbXMSMAoEYmlhcxgVIAEoCzIiLkNvcmVNTC5TcGVjaWZp",
            "Y2F0aW9uLldlaWdodFBhcmFtcyK4AQoURW1iZWRkaW5nTGF5ZXJQYXJhbXMS",
            "EAoIaW5wdXREaW0YASABKAQSFgoOb3V0cHV0Q2hhbm5lbHMYAiABKAQSDwoH",
            "aGFzQmlhcxgKIAEoCBIzCgd3ZWlnaHRzGBQgASgLMiIuQ29yZU1MLlNwZWNp",
            "ZmljYXRpb24uV2VpZ2h0UGFyYW1zEjAKBGJpYXMYFSABKAsyIi5Db3JlTUwu",
            "U3BlY2lmaWNhdGlvbi5XZWlnaHRQYXJhbXMivQIKFEJhdGNobm9ybUxheWVy",
            "UGFyYW1zEhAKCGNoYW5uZWxzGAEgASgEEhYKDmNvbXB1dGVNZWFuVmFyGAUg",
            "ASgIEh0KFWluc3RhbmNlTm9ybWFsaXphdGlvbhgGIAEoCBIPCgdlcHNpbG9u",
            "GAogASgCEjEKBWdhbW1hGA8gASgLMiIuQ29yZU1MLlNwZWNpZmljYXRpb24u",
            "V2VpZ2h0UGFyYW1zEjAKBGJldGEYECABKAsyIi5Db3JlTUwuU3BlY2lmaWNh",
            "dGlvbi5XZWlnaHRQYXJhbXMSMAoEbWVhbhgRIAEoCzIiLkNvcmVNTC5TcGVj",
            "aWZpY2F0aW9uLldlaWdodFBhcmFtcxI0Cgh2YXJpYW5jZRgSIAEoCzIiLkNv",
            "cmVNTC5TcGVjaWZpY2F0aW9uLldlaWdodFBhcmFtcyLoAwoSUG9vbGluZ0xh",
            "eWVyUGFyYW1zEkIKBHR5cGUYASABKA4yNC5Db3JlTUwuU3BlY2lmaWNhdGlv",
            "bi5Qb29saW5nTGF5ZXJQYXJhbXMuUG9vbGluZ1R5cGUSEgoKa2VybmVsU2l6",
            "ZRgKIAMoBBIOCgZzdHJpZGUYFCADKAQSMwoFdmFsaWQYHiABKAsyIi5Db3Jl",
            "TUwuU3BlY2lmaWNhdGlvbi5WYWxpZFBhZGRpbmdIABIxCgRzYW1lGB8gASgL",
            "MiEuQ29yZU1MLlNwZWNpZmljYXRpb24uU2FtZVBhZGRpbmdIABJZChBpbmNs",
            "dWRlTGFzdFBpeGVsGCAgASgLMj0uQ29yZU1MLlNwZWNpZmljYXRpb24uUG9v",
            "bGluZ0xheWVyUGFyYW1zLlZhbGlkQ29tcGxldGVQYWRkaW5nSAASHQoVYXZn",
            "UG9vbEV4Y2x1ZGVQYWRkaW5nGDIgASgIEhUKDWdsb2JhbFBvb2xpbmcYPCAB",
            "KAgaLgoUVmFsaWRDb21wbGV0ZVBhZGRpbmcSFgoOcGFkZGluZ0Ftb3VudHMY",
            "CiADKAQiKwoLUG9vbGluZ1R5cGUSBwoDTUFYEAASCwoHQVZFUkFHRRABEgYK",
            "AkwyEAJCFAoSUG9vbGluZ1BhZGRpbmdUeXBlIqEDChJQYWRkaW5nTGF5ZXJQ",
            "YXJhbXMSTAoIY29uc3RhbnQYASABKAsyOC5Db3JlTUwuU3BlY2lmaWNhdGlv",
            "bi5QYWRkaW5nTGF5ZXJQYXJhbXMuUGFkZGluZ0NvbnN0YW50SAASUAoKcmVm",
            "bGVjdGlvbhgCIAEoCzI6LkNvcmVNTC5TcGVjaWZpY2F0aW9uLlBhZGRpbmdM",
            "YXllclBhcmFtcy5QYWRkaW5nUmVmbGVjdGlvbkgAElIKC3JlcGxpY2F0aW9u",
            "GAMgASgLMjsuQ29yZU1MLlNwZWNpZmljYXRpb24uUGFkZGluZ0xheWVyUGFy",
            "YW1zLlBhZGRpbmdSZXBsaWNhdGlvbkgAEjsKDnBhZGRpbmdBbW91bnRzGAog",
            "ASgLMiMuQ29yZU1MLlNwZWNpZmljYXRpb24uQm9yZGVyQW1vdW50cxogCg9Q",
            "YWRkaW5nQ29uc3RhbnQSDQoFdmFsdWUYASABKAIaEwoRUGFkZGluZ1JlZmxl",
            "Y3Rpb24aFAoSUGFkZGluZ1JlcGxpY2F0aW9uQg0KC1BhZGRpbmdUeXBlIisK",
            "EUNvbmNhdExheWVyUGFyYW1zEhYKDnNlcXVlbmNlQ29uY2F0GGQgASgIIksK",
            "DkxSTkxheWVyUGFyYW1zEg0KBWFscGhhGAEgASgCEgwKBGJldGEYAiABKAIS",
            "EQoJbG9jYWxTaXplGAMgASgEEgkKAWsYBCABKAIiFAoSU29mdG1heExheWVy",
            "UGFyYW1zIiQKEFNwbGl0TGF5ZXJQYXJhbXMSEAoIbk91dHB1dHMYASABKAQi",
            "HwoOQWRkTGF5ZXJQYXJhbXMSDQoFYWxwaGEYASABKAIiJAoTTXVsdGlwbHlM",
            "YXllclBhcmFtcxINCgVhbHBoYRgBIAEoAiKEAgoYVW5hcnlGdW5jdGlvbkxh",
            "eWVyUGFyYW1zEkYKBHR5cGUYASABKA4yOC5Db3JlTUwuU3BlY2lmaWNhdGlv",
            "bi5VbmFyeUZ1bmN0aW9uTGF5ZXJQYXJhbXMuT3BlcmF0aW9uEg0KBWFscGhh",
            "GAIgASgCEg8KB2Vwc2lsb24YAyABKAISDQoFc2hpZnQYBCABKAISDQoFc2Nh",
            "bGUYBSABKAIiYgoJT3BlcmF0aW9uEggKBFNRUlQQABIJCgVSU1FSVBABEgsK",
            "B0lOVkVSU0UQAhIJCgVQT1dFUhADEgcKA0VYUBAEEgcKA0xPRxAFEgcKA0FC",
            "UxAGEg0KCVRIUkVTSE9MRBAHIqIBChNVcHNhbXBsZUxheWVyUGFyYW1zEhUK",
            "DXNjYWxpbmdGYWN0b3IYASADKAQSSQoEbW9kZRgFIAEoDjI7LkNvcmVNTC5T",
            "cGVjaWZpY2F0aW9uLlVwc2FtcGxlTGF5ZXJQYXJhbXMuSW50ZXJwb2xhdGlv",
            "bk1vZGUiKQoRSW50ZXJwb2xhdGlvbk1vZGUSBgoCTk4QABIMCghCSUxJTkVB",
            "UhABIlIKD0JpYXNMYXllclBhcmFtcxINCgVzaGFwZRgBIAMoBBIwCgRiaWFz",
            "GAIgASgLMiIuQ29yZU1MLlNwZWNpZmljYXRpb24uV2VpZ2h0UGFyYW1zIq8B",
            "ChBTY2FsZUxheWVyUGFyYW1zEhIKCnNoYXBlU2NhbGUYASADKAQSMQoFc2Nh",
            "bGUYAiABKAsyIi5Db3JlTUwuU3BlY2lmaWNhdGlvbi5XZWlnaHRQYXJhbXMS",
            "DwoHaGFzQmlhcxgDIAEoCBIRCglzaGFwZUJpYXMYBCADKAQSMAoEYmlhcxgF",
            "IAEoCzIiLkNvcmVNTC5TcGVjaWZpY2F0aW9uLldlaWdodFBhcmFtcyJaChdM",
            "b2FkQ29uc3RhbnRMYXllclBhcmFtcxINCgVzaGFwZRgBIAMoBBIwCgRkYXRh",
            "GAIgASgLMiIuQ29yZU1MLlNwZWNpZmljYXRpb24uV2VpZ2h0UGFyYW1zIikK",
            "FkwyTm9ybWFsaXplTGF5ZXJQYXJhbXMSDwoHZXBzaWxvbhgBIAEoAiKOAQoS",
            "RmxhdHRlbkxheWVyUGFyYW1zEkMKBG1vZGUYASABKA4yNS5Db3JlTUwuU3Bl",
            "Y2lmaWNhdGlvbi5GbGF0dGVuTGF5ZXJQYXJhbXMuRmxhdHRlbk9yZGVyIjMK",
            "DEZsYXR0ZW5PcmRlchIRCg1DSEFOTkVMX0ZJUlNUEAASEAoMQ0hBTk5FTF9M",
            "QVNUEAEiowEKElJlc2hhcGVMYXllclBhcmFtcxITCgt0YXJnZXRTaGFwZRgB",
            "IAMoAxJDCgRtb2RlGAIgASgOMjUuQ29yZU1MLlNwZWNpZmljYXRpb24uUmVz",
            "aGFwZUxheWVyUGFyYW1zLlJlc2hhcGVPcmRlciIzCgxSZXNoYXBlT3JkZXIS",
            "EQoNQ0hBTk5FTF9GSVJTVBAAEhAKDENIQU5ORUxfTEFTVBABIiIKElBlcm11",
            "dGVMYXllclBhcmFtcxIMCgRheGlzGAEgAygEIr4BChlSZW9yZ2FuaXplRGF0",
            "YUxheWVyUGFyYW1zElAKBG1vZGUYASABKA4yQi5Db3JlTUwuU3BlY2lmaWNh",
            "dGlvbi5SZW9yZ2FuaXplRGF0YUxheWVyUGFyYW1zLlJlb3JnYW5pemF0aW9u",
            "VHlwZRIRCglibG9ja1NpemUYAiABKAQiPAoSUmVvcmdhbml6YXRpb25UeXBl",
            "EhIKDlNQQUNFX1RPX0RFUFRIEAASEgoOREVQVEhfVE9fU1BBQ0UQASLIAQoQ",
            "U2xpY2VMYXllclBhcmFtcxISCgpzdGFydEluZGV4GAEgASgDEhAKCGVuZElu",
            "ZGV4GAIgASgDEg4KBnN0cmlkZRgDIAEoBBI+CgRheGlzGAQgASgOMjAuQ29y",
            "ZU1MLlNwZWNpZmljYXRpb24uU2xpY2VMYXllclBhcmFtcy5TbGljZUF4aXMi",
            "PgoJU2xpY2VBeGlzEhAKDENIQU5ORUxfQVhJUxAAEg8KC0hFSUdIVF9BWElT",
            "EAESDgoKV0lEVEhfQVhJUxACItkCChFSZWR1Y2VMYXllclBhcmFtcxJFCgRt",
            "b2RlGAEgASgOMjcuQ29yZU1MLlNwZWNpZmljYXRpb24uUmVkdWNlTGF5ZXJQ",
            "YXJhbXMuUmVkdWNlT3BlcmF0aW9uEg8KB2Vwc2lsb24YAiABKAISQAoEYXhp",
            "cxgDIAEoDjIyLkNvcmVNTC5TcGVjaWZpY2F0aW9uLlJlZHVjZUxheWVyUGFy",
            "YW1zLlJlZHVjZUF4aXMidgoPUmVkdWNlT3BlcmF0aW9uEgcKA1NVTRAAEgcK",
            "A0FWRxABEggKBFBST0QQAhIKCgZMT0dTVU0QAxINCglTVU1TUVVBUkUQBBIG",
            "CgJMMRAFEgYKAkwyEAYSBwoDTUFYEAcSBwoDTUlOEAgSCgoGQVJHTUFYEAki",
            "MgoKUmVkdWNlQXhpcxIHCgNDSFcQABIGCgJIVxABEgUKAUMQAhIFCgFIEAMS",
            "BQoBVxAEIlsKD0Nyb3BMYXllclBhcmFtcxI4Cgtjcm9wQW1vdW50cxgBIAEo",
            "CzIjLkNvcmVNTC5TcGVjaWZpY2F0aW9uLkJvcmRlckFtb3VudHMSDgoGb2Zm",
            "c2V0GAUgAygEIhQKEkF2ZXJhZ2VMYXllclBhcmFtcyIQCg5NYXhMYXllclBh",
            "cmFtcyIQCg5NaW5MYXllclBhcmFtcyIxChVEb3RQcm9kdWN0TGF5ZXJQYXJh",
            "bXMSGAoQY29zaW5lU2ltaWxhcml0eRgBIAEoCCJmCiBNZWFuVmFyaWFuY2VO",
            "b3JtYWxpemVMYXllclBhcmFtcxIWCg5hY3Jvc3NDaGFubmVscxgBIAEoCBIZ",
            "ChFub3JtYWxpemVWYXJpYW5jZRgCIAEoCBIPCgdlcHNpbG9uGAMgASgCIjEK",
            "GVNlcXVlbmNlUmVwZWF0TGF5ZXJQYXJhbXMSFAoMblJlcGV0aXRpb25zGAEg",
            "ASgEIv8CChpTaW1wbGVSZWN1cnJlbnRMYXllclBhcmFtcxIXCg9pbnB1dFZl",
            "Y3RvclNpemUYASABKAQSGAoQb3V0cHV0VmVjdG9yU2l6ZRgCIAEoBBI6Cgph",
            "Y3RpdmF0aW9uGAogASgLMiYuQ29yZU1MLlNwZWNpZmljYXRpb24uQWN0aXZh",
            "dGlvblBhcmFtcxIWCg5zZXF1ZW5jZU91dHB1dBgPIAEoCBIVCg1oYXNCaWFz",
            "VmVjdG9yGBQgASgIEjgKDHdlaWdodE1hdHJpeBgeIAEoCzIiLkNvcmVNTC5T",
            "cGVjaWZpY2F0aW9uLldlaWdodFBhcmFtcxI7Cg9yZWN1cnNpb25NYXRyaXgY",
            "HyABKAsyIi5Db3JlTUwuU3BlY2lmaWNhdGlvbi5XZWlnaHRQYXJhbXMSNgoK",
            "Ymlhc1ZlY3RvchggIAEoCzIiLkNvcmVNTC5TcGVjaWZpY2F0aW9uLldlaWdo",
            "dFBhcmFtcxIUCgxyZXZlcnNlSW5wdXQYZCABKAgiqgYKDkdSVUxheWVyUGFy",
            "YW1zEhcKD2lucHV0VmVjdG9yU2l6ZRgBIAEoBBIYChBvdXRwdXRWZWN0b3JT",
            "aXplGAIgASgEEjsKC2FjdGl2YXRpb25zGAogAygLMiYuQ29yZU1MLlNwZWNp",
            "ZmljYXRpb24uQWN0aXZhdGlvblBhcmFtcxIWCg5zZXF1ZW5jZU91dHB1dBgP",
            "IAEoCBIWCg5oYXNCaWFzVmVjdG9ycxgUIAEoCBJCChZ1cGRhdGVHYXRlV2Vp",
            "Z2h0TWF0cml4GB4gASgLMiIuQ29yZU1MLlNwZWNpZmljYXRpb24uV2VpZ2h0",
            "UGFyYW1zEkEKFXJlc2V0R2F0ZVdlaWdodE1hdHJpeBgfIAEoCzIiLkNvcmVN",
            "TC5TcGVjaWZpY2F0aW9uLldlaWdodFBhcmFtcxJCChZvdXRwdXRHYXRlV2Vp",
            "Z2h0TWF0cml4GCAgASgLMiIuQ29yZU1MLlNwZWNpZmljYXRpb24uV2VpZ2h0",
            "UGFyYW1zEkUKGXVwZGF0ZUdhdGVSZWN1cnNpb25NYXRyaXgYMiABKAsyIi5D",
            "b3JlTUwuU3BlY2lmaWNhdGlvbi5XZWlnaHRQYXJhbXMSRAoYcmVzZXRHYXRl",
            "UmVjdXJzaW9uTWF0cml4GDMgASgLMiIuQ29yZU1MLlNwZWNpZmljYXRpb24u",
            "V2VpZ2h0UGFyYW1zEkUKGW91dHB1dEdhdGVSZWN1cnNpb25NYXRyaXgYNCAB",
            "KAsyIi5Db3JlTUwuU3BlY2lmaWNhdGlvbi5XZWlnaHRQYXJhbXMSQAoUdXBk",
            "YXRlR2F0ZUJpYXNWZWN0b3IYRiABKAsyIi5Db3JlTUwuU3BlY2lmaWNhdGlv",
            "bi5XZWlnaHRQYXJhbXMSPwoTcmVzZXRHYXRlQmlhc1ZlY3RvchhHIAEoCzIi",
            "LkNvcmVNTC5TcGVjaWZpY2F0aW9uLldlaWdodFBhcmFtcxJAChRvdXRwdXRH",
            "YXRlQmlhc1ZlY3RvchhIIAEoCzIiLkNvcmVNTC5TcGVjaWZpY2F0aW9uLldl",
            "aWdodFBhcmFtcxIUCgxyZXZlcnNlSW5wdXQYZCABKAgiqgEKCkxTVE1QYXJh",
            "bXMSFgoOc2VxdWVuY2VPdXRwdXQYCiABKAgSFgoOaGFzQmlhc1ZlY3RvcnMY",
            "FCABKAgSEgoKZm9yZ2V0QmlhcxgeIAEoCBIaChJoYXNQZWVwaG9sZVZlY3Rv",
            "cnMYKCABKAgSIQoZY291cGxlZElucHV0QW5kRm9yZ2V0R2F0ZRgyIAEoCBIZ",
            "ChFjZWxsQ2xpcFRocmVzaG9sZBg8IAEoAiKUCAoQTFNUTVdlaWdodFBhcmFt",
            "cxJBChVpbnB1dEdhdGVXZWlnaHRNYXRyaXgYASABKAsyIi5Db3JlTUwuU3Bl",
            "Y2lmaWNhdGlvbi5XZWlnaHRQYXJhbXMSQgoWZm9yZ2V0R2F0ZVdlaWdodE1h",
            "dHJpeBgCIAEoCzIiLkNvcmVNTC5TcGVjaWZpY2F0aW9uLldlaWdodFBhcmFt",
            "cxJCChZibG9ja0lucHV0V2VpZ2h0TWF0cml4GAMgASgLMiIuQ29yZU1MLlNw",
            "ZWNpZmljYXRpb24uV2VpZ2h0UGFyYW1zEkIKFm91dHB1dEdhdGVXZWlnaHRN",
            "YXRyaXgYBCABKAsyIi5Db3JlTUwuU3BlY2lmaWNhdGlvbi5XZWlnaHRQYXJh",
            "bXMSRAoYaW5wdXRHYXRlUmVjdXJzaW9uTWF0cml4GBQgASgLMiIuQ29yZU1M",
            "LlNwZWNpZmljYXRpb24uV2VpZ2h0UGFyYW1zEkUKGWZvcmdldEdhdGVSZWN1",
            "cnNpb25NYXRyaXgYFSABKAsyIi5Db3JlTUwuU3BlY2lmaWNhdGlvbi5XZWln",
            "aHRQYXJhbXMSRQoZYmxvY2tJbnB1dFJlY3Vyc2lvbk1hdHJpeBgWIAEoCzIi",
            "LkNvcmVNTC5TcGVjaWZpY2F0aW9uLldlaWdodFBhcmFtcxJFChlvdXRwdXRH",
            "YXRlUmVjdXJzaW9uTWF0cml4GBcgASgLMiIuQ29yZU1MLlNwZWNpZmljYXRp",
            "b24uV2VpZ2h0UGFyYW1zEj8KE2lucHV0R2F0ZUJpYXNWZWN0b3IYKCABKAsy",
            "Ii5Db3JlTUwuU3BlY2lmaWNhdGlvbi5XZWlnaHRQYXJhbXMSQAoUZm9yZ2V0",
            "R2F0ZUJpYXNWZWN0b3IYKSABKAsyIi5Db3JlTUwuU3BlY2lmaWNhdGlvbi5X",
            "ZWlnaHRQYXJhbXMSQAoUYmxvY2tJbnB1dEJpYXNWZWN0b3IYKiABKAsyIi5D",
            "b3JlTUwuU3BlY2lmaWNhdGlvbi5XZWlnaHRQYXJhbXMSQAoUb3V0cHV0R2F0",
            "ZUJpYXNWZWN0b3IYKyABKAsyIi5Db3JlTUwuU3BlY2lmaWNhdGlvbi5XZWln",
            "aHRQYXJhbXMSQwoXaW5wdXRHYXRlUGVlcGhvbGVWZWN0b3IYPCABKAsyIi5D",
            "b3JlTUwuU3BlY2lmaWNhdGlvbi5XZWlnaHRQYXJhbXMSRAoYZm9yZ2V0R2F0",
            "ZVBlZXBob2xlVmVjdG9yGD0gASgLMiIuQ29yZU1MLlNwZWNpZmljYXRpb24u",
            "V2VpZ2h0UGFyYW1zEkQKGG91dHB1dEdhdGVQZWVwaG9sZVZlY3Rvchg+IAEo",
            "CzIiLkNvcmVNTC5TcGVjaWZpY2F0aW9uLldlaWdodFBhcmFtcyKVAgodVW5p",
            "RGlyZWN0aW9uYWxMU1RNTGF5ZXJQYXJhbXMSFwoPaW5wdXRWZWN0b3JTaXpl",
            "GAEgASgEEhgKEG91dHB1dFZlY3RvclNpemUYAiABKAQSOwoLYWN0aXZhdGlv",
            "bnMYCiADKAsyJi5Db3JlTUwuU3BlY2lmaWNhdGlvbi5BY3RpdmF0aW9uUGFy",
            "YW1zEjAKBnBhcmFtcxgPIAEoCzIgLkNvcmVNTC5TcGVjaWZpY2F0aW9uLkxT",
            "VE1QYXJhbXMSPAoMd2VpZ2h0UGFyYW1zGBQgASgLMiYuQ29yZU1MLlNwZWNp",
            "ZmljYXRpb24uTFNUTVdlaWdodFBhcmFtcxIUCgxyZXZlcnNlSW5wdXQYZCAB",
            "KAgi0gIKHEJpRGlyZWN0aW9uYWxMU1RNTGF5ZXJQYXJhbXMSFwoPaW5wdXRW",
            "ZWN0b3JTaXplGAEgASgEEhgKEG91dHB1dFZlY3RvclNpemUYAiABKAQSRgoW",
            "YWN0aXZhdGlvbnNGb3J3YXJkTFNUTRgKIAMoCzImLkNvcmVNTC5TcGVjaWZp",
            "Y2F0aW9uLkFjdGl2YXRpb25QYXJhbXMSRwoXYWN0aXZhdGlvbnNCYWNrd2Fy",
            "ZExTVE0YCyADKAsyJi5Db3JlTUwuU3BlY2lmaWNhdGlvbi5BY3RpdmF0aW9u",
            "UGFyYW1zEjAKBnBhcmFtcxgPIAEoCzIgLkNvcmVNTC5TcGVjaWZpY2F0aW9u",
            "LkxTVE1QYXJhbXMSPAoMd2VpZ2h0UGFyYW1zGBQgAygLMiYuQ29yZU1MLlNw",
            "ZWNpZmljYXRpb24uTFNUTVdlaWdodFBhcmFtcyK+AwoRQ3VzdG9tTGF5ZXJQ",
            "YXJhbXMSEQoJY2xhc3NOYW1lGAogASgJEjMKB3dlaWdodHMYFCADKAsyIi5D",
            "b3JlTUwuU3BlY2lmaWNhdGlvbi5XZWlnaHRQYXJhbXMSSwoKcGFyYW1ldGVy",
            "cxgeIAMoCzI3LkNvcmVNTC5TcGVjaWZpY2F0aW9uLkN1c3RvbUxheWVyUGFy",
            "YW1zLlBhcmFtZXRlcnNFbnRyeRITCgtkZXNjcmlwdGlvbhgoIAEoCRqMAQoV",
            "Q3VzdG9tTGF5ZXJQYXJhbVZhbHVlEhUKC2RvdWJsZVZhbHVlGAogASgBSAAS",
            "FQoLc3RyaW5nVmFsdWUYFCABKAlIABISCghpbnRWYWx1ZRgeIAEoBUgAEhMK",
            "CWxvbmdWYWx1ZRgoIAEoA0gAEhMKCWJvb2xWYWx1ZRgyIAEoCEgAQgcKBXZh",
            "bHVlGnAKD1BhcmFtZXRlcnNFbnRyeRILCgNrZXkYASABKAkSTAoFdmFsdWUY",
            "AiABKAsyPS5Db3JlTUwuU3BlY2lmaWNhdGlvbi5DdXN0b21MYXllclBhcmFt",
            "cy5DdXN0b21MYXllclBhcmFtVmFsdWU6AjgBIs8CChdOZXVyYWxOZXR3b3Jr",
            "Q2xhc3NpZmllchI4CgZsYXllcnMYASADKAsyKC5Db3JlTUwuU3BlY2lmaWNh",
            "dGlvbi5OZXVyYWxOZXR3b3JrTGF5ZXISRwoNcHJlcHJvY2Vzc2luZxgCIAMo",
            "CzIwLkNvcmVNTC5TcGVjaWZpY2F0aW9uLk5ldXJhbE5ldHdvcmtQcmVwcm9j",
            "ZXNzaW5nEj8KEXN0cmluZ0NsYXNzTGFiZWxzGGQgASgLMiIuQ29yZU1MLlNw",
            "ZWNpZmljYXRpb24uU3RyaW5nVmVjdG9ySAASPQoQaW50NjRDbGFzc0xhYmVs",
            "cxhlIAEoCzIhLkNvcmVNTC5TcGVjaWZpY2F0aW9uLkludDY0VmVjdG9ySAAS",
            "IgoZbGFiZWxQcm9iYWJpbGl0eUxheWVyTmFtZRjIASABKAlCDQoLQ2xhc3NM",
            "YWJlbHMimwEKFk5ldXJhbE5ldHdvcmtSZWdyZXNzb3ISOAoGbGF5ZXJzGAEg",
            "AygLMiguQ29yZU1MLlNwZWNpZmljYXRpb24uTmV1cmFsTmV0d29ya0xheWVy",
            "EkcKDXByZXByb2Nlc3NpbmcYAiADKAsyMC5Db3JlTUwuU3BlY2lmaWNhdGlv",
            "bi5OZXVyYWxOZXR3b3JrUHJlcHJvY2Vzc2luZ0ICSANQAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::CoreML.Specification.DataStructuresReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.NeuralNetwork), global::CoreML.Specification.NeuralNetwork.Parser, new[]{ "Layers", "Preprocessing" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.NeuralNetworkImageScaler), global::CoreML.Specification.NeuralNetworkImageScaler.Parser, new[]{ "ChannelScale", "BlueBias", "GreenBias", "RedBias", "GrayBias" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.NeuralNetworkMeanImage), global::CoreML.Specification.NeuralNetworkMeanImage.Parser, new[]{ "MeanImage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.NeuralNetworkPreprocessing), global::CoreML.Specification.NeuralNetworkPreprocessing.Parser, new[]{ "FeatureName", "Scaler", "MeanImage" }, new[]{ "Preprocessor" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ActivationReLU), global::CoreML.Specification.ActivationReLU.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ActivationLeakyReLU), global::CoreML.Specification.ActivationLeakyReLU.Parser, new[]{ "Alpha" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ActivationTanh), global::CoreML.Specification.ActivationTanh.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ActivationScaledTanh), global::CoreML.Specification.ActivationScaledTanh.Parser, new[]{ "Alpha", "Beta" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ActivationSigmoid), global::CoreML.Specification.ActivationSigmoid.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ActivationLinear), global::CoreML.Specification.ActivationLinear.Parser, new[]{ "Alpha", "Beta" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ActivationSigmoidHard), global::CoreML.Specification.ActivationSigmoidHard.Parser, new[]{ "Alpha", "Beta" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ActivationPReLU), global::CoreML.Specification.ActivationPReLU.Parser, new[]{ "Alpha" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ActivationELU), global::CoreML.Specification.ActivationELU.Parser, new[]{ "Alpha" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ActivationThresholdedReLU), global::CoreML.Specification.ActivationThresholdedReLU.Parser, new[]{ "Alpha" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ActivationSoftsign), global::CoreML.Specification.ActivationSoftsign.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ActivationSoftplus), global::CoreML.Specification.ActivationSoftplus.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ActivationParametricSoftplus), global::CoreML.Specification.ActivationParametricSoftplus.Parser, new[]{ "Alpha", "Beta" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ActivationParams), global::CoreML.Specification.ActivationParams.Parser, new[]{ "Linear", "ReLU", "LeakyReLU", "ThresholdedReLU", "PReLU", "Tanh", "ScaledTanh", "Sigmoid", "SigmoidHard", "ELU", "Softsign", "Softplus", "ParametricSoftplus" }, new[]{ "NonlinearityType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.NeuralNetworkLayer), global::CoreML.Specification.NeuralNetworkLayer.Parser, new[]{ "Name", "Input", "Output", "Convolution", "Pooling", "Activation", "InnerProduct", "Embedding", "Batchnorm", "Mvn", "L2Normalize", "Softmax", "Lrn", "Crop", "Padding", "Upsample", "Unary", "Add", "Multiply", "Average", "Scale", "Bias", "Max", "Min", "Dot", "Reduce", "LoadConstant", "Reshape", "Flatten", "Permute", "Concat", "Split", "SequenceRepeat", "ReorganizeData", "Slice", "SimpleRecurrent", "Gru", "UniDirectionalLSTM", "BiDirectionalLSTM", "Custom" }, new[]{ "Layer" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.BorderAmounts), global::CoreML.Specification.BorderAmounts.Parser, new[]{ "BorderAmounts_" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.BorderAmounts.Types.EdgeSizes), global::CoreML.Specification.BorderAmounts.Types.EdgeSizes.Parser, new[]{ "StartEdgeSize", "EndEdgeSize" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ValidPadding), global::CoreML.Specification.ValidPadding.Parser, new[]{ "PaddingAmounts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.SamePadding), global::CoreML.Specification.SamePadding.Parser, new[]{ "AsymmetryMode" }, null, new[]{ typeof(global::CoreML.Specification.SamePadding.Types.SamePaddingMode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.WeightParams), global::CoreML.Specification.WeightParams.Parser, new[]{ "FloatValue", "Float16Value", "RawValue", "Quantization" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.QuantizationParams), global::CoreML.Specification.QuantizationParams.Parser, new[]{ "NumberOfBits", "LinearQuantization", "LookupTableQuantization" }, new[]{ "QuantizationType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.LinearQuantizationParams), global::CoreML.Specification.LinearQuantizationParams.Parser, new[]{ "Scale", "Bias" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.LookUpTableQuantizationParams), global::CoreML.Specification.LookUpTableQuantizationParams.Parser, new[]{ "FloatValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ConvolutionLayerParams), global::CoreML.Specification.ConvolutionLayerParams.Parser, new[]{ "OutputChannels", "KernelChannels", "NGroups", "KernelSize", "Stride", "DilationFactor", "Valid", "Same", "IsDeconvolution", "HasBias", "Weights", "Bias", "OutputShape" }, new[]{ "ConvolutionPaddingType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.InnerProductLayerParams), global::CoreML.Specification.InnerProductLayerParams.Parser, new[]{ "InputChannels", "OutputChannels", "HasBias", "Weights", "Bias" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.EmbeddingLayerParams), global::CoreML.Specification.EmbeddingLayerParams.Parser, new[]{ "InputDim", "OutputChannels", "HasBias", "Weights", "Bias" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.BatchnormLayerParams), global::CoreML.Specification.BatchnormLayerParams.Parser, new[]{ "Channels", "ComputeMeanVar", "InstanceNormalization", "Epsilon", "Gamma", "Beta", "Mean", "Variance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.PoolingLayerParams), global::CoreML.Specification.PoolingLayerParams.Parser, new[]{ "Type", "KernelSize", "Stride", "Valid", "Same", "IncludeLastPixel", "AvgPoolExcludePadding", "GlobalPooling" }, new[]{ "PoolingPaddingType" }, new[]{ typeof(global::CoreML.Specification.PoolingLayerParams.Types.PoolingType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.PoolingLayerParams.Types.ValidCompletePadding), global::CoreML.Specification.PoolingLayerParams.Types.ValidCompletePadding.Parser, new[]{ "PaddingAmounts" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.PaddingLayerParams), global::CoreML.Specification.PaddingLayerParams.Parser, new[]{ "Constant", "Reflection", "Replication", "PaddingAmounts" }, new[]{ "PaddingType" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.PaddingLayerParams.Types.PaddingConstant), global::CoreML.Specification.PaddingLayerParams.Types.PaddingConstant.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.PaddingLayerParams.Types.PaddingReflection), global::CoreML.Specification.PaddingLayerParams.Types.PaddingReflection.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.PaddingLayerParams.Types.PaddingReplication), global::CoreML.Specification.PaddingLayerParams.Types.PaddingReplication.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ConcatLayerParams), global::CoreML.Specification.ConcatLayerParams.Parser, new[]{ "SequenceConcat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.LRNLayerParams), global::CoreML.Specification.LRNLayerParams.Parser, new[]{ "Alpha", "Beta", "LocalSize", "K" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.SoftmaxLayerParams), global::CoreML.Specification.SoftmaxLayerParams.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.SplitLayerParams), global::CoreML.Specification.SplitLayerParams.Parser, new[]{ "NOutputs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.AddLayerParams), global::CoreML.Specification.AddLayerParams.Parser, new[]{ "Alpha" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.MultiplyLayerParams), global::CoreML.Specification.MultiplyLayerParams.Parser, new[]{ "Alpha" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.UnaryFunctionLayerParams), global::CoreML.Specification.UnaryFunctionLayerParams.Parser, new[]{ "Type", "Alpha", "Epsilon", "Shift", "Scale" }, null, new[]{ typeof(global::CoreML.Specification.UnaryFunctionLayerParams.Types.Operation) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.UpsampleLayerParams), global::CoreML.Specification.UpsampleLayerParams.Parser, new[]{ "ScalingFactor", "Mode" }, null, new[]{ typeof(global::CoreML.Specification.UpsampleLayerParams.Types.InterpolationMode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.BiasLayerParams), global::CoreML.Specification.BiasLayerParams.Parser, new[]{ "Shape", "Bias" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ScaleLayerParams), global::CoreML.Specification.ScaleLayerParams.Parser, new[]{ "ShapeScale", "Scale", "HasBias", "ShapeBias", "Bias" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.LoadConstantLayerParams), global::CoreML.Specification.LoadConstantLayerParams.Parser, new[]{ "Shape", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.L2NormalizeLayerParams), global::CoreML.Specification.L2NormalizeLayerParams.Parser, new[]{ "Epsilon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.FlattenLayerParams), global::CoreML.Specification.FlattenLayerParams.Parser, new[]{ "Mode" }, null, new[]{ typeof(global::CoreML.Specification.FlattenLayerParams.Types.FlattenOrder) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ReshapeLayerParams), global::CoreML.Specification.ReshapeLayerParams.Parser, new[]{ "TargetShape", "Mode" }, null, new[]{ typeof(global::CoreML.Specification.ReshapeLayerParams.Types.ReshapeOrder) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.PermuteLayerParams), global::CoreML.Specification.PermuteLayerParams.Parser, new[]{ "Axis" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ReorganizeDataLayerParams), global::CoreML.Specification.ReorganizeDataLayerParams.Parser, new[]{ "Mode", "BlockSize" }, null, new[]{ typeof(global::CoreML.Specification.ReorganizeDataLayerParams.Types.ReorganizationType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.SliceLayerParams), global::CoreML.Specification.SliceLayerParams.Parser, new[]{ "StartIndex", "EndIndex", "Stride", "Axis" }, null, new[]{ typeof(global::CoreML.Specification.SliceLayerParams.Types.SliceAxis) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.ReduceLayerParams), global::CoreML.Specification.ReduceLayerParams.Parser, new[]{ "Mode", "Epsilon", "Axis" }, null, new[]{ typeof(global::CoreML.Specification.ReduceLayerParams.Types.ReduceOperation), typeof(global::CoreML.Specification.ReduceLayerParams.Types.ReduceAxis) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.CropLayerParams), global::CoreML.Specification.CropLayerParams.Parser, new[]{ "CropAmounts", "Offset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.AverageLayerParams), global::CoreML.Specification.AverageLayerParams.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.MaxLayerParams), global::CoreML.Specification.MaxLayerParams.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.MinLayerParams), global::CoreML.Specification.MinLayerParams.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.DotProductLayerParams), global::CoreML.Specification.DotProductLayerParams.Parser, new[]{ "CosineSimilarity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.MeanVarianceNormalizeLayerParams), global::CoreML.Specification.MeanVarianceNormalizeLayerParams.Parser, new[]{ "AcrossChannels", "NormalizeVariance", "Epsilon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.SequenceRepeatLayerParams), global::CoreML.Specification.SequenceRepeatLayerParams.Parser, new[]{ "NRepetitions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.SimpleRecurrentLayerParams), global::CoreML.Specification.SimpleRecurrentLayerParams.Parser, new[]{ "InputVectorSize", "OutputVectorSize", "Activation", "SequenceOutput", "HasBiasVector", "WeightMatrix", "RecursionMatrix", "BiasVector", "ReverseInput" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.GRULayerParams), global::CoreML.Specification.GRULayerParams.Parser, new[]{ "InputVectorSize", "OutputVectorSize", "Activations", "SequenceOutput", "HasBiasVectors", "UpdateGateWeightMatrix", "ResetGateWeightMatrix", "OutputGateWeightMatrix", "UpdateGateRecursionMatrix", "ResetGateRecursionMatrix", "OutputGateRecursionMatrix", "UpdateGateBiasVector", "ResetGateBiasVector", "OutputGateBiasVector", "ReverseInput" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.LSTMParams), global::CoreML.Specification.LSTMParams.Parser, new[]{ "SequenceOutput", "HasBiasVectors", "ForgetBias", "HasPeepholeVectors", "CoupledInputAndForgetGate", "CellClipThreshold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.LSTMWeightParams), global::CoreML.Specification.LSTMWeightParams.Parser, new[]{ "InputGateWeightMatrix", "ForgetGateWeightMatrix", "BlockInputWeightMatrix", "OutputGateWeightMatrix", "InputGateRecursionMatrix", "ForgetGateRecursionMatrix", "BlockInputRecursionMatrix", "OutputGateRecursionMatrix", "InputGateBiasVector", "ForgetGateBiasVector", "BlockInputBiasVector", "OutputGateBiasVector", "InputGatePeepholeVector", "ForgetGatePeepholeVector", "OutputGatePeepholeVector" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.UniDirectionalLSTMLayerParams), global::CoreML.Specification.UniDirectionalLSTMLayerParams.Parser, new[]{ "InputVectorSize", "OutputVectorSize", "Activations", "Params", "WeightParams", "ReverseInput" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.BiDirectionalLSTMLayerParams), global::CoreML.Specification.BiDirectionalLSTMLayerParams.Parser, new[]{ "InputVectorSize", "OutputVectorSize", "ActivationsForwardLSTM", "ActivationsBackwardLSTM", "Params", "WeightParams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.CustomLayerParams), global::CoreML.Specification.CustomLayerParams.Parser, new[]{ "ClassName", "Weights", "Parameters", "Description" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.CustomLayerParams.Types.CustomLayerParamValue), global::CoreML.Specification.CustomLayerParams.Types.CustomLayerParamValue.Parser, new[]{ "DoubleValue", "StringValue", "IntValue", "LongValue", "BoolValue" }, new[]{ "Value" }, null, null),
            null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.NeuralNetworkClassifier), global::CoreML.Specification.NeuralNetworkClassifier.Parser, new[]{ "Layers", "Preprocessing", "StringClassLabels", "Int64ClassLabels", "LabelProbabilityLayerName" }, new[]{ "ClassLabels" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.NeuralNetworkRegressor), global::CoreML.Specification.NeuralNetworkRegressor.Parser, new[]{ "Layers", "Preprocessing" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  ///A neural network.
  /// </summary>
  public sealed partial class NeuralNetwork : pb::IMessage<NeuralNetwork> {
    private static readonly pb::MessageParser<NeuralNetwork> _parser = new pb::MessageParser<NeuralNetwork>(() => new NeuralNetwork());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NeuralNetwork> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeuralNetwork() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeuralNetwork(NeuralNetwork other) : this() {
      layers_ = other.layers_.Clone();
      preprocessing_ = other.preprocessing_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeuralNetwork Clone() {
      return new NeuralNetwork(this);
    }

    /// <summary>Field number for the "layers" field.</summary>
    public const int LayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CoreML.Specification.NeuralNetworkLayer> _repeated_layers_codec
        = pb::FieldCodec.ForMessage(10, global::CoreML.Specification.NeuralNetworkLayer.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.NeuralNetworkLayer> layers_ = new pbc::RepeatedField<global::CoreML.Specification.NeuralNetworkLayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.NeuralNetworkLayer> Layers {
      get { return layers_; }
    }

    /// <summary>Field number for the "preprocessing" field.</summary>
    public const int PreprocessingFieldNumber = 2;
    private static readonly pb::FieldCodec<global::CoreML.Specification.NeuralNetworkPreprocessing> _repeated_preprocessing_codec
        = pb::FieldCodec.ForMessage(18, global::CoreML.Specification.NeuralNetworkPreprocessing.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.NeuralNetworkPreprocessing> preprocessing_ = new pbc::RepeatedField<global::CoreML.Specification.NeuralNetworkPreprocessing>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.NeuralNetworkPreprocessing> Preprocessing {
      get { return preprocessing_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NeuralNetwork);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NeuralNetwork other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!layers_.Equals(other.layers_)) return false;
      if(!preprocessing_.Equals(other.preprocessing_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= layers_.GetHashCode();
      hash ^= preprocessing_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      layers_.WriteTo(output, _repeated_layers_codec);
      preprocessing_.WriteTo(output, _repeated_preprocessing_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += layers_.CalculateSize(_repeated_layers_codec);
      size += preprocessing_.CalculateSize(_repeated_preprocessing_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NeuralNetwork other) {
      if (other == null) {
        return;
      }
      layers_.Add(other.layers_);
      preprocessing_.Add(other.preprocessing_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            layers_.AddEntriesFrom(input, _repeated_layers_codec);
            break;
          }
          case 18: {
            preprocessing_.AddEntriesFrom(input, _repeated_preprocessing_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A neural network preprocessor that
  /// performs a scalar multiplication of an image
  /// followed by addition of scalar biases to the channels.
  ///
  /// Input: X
  ///    An image in BGR or RGB format with shape ``[3, H, W]``
  ///    or in grayscale format with shape ``[1, H, W]``.
  /// Output: Y
  ///    An image with format and shape corresponding to the input.
  ///
  /// If the input image is in BGR format:
  ///
  /// .. code::
  ///
  ///     Y[0, :, :] = channelScale * X[0, :, :] + blueBias
  ///     Y[1, :, :] = channelScale * X[1, :, :] + greenBias
  ///     Y[2, :, :] = channelScale * X[2, :, :] + redBias
  ///
  /// If the input image is in RGB format:
  ///
  /// .. code::
  ///
  ///     Y[0, :, :] = channelScale * X[0, :, :] + redBias
  ///     Y[1, :, :] = channelScale * X[1, :, :] + greenBias
  ///     Y[2, :, :] = channelScale * X[2, :, :] + blueBias
  ///
  /// If the input image is in grayscale format:
  ///
  /// .. code::
  ///
  ///     Y[0, :, :] = channelScale * X[0, :, :] + grayBias
  /// </summary>
  public sealed partial class NeuralNetworkImageScaler : pb::IMessage<NeuralNetworkImageScaler> {
    private static readonly pb::MessageParser<NeuralNetworkImageScaler> _parser = new pb::MessageParser<NeuralNetworkImageScaler>(() => new NeuralNetworkImageScaler());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NeuralNetworkImageScaler> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeuralNetworkImageScaler() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeuralNetworkImageScaler(NeuralNetworkImageScaler other) : this() {
      channelScale_ = other.channelScale_;
      blueBias_ = other.blueBias_;
      greenBias_ = other.greenBias_;
      redBias_ = other.redBias_;
      grayBias_ = other.grayBias_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeuralNetworkImageScaler Clone() {
      return new NeuralNetworkImageScaler(this);
    }

    /// <summary>Field number for the "channelScale" field.</summary>
    public const int ChannelScaleFieldNumber = 10;
    private float channelScale_;
    /// <summary>
    ////Scalar to be multiplied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChannelScale {
      get { return channelScale_; }
      set {
        channelScale_ = value;
      }
    }

    /// <summary>Field number for the "blueBias" field.</summary>
    public const int BlueBiasFieldNumber = 20;
    private float blueBias_;
    /// <summary>
    ////Scalar blue bias to be added.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BlueBias {
      get { return blueBias_; }
      set {
        blueBias_ = value;
      }
    }

    /// <summary>Field number for the "greenBias" field.</summary>
    public const int GreenBiasFieldNumber = 21;
    private float greenBias_;
    /// <summary>
    ////Scalar green bias to be added.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GreenBias {
      get { return greenBias_; }
      set {
        greenBias_ = value;
      }
    }

    /// <summary>Field number for the "redBias" field.</summary>
    public const int RedBiasFieldNumber = 22;
    private float redBias_;
    /// <summary>
    ////Scalar red bias to be added.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RedBias {
      get { return redBias_; }
      set {
        redBias_ = value;
      }
    }

    /// <summary>Field number for the "grayBias" field.</summary>
    public const int GrayBiasFieldNumber = 30;
    private float grayBias_;
    /// <summary>
    ////Scalar bias to be added for grayscale images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GrayBias {
      get { return grayBias_; }
      set {
        grayBias_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NeuralNetworkImageScaler);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NeuralNetworkImageScaler other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChannelScale, other.ChannelScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BlueBias, other.BlueBias)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GreenBias, other.GreenBias)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RedBias, other.RedBias)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GrayBias, other.GrayBias)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChannelScale);
      if (BlueBias != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BlueBias);
      if (GreenBias != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GreenBias);
      if (RedBias != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RedBias);
      if (GrayBias != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GrayBias);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelScale != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(ChannelScale);
      }
      if (BlueBias != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(BlueBias);
      }
      if (GreenBias != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(GreenBias);
      }
      if (RedBias != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(RedBias);
      }
      if (GrayBias != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(GrayBias);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelScale != 0F) {
        size += 1 + 4;
      }
      if (BlueBias != 0F) {
        size += 2 + 4;
      }
      if (GreenBias != 0F) {
        size += 2 + 4;
      }
      if (RedBias != 0F) {
        size += 2 + 4;
      }
      if (GrayBias != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NeuralNetworkImageScaler other) {
      if (other == null) {
        return;
      }
      if (other.ChannelScale != 0F) {
        ChannelScale = other.ChannelScale;
      }
      if (other.BlueBias != 0F) {
        BlueBias = other.BlueBias;
      }
      if (other.GreenBias != 0F) {
        GreenBias = other.GreenBias;
      }
      if (other.RedBias != 0F) {
        RedBias = other.RedBias;
      }
      if (other.GrayBias != 0F) {
        GrayBias = other.GrayBias;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 85: {
            ChannelScale = input.ReadFloat();
            break;
          }
          case 165: {
            BlueBias = input.ReadFloat();
            break;
          }
          case 173: {
            GreenBias = input.ReadFloat();
            break;
          }
          case 181: {
            RedBias = input.ReadFloat();
            break;
          }
          case 245: {
            GrayBias = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A neural network preprocessor that
  /// subtracts the provided mean image from the input image.
  /// The mean image is subtracted from the input named
  /// ``NeuralNetworkPreprocessing.featureName``.
  /// </summary>
  public sealed partial class NeuralNetworkMeanImage : pb::IMessage<NeuralNetworkMeanImage> {
    private static readonly pb::MessageParser<NeuralNetworkMeanImage> _parser = new pb::MessageParser<NeuralNetworkMeanImage>(() => new NeuralNetworkMeanImage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NeuralNetworkMeanImage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeuralNetworkMeanImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeuralNetworkMeanImage(NeuralNetworkMeanImage other) : this() {
      meanImage_ = other.meanImage_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeuralNetworkMeanImage Clone() {
      return new NeuralNetworkMeanImage(this);
    }

    /// <summary>Field number for the "meanImage" field.</summary>
    public const int MeanImageFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_meanImage_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> meanImage_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///*
    /// Mean image stored as a flattened array of floats,
    /// representing shape [Channel,Height,Width].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> MeanImage {
      get { return meanImage_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NeuralNetworkMeanImage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NeuralNetworkMeanImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!meanImage_.Equals(other.meanImage_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= meanImage_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      meanImage_.WriteTo(output, _repeated_meanImage_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += meanImage_.CalculateSize(_repeated_meanImage_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NeuralNetworkMeanImage other) {
      if (other == null) {
        return;
      }
      meanImage_.Add(other.meanImage_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            meanImage_.AddEntriesFrom(input, _repeated_meanImage_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// Preprocessing parameters for image inputs.
  /// </summary>
  public sealed partial class NeuralNetworkPreprocessing : pb::IMessage<NeuralNetworkPreprocessing> {
    private static readonly pb::MessageParser<NeuralNetworkPreprocessing> _parser = new pb::MessageParser<NeuralNetworkPreprocessing>(() => new NeuralNetworkPreprocessing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NeuralNetworkPreprocessing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeuralNetworkPreprocessing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeuralNetworkPreprocessing(NeuralNetworkPreprocessing other) : this() {
      featureName_ = other.featureName_;
      switch (other.PreprocessorCase) {
        case PreprocessorOneofCase.Scaler:
          Scaler = other.Scaler.Clone();
          break;
        case PreprocessorOneofCase.MeanImage:
          MeanImage = other.MeanImage.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeuralNetworkPreprocessing Clone() {
      return new NeuralNetworkPreprocessing(this);
    }

    /// <summary>Field number for the "featureName" field.</summary>
    public const int FeatureNameFieldNumber = 1;
    private string featureName_ = "";
    /// <summary>
    //// must be equal to the input name to which the preprocessing is applied
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FeatureName {
      get { return featureName_; }
      set {
        featureName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scaler" field.</summary>
    public const int ScalerFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.NeuralNetworkImageScaler Scaler {
      get { return preprocessorCase_ == PreprocessorOneofCase.Scaler ? (global::CoreML.Specification.NeuralNetworkImageScaler) preprocessor_ : null; }
      set {
        preprocessor_ = value;
        preprocessorCase_ = value == null ? PreprocessorOneofCase.None : PreprocessorOneofCase.Scaler;
      }
    }

    /// <summary>Field number for the "meanImage" field.</summary>
    public const int MeanImageFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.NeuralNetworkMeanImage MeanImage {
      get { return preprocessorCase_ == PreprocessorOneofCase.MeanImage ? (global::CoreML.Specification.NeuralNetworkMeanImage) preprocessor_ : null; }
      set {
        preprocessor_ = value;
        preprocessorCase_ = value == null ? PreprocessorOneofCase.None : PreprocessorOneofCase.MeanImage;
      }
    }

    private object preprocessor_;
    /// <summary>Enum of possible cases for the "preprocessor" oneof.</summary>
    public enum PreprocessorOneofCase {
      None = 0,
      Scaler = 10,
      MeanImage = 11,
    }
    private PreprocessorOneofCase preprocessorCase_ = PreprocessorOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreprocessorOneofCase PreprocessorCase {
      get { return preprocessorCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPreprocessor() {
      preprocessorCase_ = PreprocessorOneofCase.None;
      preprocessor_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NeuralNetworkPreprocessing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NeuralNetworkPreprocessing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FeatureName != other.FeatureName) return false;
      if (!object.Equals(Scaler, other.Scaler)) return false;
      if (!object.Equals(MeanImage, other.MeanImage)) return false;
      if (PreprocessorCase != other.PreprocessorCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FeatureName.Length != 0) hash ^= FeatureName.GetHashCode();
      if (preprocessorCase_ == PreprocessorOneofCase.Scaler) hash ^= Scaler.GetHashCode();
      if (preprocessorCase_ == PreprocessorOneofCase.MeanImage) hash ^= MeanImage.GetHashCode();
      hash ^= (int) preprocessorCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FeatureName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FeatureName);
      }
      if (preprocessorCase_ == PreprocessorOneofCase.Scaler) {
        output.WriteRawTag(82);
        output.WriteMessage(Scaler);
      }
      if (preprocessorCase_ == PreprocessorOneofCase.MeanImage) {
        output.WriteRawTag(90);
        output.WriteMessage(MeanImage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FeatureName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureName);
      }
      if (preprocessorCase_ == PreprocessorOneofCase.Scaler) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scaler);
      }
      if (preprocessorCase_ == PreprocessorOneofCase.MeanImage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeanImage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NeuralNetworkPreprocessing other) {
      if (other == null) {
        return;
      }
      if (other.FeatureName.Length != 0) {
        FeatureName = other.FeatureName;
      }
      switch (other.PreprocessorCase) {
        case PreprocessorOneofCase.Scaler:
          if (Scaler == null) {
            Scaler = new global::CoreML.Specification.NeuralNetworkImageScaler();
          }
          Scaler.MergeFrom(other.Scaler);
          break;
        case PreprocessorOneofCase.MeanImage:
          if (MeanImage == null) {
            MeanImage = new global::CoreML.Specification.NeuralNetworkMeanImage();
          }
          MeanImage.MergeFrom(other.MeanImage);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FeatureName = input.ReadString();
            break;
          }
          case 82: {
            global::CoreML.Specification.NeuralNetworkImageScaler subBuilder = new global::CoreML.Specification.NeuralNetworkImageScaler();
            if (preprocessorCase_ == PreprocessorOneofCase.Scaler) {
              subBuilder.MergeFrom(Scaler);
            }
            input.ReadMessage(subBuilder);
            Scaler = subBuilder;
            break;
          }
          case 90: {
            global::CoreML.Specification.NeuralNetworkMeanImage subBuilder = new global::CoreML.Specification.NeuralNetworkMeanImage();
            if (preprocessorCase_ == PreprocessorOneofCase.MeanImage) {
              subBuilder.MergeFrom(MeanImage);
            }
            input.ReadMessage(subBuilder);
            MeanImage = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A rectified linear unit (ReLU) activation function.
  ///
  /// This function has the following formula:
  ///
  /// .. math::
  ///     f(x) = \text{max}(0, x)
  /// </summary>
  public sealed partial class ActivationReLU : pb::IMessage<ActivationReLU> {
    private static readonly pb::MessageParser<ActivationReLU> _parser = new pb::MessageParser<ActivationReLU>(() => new ActivationReLU());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivationReLU> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationReLU() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationReLU(ActivationReLU other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationReLU Clone() {
      return new ActivationReLU(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivationReLU);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivationReLU other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivationReLU other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A leaky rectified linear unit (ReLU) activation function.
  ///
  /// This function has the following formula:
  ///
  /// .. math::
  ///     f(x) = \begin{cases}
  ///             x      &amp; \text{if } x \geq 0 \\
  ///             \alpha x &amp; \text{if } x &lt; 0
  ///            \end{cases}
  /// </summary>
  public sealed partial class ActivationLeakyReLU : pb::IMessage<ActivationLeakyReLU> {
    private static readonly pb::MessageParser<ActivationLeakyReLU> _parser = new pb::MessageParser<ActivationLeakyReLU>(() => new ActivationLeakyReLU());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivationLeakyReLU> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationLeakyReLU() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationLeakyReLU(ActivationLeakyReLU other) : this() {
      alpha_ = other.alpha_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationLeakyReLU Clone() {
      return new ActivationLeakyReLU(this);
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 1;
    private float alpha_;
    /// <summary>
    ///negative slope value for leakyReLU
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivationLeakyReLU);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivationLeakyReLU other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Alpha != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Alpha);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivationLeakyReLU other) {
      if (other == null) {
        return;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Alpha = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A hyperbolic tangent activation function.
  ///
  /// This function has the following formula:
  ///
  /// .. math::
  ///     f(x) = \dfrac{1 - e^{-2x}}{1 + e^{-2x}}
  /// </summary>
  public sealed partial class ActivationTanh : pb::IMessage<ActivationTanh> {
    private static readonly pb::MessageParser<ActivationTanh> _parser = new pb::MessageParser<ActivationTanh>(() => new ActivationTanh());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivationTanh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationTanh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationTanh(ActivationTanh other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationTanh Clone() {
      return new ActivationTanh(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivationTanh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivationTanh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivationTanh other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A scaled hyperbolic tangent activation function.
  ///
  /// This function has the following formula:
  ///
  /// .. math::
  ///     f(x) = \alpha \tanh(\beta x)
  /// </summary>
  public sealed partial class ActivationScaledTanh : pb::IMessage<ActivationScaledTanh> {
    private static readonly pb::MessageParser<ActivationScaledTanh> _parser = new pb::MessageParser<ActivationScaledTanh>(() => new ActivationScaledTanh());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivationScaledTanh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationScaledTanh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationScaledTanh(ActivationScaledTanh other) : this() {
      alpha_ = other.alpha_;
      beta_ = other.beta_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationScaledTanh Clone() {
      return new ActivationScaledTanh(this);
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 1;
    private float alpha_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    /// <summary>Field number for the "beta" field.</summary>
    public const int BetaFieldNumber = 2;
    private float beta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Beta {
      get { return beta_; }
      set {
        beta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivationScaledTanh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivationScaledTanh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Beta, other.Beta)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
      if (Beta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Beta);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Alpha != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Alpha);
      }
      if (Beta != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Beta);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (Beta != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivationScaledTanh other) {
      if (other == null) {
        return;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      if (other.Beta != 0F) {
        Beta = other.Beta;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Alpha = input.ReadFloat();
            break;
          }
          case 21: {
            Beta = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A sigmoid activation function.
  ///
  /// This function has the following formula:
  ///
  /// .. math::
  ///     f(x) = \dfrac{1}{1 + e^{-x}}
  /// </summary>
  public sealed partial class ActivationSigmoid : pb::IMessage<ActivationSigmoid> {
    private static readonly pb::MessageParser<ActivationSigmoid> _parser = new pb::MessageParser<ActivationSigmoid>(() => new ActivationSigmoid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivationSigmoid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationSigmoid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationSigmoid(ActivationSigmoid other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationSigmoid Clone() {
      return new ActivationSigmoid(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivationSigmoid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivationSigmoid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivationSigmoid other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A linear activation function.
  ///
  /// This function has the following formula:
  ///
  /// .. math::
  ///     f(x) = \alpha x + \beta
  /// </summary>
  public sealed partial class ActivationLinear : pb::IMessage<ActivationLinear> {
    private static readonly pb::MessageParser<ActivationLinear> _parser = new pb::MessageParser<ActivationLinear>(() => new ActivationLinear());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivationLinear> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationLinear() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationLinear(ActivationLinear other) : this() {
      alpha_ = other.alpha_;
      beta_ = other.beta_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationLinear Clone() {
      return new ActivationLinear(this);
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 1;
    private float alpha_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    /// <summary>Field number for the "beta" field.</summary>
    public const int BetaFieldNumber = 2;
    private float beta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Beta {
      get { return beta_; }
      set {
        beta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivationLinear);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivationLinear other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Beta, other.Beta)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
      if (Beta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Beta);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Alpha != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Alpha);
      }
      if (Beta != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Beta);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (Beta != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivationLinear other) {
      if (other == null) {
        return;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      if (other.Beta != 0F) {
        Beta = other.Beta;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Alpha = input.ReadFloat();
            break;
          }
          case 21: {
            Beta = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A hard sigmoid activation function.
  ///
  /// This function has the following formula:
  ///
  /// .. math::
  ///     f(x) = \text{min}(\text{max}(\alpha x + \beta, 0), 1)
  /// </summary>
  public sealed partial class ActivationSigmoidHard : pb::IMessage<ActivationSigmoidHard> {
    private static readonly pb::MessageParser<ActivationSigmoidHard> _parser = new pb::MessageParser<ActivationSigmoidHard>(() => new ActivationSigmoidHard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivationSigmoidHard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationSigmoidHard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationSigmoidHard(ActivationSigmoidHard other) : this() {
      alpha_ = other.alpha_;
      beta_ = other.beta_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationSigmoidHard Clone() {
      return new ActivationSigmoidHard(this);
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 1;
    private float alpha_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    /// <summary>Field number for the "beta" field.</summary>
    public const int BetaFieldNumber = 2;
    private float beta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Beta {
      get { return beta_; }
      set {
        beta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivationSigmoidHard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivationSigmoidHard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Beta, other.Beta)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
      if (Beta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Beta);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Alpha != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Alpha);
      }
      if (Beta != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Beta);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (Beta != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivationSigmoidHard other) {
      if (other == null) {
        return;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      if (other.Beta != 0F) {
        Beta = other.Beta;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Alpha = input.ReadFloat();
            break;
          }
          case 21: {
            Beta = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A parameterized rectified linear unit (PReLU) activation function,
  /// which takes ``[C]`` or ``[C,H,W]`` as an input and
  /// applies different parameters in each channel dimension
  /// (shared across the ``H`` and ``W`` components).
  ///
  /// This function has the following formula:
  ///
  /// .. math::
  ///    f(x_i) = \begin{cases}
  ///                 x_i          &amp; \text{if } x_i \geq 0 \\
  ///                 \alpha_i x_i &amp; \text{if } x_i &lt; 0
  ///             \end{cases} \;,\;i=1,...,C
  /// </summary>
  public sealed partial class ActivationPReLU : pb::IMessage<ActivationPReLU> {
    private static readonly pb::MessageParser<ActivationPReLU> _parser = new pb::MessageParser<ActivationPReLU>(() => new ActivationPReLU());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivationPReLU> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationPReLU() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationPReLU(ActivationPReLU other) : this() {
      alpha_ = other.alpha_ != null ? other.alpha_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationPReLU Clone() {
      return new ActivationPReLU(this);
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 1;
    private global::CoreML.Specification.WeightParams alpha_;
    /// <summary>
    /// parameter of length C or 1.
    /// If length is 1, same value is used for all channels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivationPReLU);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivationPReLU other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Alpha, other.Alpha)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (alpha_ != null) hash ^= Alpha.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (alpha_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Alpha);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (alpha_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Alpha);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivationPReLU other) {
      if (other == null) {
        return;
      }
      if (other.alpha_ != null) {
        if (alpha_ == null) {
          alpha_ = new global::CoreML.Specification.WeightParams();
        }
        Alpha.MergeFrom(other.Alpha);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (alpha_ == null) {
              alpha_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(alpha_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// An exponential linear unit (ELU) activation function.
  ///
  /// This function has the following formula:
  ///
  /// .. math::
  ///     f(x) = \begin{cases}
  ///             x              &amp; \text{if } x \geq 0 \\
  ///             \alpha (e^x - 1) &amp; \text{if } x &lt; 0
  ///            \end{cases}
  /// </summary>
  public sealed partial class ActivationELU : pb::IMessage<ActivationELU> {
    private static readonly pb::MessageParser<ActivationELU> _parser = new pb::MessageParser<ActivationELU>(() => new ActivationELU());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivationELU> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationELU() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationELU(ActivationELU other) : this() {
      alpha_ = other.alpha_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationELU Clone() {
      return new ActivationELU(this);
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 1;
    private float alpha_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivationELU);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivationELU other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Alpha != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Alpha);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivationELU other) {
      if (other == null) {
        return;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Alpha = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A thresholded rectified linear unit (ReLU) activation function.
  ///
  /// This function has the following formula:
  ///
  /// .. math::
  ///     f(x) = \begin{cases}
  ///             x &amp; \text{if } x \geq \alpha \\
  ///             0 &amp; \text{if } x &lt; \alpha
  ///            \end{cases}
  /// </summary>
  public sealed partial class ActivationThresholdedReLU : pb::IMessage<ActivationThresholdedReLU> {
    private static readonly pb::MessageParser<ActivationThresholdedReLU> _parser = new pb::MessageParser<ActivationThresholdedReLU>(() => new ActivationThresholdedReLU());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivationThresholdedReLU> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationThresholdedReLU() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationThresholdedReLU(ActivationThresholdedReLU other) : this() {
      alpha_ = other.alpha_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationThresholdedReLU Clone() {
      return new ActivationThresholdedReLU(this);
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 1;
    private float alpha_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivationThresholdedReLU);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivationThresholdedReLU other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Alpha != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Alpha);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivationThresholdedReLU other) {
      if (other == null) {
        return;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Alpha = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A softsign activation function.
  ///
  /// This function has the following formula:
  ///
  /// .. math::
  ///     f(x) = \dfrac{x}{1 + |x|}
  /// </summary>
  public sealed partial class ActivationSoftsign : pb::IMessage<ActivationSoftsign> {
    private static readonly pb::MessageParser<ActivationSoftsign> _parser = new pb::MessageParser<ActivationSoftsign>(() => new ActivationSoftsign());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivationSoftsign> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationSoftsign() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationSoftsign(ActivationSoftsign other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationSoftsign Clone() {
      return new ActivationSoftsign(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivationSoftsign);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivationSoftsign other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivationSoftsign other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A softplus activation function.
  ///
  /// This function has the following formula:
  ///
  /// .. math::
  ///     f(x) = \text{log}(1 + e^x)
  /// </summary>
  public sealed partial class ActivationSoftplus : pb::IMessage<ActivationSoftplus> {
    private static readonly pb::MessageParser<ActivationSoftplus> _parser = new pb::MessageParser<ActivationSoftplus>(() => new ActivationSoftplus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivationSoftplus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationSoftplus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationSoftplus(ActivationSoftplus other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationSoftplus Clone() {
      return new ActivationSoftplus(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivationSoftplus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivationSoftplus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivationSoftplus other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A parametric softplus activation function,
  /// which takes ``[C]`` or ``[C,H,W]`` as an input and
  /// applies different parameters in each channel dimension
  /// (shared across the ``H`` and ``W`` components).
  ///
  /// This function has the following formula:
  ///
  /// .. math::
  ///     f(x_i) = \alpha_i \text{log}(1 + e^{\beta_i x_i}) \;,\;i=1,...,C
  /// </summary>
  public sealed partial class ActivationParametricSoftplus : pb::IMessage<ActivationParametricSoftplus> {
    private static readonly pb::MessageParser<ActivationParametricSoftplus> _parser = new pb::MessageParser<ActivationParametricSoftplus>(() => new ActivationParametricSoftplus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivationParametricSoftplus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationParametricSoftplus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationParametricSoftplus(ActivationParametricSoftplus other) : this() {
      alpha_ = other.alpha_ != null ? other.alpha_.Clone() : null;
      beta_ = other.beta_ != null ? other.beta_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationParametricSoftplus Clone() {
      return new ActivationParametricSoftplus(this);
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 1;
    private global::CoreML.Specification.WeightParams alpha_;
    /// <summary>
    /// If length is 1, same value is used for all channels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    /// <summary>Field number for the "beta" field.</summary>
    public const int BetaFieldNumber = 2;
    private global::CoreML.Specification.WeightParams beta_;
    /// <summary>
    ///parameter of length C or 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams Beta {
      get { return beta_; }
      set {
        beta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivationParametricSoftplus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivationParametricSoftplus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Alpha, other.Alpha)) return false;
      if (!object.Equals(Beta, other.Beta)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (alpha_ != null) hash ^= Alpha.GetHashCode();
      if (beta_ != null) hash ^= Beta.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (alpha_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Alpha);
      }
      if (beta_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Beta);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (alpha_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Alpha);
      }
      if (beta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Beta);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivationParametricSoftplus other) {
      if (other == null) {
        return;
      }
      if (other.alpha_ != null) {
        if (alpha_ == null) {
          alpha_ = new global::CoreML.Specification.WeightParams();
        }
        Alpha.MergeFrom(other.Alpha);
      }
      if (other.beta_ != null) {
        if (beta_ == null) {
          beta_ = new global::CoreML.Specification.WeightParams();
        }
        Beta.MergeFrom(other.Beta);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (alpha_ == null) {
              alpha_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(alpha_);
            break;
          }
          case 18: {
            if (beta_ == null) {
              beta_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(beta_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActivationParams : pb::IMessage<ActivationParams> {
    private static readonly pb::MessageParser<ActivationParams> _parser = new pb::MessageParser<ActivationParams>(() => new ActivationParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivationParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationParams(ActivationParams other) : this() {
      switch (other.NonlinearityTypeCase) {
        case NonlinearityTypeOneofCase.Linear:
          Linear = other.Linear.Clone();
          break;
        case NonlinearityTypeOneofCase.ReLU:
          ReLU = other.ReLU.Clone();
          break;
        case NonlinearityTypeOneofCase.LeakyReLU:
          LeakyReLU = other.LeakyReLU.Clone();
          break;
        case NonlinearityTypeOneofCase.ThresholdedReLU:
          ThresholdedReLU = other.ThresholdedReLU.Clone();
          break;
        case NonlinearityTypeOneofCase.PReLU:
          PReLU = other.PReLU.Clone();
          break;
        case NonlinearityTypeOneofCase.Tanh:
          Tanh = other.Tanh.Clone();
          break;
        case NonlinearityTypeOneofCase.ScaledTanh:
          ScaledTanh = other.ScaledTanh.Clone();
          break;
        case NonlinearityTypeOneofCase.Sigmoid:
          Sigmoid = other.Sigmoid.Clone();
          break;
        case NonlinearityTypeOneofCase.SigmoidHard:
          SigmoidHard = other.SigmoidHard.Clone();
          break;
        case NonlinearityTypeOneofCase.ELU:
          ELU = other.ELU.Clone();
          break;
        case NonlinearityTypeOneofCase.Softsign:
          Softsign = other.Softsign.Clone();
          break;
        case NonlinearityTypeOneofCase.Softplus:
          Softplus = other.Softplus.Clone();
          break;
        case NonlinearityTypeOneofCase.ParametricSoftplus:
          ParametricSoftplus = other.ParametricSoftplus.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationParams Clone() {
      return new ActivationParams(this);
    }

    /// <summary>Field number for the "linear" field.</summary>
    public const int LinearFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ActivationLinear Linear {
      get { return nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Linear ? (global::CoreML.Specification.ActivationLinear) nonlinearityType_ : null; }
      set {
        nonlinearityType_ = value;
        nonlinearityTypeCase_ = value == null ? NonlinearityTypeOneofCase.None : NonlinearityTypeOneofCase.Linear;
      }
    }

    /// <summary>Field number for the "ReLU" field.</summary>
    public const int ReLUFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ActivationReLU ReLU {
      get { return nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ReLU ? (global::CoreML.Specification.ActivationReLU) nonlinearityType_ : null; }
      set {
        nonlinearityType_ = value;
        nonlinearityTypeCase_ = value == null ? NonlinearityTypeOneofCase.None : NonlinearityTypeOneofCase.ReLU;
      }
    }

    /// <summary>Field number for the "leakyReLU" field.</summary>
    public const int LeakyReLUFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ActivationLeakyReLU LeakyReLU {
      get { return nonlinearityTypeCase_ == NonlinearityTypeOneofCase.LeakyReLU ? (global::CoreML.Specification.ActivationLeakyReLU) nonlinearityType_ : null; }
      set {
        nonlinearityType_ = value;
        nonlinearityTypeCase_ = value == null ? NonlinearityTypeOneofCase.None : NonlinearityTypeOneofCase.LeakyReLU;
      }
    }

    /// <summary>Field number for the "thresholdedReLU" field.</summary>
    public const int ThresholdedReLUFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ActivationThresholdedReLU ThresholdedReLU {
      get { return nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ThresholdedReLU ? (global::CoreML.Specification.ActivationThresholdedReLU) nonlinearityType_ : null; }
      set {
        nonlinearityType_ = value;
        nonlinearityTypeCase_ = value == null ? NonlinearityTypeOneofCase.None : NonlinearityTypeOneofCase.ThresholdedReLU;
      }
    }

    /// <summary>Field number for the "PReLU" field.</summary>
    public const int PReLUFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ActivationPReLU PReLU {
      get { return nonlinearityTypeCase_ == NonlinearityTypeOneofCase.PReLU ? (global::CoreML.Specification.ActivationPReLU) nonlinearityType_ : null; }
      set {
        nonlinearityType_ = value;
        nonlinearityTypeCase_ = value == null ? NonlinearityTypeOneofCase.None : NonlinearityTypeOneofCase.PReLU;
      }
    }

    /// <summary>Field number for the "tanh" field.</summary>
    public const int TanhFieldNumber = 30;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ActivationTanh Tanh {
      get { return nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Tanh ? (global::CoreML.Specification.ActivationTanh) nonlinearityType_ : null; }
      set {
        nonlinearityType_ = value;
        nonlinearityTypeCase_ = value == null ? NonlinearityTypeOneofCase.None : NonlinearityTypeOneofCase.Tanh;
      }
    }

    /// <summary>Field number for the "scaledTanh" field.</summary>
    public const int ScaledTanhFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ActivationScaledTanh ScaledTanh {
      get { return nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ScaledTanh ? (global::CoreML.Specification.ActivationScaledTanh) nonlinearityType_ : null; }
      set {
        nonlinearityType_ = value;
        nonlinearityTypeCase_ = value == null ? NonlinearityTypeOneofCase.None : NonlinearityTypeOneofCase.ScaledTanh;
      }
    }

    /// <summary>Field number for the "sigmoid" field.</summary>
    public const int SigmoidFieldNumber = 40;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ActivationSigmoid Sigmoid {
      get { return nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Sigmoid ? (global::CoreML.Specification.ActivationSigmoid) nonlinearityType_ : null; }
      set {
        nonlinearityType_ = value;
        nonlinearityTypeCase_ = value == null ? NonlinearityTypeOneofCase.None : NonlinearityTypeOneofCase.Sigmoid;
      }
    }

    /// <summary>Field number for the "sigmoidHard" field.</summary>
    public const int SigmoidHardFieldNumber = 41;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ActivationSigmoidHard SigmoidHard {
      get { return nonlinearityTypeCase_ == NonlinearityTypeOneofCase.SigmoidHard ? (global::CoreML.Specification.ActivationSigmoidHard) nonlinearityType_ : null; }
      set {
        nonlinearityType_ = value;
        nonlinearityTypeCase_ = value == null ? NonlinearityTypeOneofCase.None : NonlinearityTypeOneofCase.SigmoidHard;
      }
    }

    /// <summary>Field number for the "ELU" field.</summary>
    public const int ELUFieldNumber = 50;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ActivationELU ELU {
      get { return nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ELU ? (global::CoreML.Specification.ActivationELU) nonlinearityType_ : null; }
      set {
        nonlinearityType_ = value;
        nonlinearityTypeCase_ = value == null ? NonlinearityTypeOneofCase.None : NonlinearityTypeOneofCase.ELU;
      }
    }

    /// <summary>Field number for the "softsign" field.</summary>
    public const int SoftsignFieldNumber = 60;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ActivationSoftsign Softsign {
      get { return nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Softsign ? (global::CoreML.Specification.ActivationSoftsign) nonlinearityType_ : null; }
      set {
        nonlinearityType_ = value;
        nonlinearityTypeCase_ = value == null ? NonlinearityTypeOneofCase.None : NonlinearityTypeOneofCase.Softsign;
      }
    }

    /// <summary>Field number for the "softplus" field.</summary>
    public const int SoftplusFieldNumber = 70;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ActivationSoftplus Softplus {
      get { return nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Softplus ? (global::CoreML.Specification.ActivationSoftplus) nonlinearityType_ : null; }
      set {
        nonlinearityType_ = value;
        nonlinearityTypeCase_ = value == null ? NonlinearityTypeOneofCase.None : NonlinearityTypeOneofCase.Softplus;
      }
    }

    /// <summary>Field number for the "parametricSoftplus" field.</summary>
    public const int ParametricSoftplusFieldNumber = 71;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ActivationParametricSoftplus ParametricSoftplus {
      get { return nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ParametricSoftplus ? (global::CoreML.Specification.ActivationParametricSoftplus) nonlinearityType_ : null; }
      set {
        nonlinearityType_ = value;
        nonlinearityTypeCase_ = value == null ? NonlinearityTypeOneofCase.None : NonlinearityTypeOneofCase.ParametricSoftplus;
      }
    }

    private object nonlinearityType_;
    /// <summary>Enum of possible cases for the "NonlinearityType" oneof.</summary>
    public enum NonlinearityTypeOneofCase {
      None = 0,
      Linear = 5,
      ReLU = 10,
      LeakyReLU = 15,
      ThresholdedReLU = 20,
      PReLU = 25,
      Tanh = 30,
      ScaledTanh = 31,
      Sigmoid = 40,
      SigmoidHard = 41,
      ELU = 50,
      Softsign = 60,
      Softplus = 70,
      ParametricSoftplus = 71,
    }
    private NonlinearityTypeOneofCase nonlinearityTypeCase_ = NonlinearityTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NonlinearityTypeOneofCase NonlinearityTypeCase {
      get { return nonlinearityTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNonlinearityType() {
      nonlinearityTypeCase_ = NonlinearityTypeOneofCase.None;
      nonlinearityType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivationParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivationParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Linear, other.Linear)) return false;
      if (!object.Equals(ReLU, other.ReLU)) return false;
      if (!object.Equals(LeakyReLU, other.LeakyReLU)) return false;
      if (!object.Equals(ThresholdedReLU, other.ThresholdedReLU)) return false;
      if (!object.Equals(PReLU, other.PReLU)) return false;
      if (!object.Equals(Tanh, other.Tanh)) return false;
      if (!object.Equals(ScaledTanh, other.ScaledTanh)) return false;
      if (!object.Equals(Sigmoid, other.Sigmoid)) return false;
      if (!object.Equals(SigmoidHard, other.SigmoidHard)) return false;
      if (!object.Equals(ELU, other.ELU)) return false;
      if (!object.Equals(Softsign, other.Softsign)) return false;
      if (!object.Equals(Softplus, other.Softplus)) return false;
      if (!object.Equals(ParametricSoftplus, other.ParametricSoftplus)) return false;
      if (NonlinearityTypeCase != other.NonlinearityTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Linear) hash ^= Linear.GetHashCode();
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ReLU) hash ^= ReLU.GetHashCode();
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.LeakyReLU) hash ^= LeakyReLU.GetHashCode();
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ThresholdedReLU) hash ^= ThresholdedReLU.GetHashCode();
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.PReLU) hash ^= PReLU.GetHashCode();
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Tanh) hash ^= Tanh.GetHashCode();
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ScaledTanh) hash ^= ScaledTanh.GetHashCode();
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Sigmoid) hash ^= Sigmoid.GetHashCode();
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.SigmoidHard) hash ^= SigmoidHard.GetHashCode();
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ELU) hash ^= ELU.GetHashCode();
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Softsign) hash ^= Softsign.GetHashCode();
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Softplus) hash ^= Softplus.GetHashCode();
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ParametricSoftplus) hash ^= ParametricSoftplus.GetHashCode();
      hash ^= (int) nonlinearityTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Linear) {
        output.WriteRawTag(42);
        output.WriteMessage(Linear);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ReLU) {
        output.WriteRawTag(82);
        output.WriteMessage(ReLU);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.LeakyReLU) {
        output.WriteRawTag(122);
        output.WriteMessage(LeakyReLU);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ThresholdedReLU) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(ThresholdedReLU);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.PReLU) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(PReLU);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Tanh) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Tanh);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ScaledTanh) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(ScaledTanh);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Sigmoid) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(Sigmoid);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.SigmoidHard) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(SigmoidHard);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ELU) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(ELU);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Softsign) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(Softsign);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Softplus) {
        output.WriteRawTag(178, 4);
        output.WriteMessage(Softplus);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ParametricSoftplus) {
        output.WriteRawTag(186, 4);
        output.WriteMessage(ParametricSoftplus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Linear) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Linear);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ReLU) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReLU);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.LeakyReLU) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeakyReLU);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ThresholdedReLU) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ThresholdedReLU);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.PReLU) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PReLU);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Tanh) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Tanh);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ScaledTanh) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ScaledTanh);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Sigmoid) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Sigmoid);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.SigmoidHard) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SigmoidHard);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ELU) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ELU);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Softsign) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Softsign);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Softplus) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Softplus);
      }
      if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ParametricSoftplus) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ParametricSoftplus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivationParams other) {
      if (other == null) {
        return;
      }
      switch (other.NonlinearityTypeCase) {
        case NonlinearityTypeOneofCase.Linear:
          if (Linear == null) {
            Linear = new global::CoreML.Specification.ActivationLinear();
          }
          Linear.MergeFrom(other.Linear);
          break;
        case NonlinearityTypeOneofCase.ReLU:
          if (ReLU == null) {
            ReLU = new global::CoreML.Specification.ActivationReLU();
          }
          ReLU.MergeFrom(other.ReLU);
          break;
        case NonlinearityTypeOneofCase.LeakyReLU:
          if (LeakyReLU == null) {
            LeakyReLU = new global::CoreML.Specification.ActivationLeakyReLU();
          }
          LeakyReLU.MergeFrom(other.LeakyReLU);
          break;
        case NonlinearityTypeOneofCase.ThresholdedReLU:
          if (ThresholdedReLU == null) {
            ThresholdedReLU = new global::CoreML.Specification.ActivationThresholdedReLU();
          }
          ThresholdedReLU.MergeFrom(other.ThresholdedReLU);
          break;
        case NonlinearityTypeOneofCase.PReLU:
          if (PReLU == null) {
            PReLU = new global::CoreML.Specification.ActivationPReLU();
          }
          PReLU.MergeFrom(other.PReLU);
          break;
        case NonlinearityTypeOneofCase.Tanh:
          if (Tanh == null) {
            Tanh = new global::CoreML.Specification.ActivationTanh();
          }
          Tanh.MergeFrom(other.Tanh);
          break;
        case NonlinearityTypeOneofCase.ScaledTanh:
          if (ScaledTanh == null) {
            ScaledTanh = new global::CoreML.Specification.ActivationScaledTanh();
          }
          ScaledTanh.MergeFrom(other.ScaledTanh);
          break;
        case NonlinearityTypeOneofCase.Sigmoid:
          if (Sigmoid == null) {
            Sigmoid = new global::CoreML.Specification.ActivationSigmoid();
          }
          Sigmoid.MergeFrom(other.Sigmoid);
          break;
        case NonlinearityTypeOneofCase.SigmoidHard:
          if (SigmoidHard == null) {
            SigmoidHard = new global::CoreML.Specification.ActivationSigmoidHard();
          }
          SigmoidHard.MergeFrom(other.SigmoidHard);
          break;
        case NonlinearityTypeOneofCase.ELU:
          if (ELU == null) {
            ELU = new global::CoreML.Specification.ActivationELU();
          }
          ELU.MergeFrom(other.ELU);
          break;
        case NonlinearityTypeOneofCase.Softsign:
          if (Softsign == null) {
            Softsign = new global::CoreML.Specification.ActivationSoftsign();
          }
          Softsign.MergeFrom(other.Softsign);
          break;
        case NonlinearityTypeOneofCase.Softplus:
          if (Softplus == null) {
            Softplus = new global::CoreML.Specification.ActivationSoftplus();
          }
          Softplus.MergeFrom(other.Softplus);
          break;
        case NonlinearityTypeOneofCase.ParametricSoftplus:
          if (ParametricSoftplus == null) {
            ParametricSoftplus = new global::CoreML.Specification.ActivationParametricSoftplus();
          }
          ParametricSoftplus.MergeFrom(other.ParametricSoftplus);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 42: {
            global::CoreML.Specification.ActivationLinear subBuilder = new global::CoreML.Specification.ActivationLinear();
            if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Linear) {
              subBuilder.MergeFrom(Linear);
            }
            input.ReadMessage(subBuilder);
            Linear = subBuilder;
            break;
          }
          case 82: {
            global::CoreML.Specification.ActivationReLU subBuilder = new global::CoreML.Specification.ActivationReLU();
            if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ReLU) {
              subBuilder.MergeFrom(ReLU);
            }
            input.ReadMessage(subBuilder);
            ReLU = subBuilder;
            break;
          }
          case 122: {
            global::CoreML.Specification.ActivationLeakyReLU subBuilder = new global::CoreML.Specification.ActivationLeakyReLU();
            if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.LeakyReLU) {
              subBuilder.MergeFrom(LeakyReLU);
            }
            input.ReadMessage(subBuilder);
            LeakyReLU = subBuilder;
            break;
          }
          case 162: {
            global::CoreML.Specification.ActivationThresholdedReLU subBuilder = new global::CoreML.Specification.ActivationThresholdedReLU();
            if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ThresholdedReLU) {
              subBuilder.MergeFrom(ThresholdedReLU);
            }
            input.ReadMessage(subBuilder);
            ThresholdedReLU = subBuilder;
            break;
          }
          case 202: {
            global::CoreML.Specification.ActivationPReLU subBuilder = new global::CoreML.Specification.ActivationPReLU();
            if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.PReLU) {
              subBuilder.MergeFrom(PReLU);
            }
            input.ReadMessage(subBuilder);
            PReLU = subBuilder;
            break;
          }
          case 242: {
            global::CoreML.Specification.ActivationTanh subBuilder = new global::CoreML.Specification.ActivationTanh();
            if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Tanh) {
              subBuilder.MergeFrom(Tanh);
            }
            input.ReadMessage(subBuilder);
            Tanh = subBuilder;
            break;
          }
          case 250: {
            global::CoreML.Specification.ActivationScaledTanh subBuilder = new global::CoreML.Specification.ActivationScaledTanh();
            if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ScaledTanh) {
              subBuilder.MergeFrom(ScaledTanh);
            }
            input.ReadMessage(subBuilder);
            ScaledTanh = subBuilder;
            break;
          }
          case 322: {
            global::CoreML.Specification.ActivationSigmoid subBuilder = new global::CoreML.Specification.ActivationSigmoid();
            if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Sigmoid) {
              subBuilder.MergeFrom(Sigmoid);
            }
            input.ReadMessage(subBuilder);
            Sigmoid = subBuilder;
            break;
          }
          case 330: {
            global::CoreML.Specification.ActivationSigmoidHard subBuilder = new global::CoreML.Specification.ActivationSigmoidHard();
            if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.SigmoidHard) {
              subBuilder.MergeFrom(SigmoidHard);
            }
            input.ReadMessage(subBuilder);
            SigmoidHard = subBuilder;
            break;
          }
          case 402: {
            global::CoreML.Specification.ActivationELU subBuilder = new global::CoreML.Specification.ActivationELU();
            if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ELU) {
              subBuilder.MergeFrom(ELU);
            }
            input.ReadMessage(subBuilder);
            ELU = subBuilder;
            break;
          }
          case 482: {
            global::CoreML.Specification.ActivationSoftsign subBuilder = new global::CoreML.Specification.ActivationSoftsign();
            if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Softsign) {
              subBuilder.MergeFrom(Softsign);
            }
            input.ReadMessage(subBuilder);
            Softsign = subBuilder;
            break;
          }
          case 562: {
            global::CoreML.Specification.ActivationSoftplus subBuilder = new global::CoreML.Specification.ActivationSoftplus();
            if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.Softplus) {
              subBuilder.MergeFrom(Softplus);
            }
            input.ReadMessage(subBuilder);
            Softplus = subBuilder;
            break;
          }
          case 570: {
            global::CoreML.Specification.ActivationParametricSoftplus subBuilder = new global::CoreML.Specification.ActivationParametricSoftplus();
            if (nonlinearityTypeCase_ == NonlinearityTypeOneofCase.ParametricSoftplus) {
              subBuilder.MergeFrom(ParametricSoftplus);
            }
            input.ReadMessage(subBuilder);
            ParametricSoftplus = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A single neural network layer.
  /// </summary>
  public sealed partial class NeuralNetworkLayer : pb::IMessage<NeuralNetworkLayer> {
    private static readonly pb::MessageParser<NeuralNetworkLayer> _parser = new pb::MessageParser<NeuralNetworkLayer>(() => new NeuralNetworkLayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NeuralNetworkLayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeuralNetworkLayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeuralNetworkLayer(NeuralNetworkLayer other) : this() {
      name_ = other.name_;
      input_ = other.input_.Clone();
      output_ = other.output_.Clone();
      switch (other.LayerCase) {
        case LayerOneofCase.Convolution:
          Convolution = other.Convolution.Clone();
          break;
        case LayerOneofCase.Pooling:
          Pooling = other.Pooling.Clone();
          break;
        case LayerOneofCase.Activation:
          Activation = other.Activation.Clone();
          break;
        case LayerOneofCase.InnerProduct:
          InnerProduct = other.InnerProduct.Clone();
          break;
        case LayerOneofCase.Embedding:
          Embedding = other.Embedding.Clone();
          break;
        case LayerOneofCase.Batchnorm:
          Batchnorm = other.Batchnorm.Clone();
          break;
        case LayerOneofCase.Mvn:
          Mvn = other.Mvn.Clone();
          break;
        case LayerOneofCase.L2Normalize:
          L2Normalize = other.L2Normalize.Clone();
          break;
        case LayerOneofCase.Softmax:
          Softmax = other.Softmax.Clone();
          break;
        case LayerOneofCase.Lrn:
          Lrn = other.Lrn.Clone();
          break;
        case LayerOneofCase.Crop:
          Crop = other.Crop.Clone();
          break;
        case LayerOneofCase.Padding:
          Padding = other.Padding.Clone();
          break;
        case LayerOneofCase.Upsample:
          Upsample = other.Upsample.Clone();
          break;
        case LayerOneofCase.Unary:
          Unary = other.Unary.Clone();
          break;
        case LayerOneofCase.Add:
          Add = other.Add.Clone();
          break;
        case LayerOneofCase.Multiply:
          Multiply = other.Multiply.Clone();
          break;
        case LayerOneofCase.Average:
          Average = other.Average.Clone();
          break;
        case LayerOneofCase.Scale:
          Scale = other.Scale.Clone();
          break;
        case LayerOneofCase.Bias:
          Bias = other.Bias.Clone();
          break;
        case LayerOneofCase.Max:
          Max = other.Max.Clone();
          break;
        case LayerOneofCase.Min:
          Min = other.Min.Clone();
          break;
        case LayerOneofCase.Dot:
          Dot = other.Dot.Clone();
          break;
        case LayerOneofCase.Reduce:
          Reduce = other.Reduce.Clone();
          break;
        case LayerOneofCase.LoadConstant:
          LoadConstant = other.LoadConstant.Clone();
          break;
        case LayerOneofCase.Reshape:
          Reshape = other.Reshape.Clone();
          break;
        case LayerOneofCase.Flatten:
          Flatten = other.Flatten.Clone();
          break;
        case LayerOneofCase.Permute:
          Permute = other.Permute.Clone();
          break;
        case LayerOneofCase.Concat:
          Concat = other.Concat.Clone();
          break;
        case LayerOneofCase.Split:
          Split = other.Split.Clone();
          break;
        case LayerOneofCase.SequenceRepeat:
          SequenceRepeat = other.SequenceRepeat.Clone();
          break;
        case LayerOneofCase.ReorganizeData:
          ReorganizeData = other.ReorganizeData.Clone();
          break;
        case LayerOneofCase.Slice:
          Slice = other.Slice.Clone();
          break;
        case LayerOneofCase.SimpleRecurrent:
          SimpleRecurrent = other.SimpleRecurrent.Clone();
          break;
        case LayerOneofCase.Gru:
          Gru = other.Gru.Clone();
          break;
        case LayerOneofCase.UniDirectionalLSTM:
          UniDirectionalLSTM = other.UniDirectionalLSTM.Clone();
          break;
        case LayerOneofCase.BiDirectionalLSTM:
          BiDirectionalLSTM = other.BiDirectionalLSTM.Clone();
          break;
        case LayerOneofCase.Custom:
          Custom = other.Custom.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeuralNetworkLayer Clone() {
      return new NeuralNetworkLayer(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///descriptive name of the layer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_input_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> input_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Input {
      get { return input_; }
    }

    /// <summary>Field number for the "output" field.</summary>
    public const int OutputFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_output_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> output_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Output {
      get { return output_; }
    }

    /// <summary>Field number for the "convolution" field.</summary>
    public const int ConvolutionFieldNumber = 100;
    /// <summary>
    /// start at 100 here
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ConvolutionLayerParams Convolution {
      get { return layerCase_ == LayerOneofCase.Convolution ? (global::CoreML.Specification.ConvolutionLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Convolution;
      }
    }

    /// <summary>Field number for the "pooling" field.</summary>
    public const int PoolingFieldNumber = 120;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.PoolingLayerParams Pooling {
      get { return layerCase_ == LayerOneofCase.Pooling ? (global::CoreML.Specification.PoolingLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Pooling;
      }
    }

    /// <summary>Field number for the "activation" field.</summary>
    public const int ActivationFieldNumber = 130;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ActivationParams Activation {
      get { return layerCase_ == LayerOneofCase.Activation ? (global::CoreML.Specification.ActivationParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Activation;
      }
    }

    /// <summary>Field number for the "innerProduct" field.</summary>
    public const int InnerProductFieldNumber = 140;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.InnerProductLayerParams InnerProduct {
      get { return layerCase_ == LayerOneofCase.InnerProduct ? (global::CoreML.Specification.InnerProductLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.InnerProduct;
      }
    }

    /// <summary>Field number for the "embedding" field.</summary>
    public const int EmbeddingFieldNumber = 150;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.EmbeddingLayerParams Embedding {
      get { return layerCase_ == LayerOneofCase.Embedding ? (global::CoreML.Specification.EmbeddingLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Embedding;
      }
    }

    /// <summary>Field number for the "batchnorm" field.</summary>
    public const int BatchnormFieldNumber = 160;
    /// <summary>
    ///normalization related layers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.BatchnormLayerParams Batchnorm {
      get { return layerCase_ == LayerOneofCase.Batchnorm ? (global::CoreML.Specification.BatchnormLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Batchnorm;
      }
    }

    /// <summary>Field number for the "mvn" field.</summary>
    public const int MvnFieldNumber = 165;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.MeanVarianceNormalizeLayerParams Mvn {
      get { return layerCase_ == LayerOneofCase.Mvn ? (global::CoreML.Specification.MeanVarianceNormalizeLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Mvn;
      }
    }

    /// <summary>Field number for the "l2normalize" field.</summary>
    public const int L2NormalizeFieldNumber = 170;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.L2NormalizeLayerParams L2Normalize {
      get { return layerCase_ == LayerOneofCase.L2Normalize ? (global::CoreML.Specification.L2NormalizeLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.L2Normalize;
      }
    }

    /// <summary>Field number for the "softmax" field.</summary>
    public const int SoftmaxFieldNumber = 175;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.SoftmaxLayerParams Softmax {
      get { return layerCase_ == LayerOneofCase.Softmax ? (global::CoreML.Specification.SoftmaxLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Softmax;
      }
    }

    /// <summary>Field number for the "lrn" field.</summary>
    public const int LrnFieldNumber = 180;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.LRNLayerParams Lrn {
      get { return layerCase_ == LayerOneofCase.Lrn ? (global::CoreML.Specification.LRNLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Lrn;
      }
    }

    /// <summary>Field number for the "crop" field.</summary>
    public const int CropFieldNumber = 190;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.CropLayerParams Crop {
      get { return layerCase_ == LayerOneofCase.Crop ? (global::CoreML.Specification.CropLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Crop;
      }
    }

    /// <summary>Field number for the "padding" field.</summary>
    public const int PaddingFieldNumber = 200;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.PaddingLayerParams Padding {
      get { return layerCase_ == LayerOneofCase.Padding ? (global::CoreML.Specification.PaddingLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Padding;
      }
    }

    /// <summary>Field number for the "upsample" field.</summary>
    public const int UpsampleFieldNumber = 210;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.UpsampleLayerParams Upsample {
      get { return layerCase_ == LayerOneofCase.Upsample ? (global::CoreML.Specification.UpsampleLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Upsample;
      }
    }

    /// <summary>Field number for the "unary" field.</summary>
    public const int UnaryFieldNumber = 220;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.UnaryFunctionLayerParams Unary {
      get { return layerCase_ == LayerOneofCase.Unary ? (global::CoreML.Specification.UnaryFunctionLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Unary;
      }
    }

    /// <summary>Field number for the "add" field.</summary>
    public const int AddFieldNumber = 230;
    /// <summary>
    ///elementwise operations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.AddLayerParams Add {
      get { return layerCase_ == LayerOneofCase.Add ? (global::CoreML.Specification.AddLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Add;
      }
    }

    /// <summary>Field number for the "multiply" field.</summary>
    public const int MultiplyFieldNumber = 231;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.MultiplyLayerParams Multiply {
      get { return layerCase_ == LayerOneofCase.Multiply ? (global::CoreML.Specification.MultiplyLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Multiply;
      }
    }

    /// <summary>Field number for the "average" field.</summary>
    public const int AverageFieldNumber = 240;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.AverageLayerParams Average {
      get { return layerCase_ == LayerOneofCase.Average ? (global::CoreML.Specification.AverageLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Average;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 245;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ScaleLayerParams Scale {
      get { return layerCase_ == LayerOneofCase.Scale ? (global::CoreML.Specification.ScaleLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Scale;
      }
    }

    /// <summary>Field number for the "bias" field.</summary>
    public const int BiasFieldNumber = 250;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.BiasLayerParams Bias {
      get { return layerCase_ == LayerOneofCase.Bias ? (global::CoreML.Specification.BiasLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Bias;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 260;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.MaxLayerParams Max {
      get { return layerCase_ == LayerOneofCase.Max ? (global::CoreML.Specification.MaxLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Max;
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 261;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.MinLayerParams Min {
      get { return layerCase_ == LayerOneofCase.Min ? (global::CoreML.Specification.MinLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Min;
      }
    }

    /// <summary>Field number for the "dot" field.</summary>
    public const int DotFieldNumber = 270;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.DotProductLayerParams Dot {
      get { return layerCase_ == LayerOneofCase.Dot ? (global::CoreML.Specification.DotProductLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Dot;
      }
    }

    /// <summary>Field number for the "reduce" field.</summary>
    public const int ReduceFieldNumber = 280;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ReduceLayerParams Reduce {
      get { return layerCase_ == LayerOneofCase.Reduce ? (global::CoreML.Specification.ReduceLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Reduce;
      }
    }

    /// <summary>Field number for the "loadConstant" field.</summary>
    public const int LoadConstantFieldNumber = 290;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.LoadConstantLayerParams LoadConstant {
      get { return layerCase_ == LayerOneofCase.LoadConstant ? (global::CoreML.Specification.LoadConstantLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.LoadConstant;
      }
    }

    /// <summary>Field number for the "reshape" field.</summary>
    public const int ReshapeFieldNumber = 300;
    /// <summary>
    ///data reorganization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ReshapeLayerParams Reshape {
      get { return layerCase_ == LayerOneofCase.Reshape ? (global::CoreML.Specification.ReshapeLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Reshape;
      }
    }

    /// <summary>Field number for the "flatten" field.</summary>
    public const int FlattenFieldNumber = 301;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.FlattenLayerParams Flatten {
      get { return layerCase_ == LayerOneofCase.Flatten ? (global::CoreML.Specification.FlattenLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Flatten;
      }
    }

    /// <summary>Field number for the "permute" field.</summary>
    public const int PermuteFieldNumber = 310;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.PermuteLayerParams Permute {
      get { return layerCase_ == LayerOneofCase.Permute ? (global::CoreML.Specification.PermuteLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Permute;
      }
    }

    /// <summary>Field number for the "concat" field.</summary>
    public const int ConcatFieldNumber = 320;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ConcatLayerParams Concat {
      get { return layerCase_ == LayerOneofCase.Concat ? (global::CoreML.Specification.ConcatLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Concat;
      }
    }

    /// <summary>Field number for the "split" field.</summary>
    public const int SplitFieldNumber = 330;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.SplitLayerParams Split {
      get { return layerCase_ == LayerOneofCase.Split ? (global::CoreML.Specification.SplitLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Split;
      }
    }

    /// <summary>Field number for the "sequenceRepeat" field.</summary>
    public const int SequenceRepeatFieldNumber = 340;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.SequenceRepeatLayerParams SequenceRepeat {
      get { return layerCase_ == LayerOneofCase.SequenceRepeat ? (global::CoreML.Specification.SequenceRepeatLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.SequenceRepeat;
      }
    }

    /// <summary>Field number for the "reorganizeData" field.</summary>
    public const int ReorganizeDataFieldNumber = 345;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ReorganizeDataLayerParams ReorganizeData {
      get { return layerCase_ == LayerOneofCase.ReorganizeData ? (global::CoreML.Specification.ReorganizeDataLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.ReorganizeData;
      }
    }

    /// <summary>Field number for the "slice" field.</summary>
    public const int SliceFieldNumber = 350;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.SliceLayerParams Slice {
      get { return layerCase_ == LayerOneofCase.Slice ? (global::CoreML.Specification.SliceLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Slice;
      }
    }

    /// <summary>Field number for the "simpleRecurrent" field.</summary>
    public const int SimpleRecurrentFieldNumber = 400;
    /// <summary>
    ///Recurrent Layers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.SimpleRecurrentLayerParams SimpleRecurrent {
      get { return layerCase_ == LayerOneofCase.SimpleRecurrent ? (global::CoreML.Specification.SimpleRecurrentLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.SimpleRecurrent;
      }
    }

    /// <summary>Field number for the "gru" field.</summary>
    public const int GruFieldNumber = 410;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.GRULayerParams Gru {
      get { return layerCase_ == LayerOneofCase.Gru ? (global::CoreML.Specification.GRULayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Gru;
      }
    }

    /// <summary>Field number for the "uniDirectionalLSTM" field.</summary>
    public const int UniDirectionalLSTMFieldNumber = 420;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.UniDirectionalLSTMLayerParams UniDirectionalLSTM {
      get { return layerCase_ == LayerOneofCase.UniDirectionalLSTM ? (global::CoreML.Specification.UniDirectionalLSTMLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.UniDirectionalLSTM;
      }
    }

    /// <summary>Field number for the "biDirectionalLSTM" field.</summary>
    public const int BiDirectionalLSTMFieldNumber = 430;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.BiDirectionalLSTMLayerParams BiDirectionalLSTM {
      get { return layerCase_ == LayerOneofCase.BiDirectionalLSTM ? (global::CoreML.Specification.BiDirectionalLSTMLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.BiDirectionalLSTM;
      }
    }

    /// <summary>Field number for the "custom" field.</summary>
    public const int CustomFieldNumber = 500;
    /// <summary>
    /// Custom (user-implemented) Layer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.CustomLayerParams Custom {
      get { return layerCase_ == LayerOneofCase.Custom ? (global::CoreML.Specification.CustomLayerParams) layer_ : null; }
      set {
        layer_ = value;
        layerCase_ = value == null ? LayerOneofCase.None : LayerOneofCase.Custom;
      }
    }

    private object layer_;
    /// <summary>Enum of possible cases for the "layer" oneof.</summary>
    public enum LayerOneofCase {
      None = 0,
      Convolution = 100,
      Pooling = 120,
      Activation = 130,
      InnerProduct = 140,
      Embedding = 150,
      Batchnorm = 160,
      Mvn = 165,
      L2Normalize = 170,
      Softmax = 175,
      Lrn = 180,
      Crop = 190,
      Padding = 200,
      Upsample = 210,
      Unary = 220,
      Add = 230,
      Multiply = 231,
      Average = 240,
      Scale = 245,
      Bias = 250,
      Max = 260,
      Min = 261,
      Dot = 270,
      Reduce = 280,
      LoadConstant = 290,
      Reshape = 300,
      Flatten = 301,
      Permute = 310,
      Concat = 320,
      Split = 330,
      SequenceRepeat = 340,
      ReorganizeData = 345,
      Slice = 350,
      SimpleRecurrent = 400,
      Gru = 410,
      UniDirectionalLSTM = 420,
      BiDirectionalLSTM = 430,
      Custom = 500,
    }
    private LayerOneofCase layerCase_ = LayerOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayerOneofCase LayerCase {
      get { return layerCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLayer() {
      layerCase_ = LayerOneofCase.None;
      layer_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NeuralNetworkLayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NeuralNetworkLayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!input_.Equals(other.input_)) return false;
      if(!output_.Equals(other.output_)) return false;
      if (!object.Equals(Convolution, other.Convolution)) return false;
      if (!object.Equals(Pooling, other.Pooling)) return false;
      if (!object.Equals(Activation, other.Activation)) return false;
      if (!object.Equals(InnerProduct, other.InnerProduct)) return false;
      if (!object.Equals(Embedding, other.Embedding)) return false;
      if (!object.Equals(Batchnorm, other.Batchnorm)) return false;
      if (!object.Equals(Mvn, other.Mvn)) return false;
      if (!object.Equals(L2Normalize, other.L2Normalize)) return false;
      if (!object.Equals(Softmax, other.Softmax)) return false;
      if (!object.Equals(Lrn, other.Lrn)) return false;
      if (!object.Equals(Crop, other.Crop)) return false;
      if (!object.Equals(Padding, other.Padding)) return false;
      if (!object.Equals(Upsample, other.Upsample)) return false;
      if (!object.Equals(Unary, other.Unary)) return false;
      if (!object.Equals(Add, other.Add)) return false;
      if (!object.Equals(Multiply, other.Multiply)) return false;
      if (!object.Equals(Average, other.Average)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (!object.Equals(Bias, other.Bias)) return false;
      if (!object.Equals(Max, other.Max)) return false;
      if (!object.Equals(Min, other.Min)) return false;
      if (!object.Equals(Dot, other.Dot)) return false;
      if (!object.Equals(Reduce, other.Reduce)) return false;
      if (!object.Equals(LoadConstant, other.LoadConstant)) return false;
      if (!object.Equals(Reshape, other.Reshape)) return false;
      if (!object.Equals(Flatten, other.Flatten)) return false;
      if (!object.Equals(Permute, other.Permute)) return false;
      if (!object.Equals(Concat, other.Concat)) return false;
      if (!object.Equals(Split, other.Split)) return false;
      if (!object.Equals(SequenceRepeat, other.SequenceRepeat)) return false;
      if (!object.Equals(ReorganizeData, other.ReorganizeData)) return false;
      if (!object.Equals(Slice, other.Slice)) return false;
      if (!object.Equals(SimpleRecurrent, other.SimpleRecurrent)) return false;
      if (!object.Equals(Gru, other.Gru)) return false;
      if (!object.Equals(UniDirectionalLSTM, other.UniDirectionalLSTM)) return false;
      if (!object.Equals(BiDirectionalLSTM, other.BiDirectionalLSTM)) return false;
      if (!object.Equals(Custom, other.Custom)) return false;
      if (LayerCase != other.LayerCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= input_.GetHashCode();
      hash ^= output_.GetHashCode();
      if (layerCase_ == LayerOneofCase.Convolution) hash ^= Convolution.GetHashCode();
      if (layerCase_ == LayerOneofCase.Pooling) hash ^= Pooling.GetHashCode();
      if (layerCase_ == LayerOneofCase.Activation) hash ^= Activation.GetHashCode();
      if (layerCase_ == LayerOneofCase.InnerProduct) hash ^= InnerProduct.GetHashCode();
      if (layerCase_ == LayerOneofCase.Embedding) hash ^= Embedding.GetHashCode();
      if (layerCase_ == LayerOneofCase.Batchnorm) hash ^= Batchnorm.GetHashCode();
      if (layerCase_ == LayerOneofCase.Mvn) hash ^= Mvn.GetHashCode();
      if (layerCase_ == LayerOneofCase.L2Normalize) hash ^= L2Normalize.GetHashCode();
      if (layerCase_ == LayerOneofCase.Softmax) hash ^= Softmax.GetHashCode();
      if (layerCase_ == LayerOneofCase.Lrn) hash ^= Lrn.GetHashCode();
      if (layerCase_ == LayerOneofCase.Crop) hash ^= Crop.GetHashCode();
      if (layerCase_ == LayerOneofCase.Padding) hash ^= Padding.GetHashCode();
      if (layerCase_ == LayerOneofCase.Upsample) hash ^= Upsample.GetHashCode();
      if (layerCase_ == LayerOneofCase.Unary) hash ^= Unary.GetHashCode();
      if (layerCase_ == LayerOneofCase.Add) hash ^= Add.GetHashCode();
      if (layerCase_ == LayerOneofCase.Multiply) hash ^= Multiply.GetHashCode();
      if (layerCase_ == LayerOneofCase.Average) hash ^= Average.GetHashCode();
      if (layerCase_ == LayerOneofCase.Scale) hash ^= Scale.GetHashCode();
      if (layerCase_ == LayerOneofCase.Bias) hash ^= Bias.GetHashCode();
      if (layerCase_ == LayerOneofCase.Max) hash ^= Max.GetHashCode();
      if (layerCase_ == LayerOneofCase.Min) hash ^= Min.GetHashCode();
      if (layerCase_ == LayerOneofCase.Dot) hash ^= Dot.GetHashCode();
      if (layerCase_ == LayerOneofCase.Reduce) hash ^= Reduce.GetHashCode();
      if (layerCase_ == LayerOneofCase.LoadConstant) hash ^= LoadConstant.GetHashCode();
      if (layerCase_ == LayerOneofCase.Reshape) hash ^= Reshape.GetHashCode();
      if (layerCase_ == LayerOneofCase.Flatten) hash ^= Flatten.GetHashCode();
      if (layerCase_ == LayerOneofCase.Permute) hash ^= Permute.GetHashCode();
      if (layerCase_ == LayerOneofCase.Concat) hash ^= Concat.GetHashCode();
      if (layerCase_ == LayerOneofCase.Split) hash ^= Split.GetHashCode();
      if (layerCase_ == LayerOneofCase.SequenceRepeat) hash ^= SequenceRepeat.GetHashCode();
      if (layerCase_ == LayerOneofCase.ReorganizeData) hash ^= ReorganizeData.GetHashCode();
      if (layerCase_ == LayerOneofCase.Slice) hash ^= Slice.GetHashCode();
      if (layerCase_ == LayerOneofCase.SimpleRecurrent) hash ^= SimpleRecurrent.GetHashCode();
      if (layerCase_ == LayerOneofCase.Gru) hash ^= Gru.GetHashCode();
      if (layerCase_ == LayerOneofCase.UniDirectionalLSTM) hash ^= UniDirectionalLSTM.GetHashCode();
      if (layerCase_ == LayerOneofCase.BiDirectionalLSTM) hash ^= BiDirectionalLSTM.GetHashCode();
      if (layerCase_ == LayerOneofCase.Custom) hash ^= Custom.GetHashCode();
      hash ^= (int) layerCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      input_.WriteTo(output, _repeated_input_codec);
      output_.WriteTo(output, _repeated_output_codec);
      if (layerCase_ == LayerOneofCase.Convolution) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Convolution);
      }
      if (layerCase_ == LayerOneofCase.Pooling) {
        output.WriteRawTag(194, 7);
        output.WriteMessage(Pooling);
      }
      if (layerCase_ == LayerOneofCase.Activation) {
        output.WriteRawTag(146, 8);
        output.WriteMessage(Activation);
      }
      if (layerCase_ == LayerOneofCase.InnerProduct) {
        output.WriteRawTag(226, 8);
        output.WriteMessage(InnerProduct);
      }
      if (layerCase_ == LayerOneofCase.Embedding) {
        output.WriteRawTag(178, 9);
        output.WriteMessage(Embedding);
      }
      if (layerCase_ == LayerOneofCase.Batchnorm) {
        output.WriteRawTag(130, 10);
        output.WriteMessage(Batchnorm);
      }
      if (layerCase_ == LayerOneofCase.Mvn) {
        output.WriteRawTag(170, 10);
        output.WriteMessage(Mvn);
      }
      if (layerCase_ == LayerOneofCase.L2Normalize) {
        output.WriteRawTag(210, 10);
        output.WriteMessage(L2Normalize);
      }
      if (layerCase_ == LayerOneofCase.Softmax) {
        output.WriteRawTag(250, 10);
        output.WriteMessage(Softmax);
      }
      if (layerCase_ == LayerOneofCase.Lrn) {
        output.WriteRawTag(162, 11);
        output.WriteMessage(Lrn);
      }
      if (layerCase_ == LayerOneofCase.Crop) {
        output.WriteRawTag(242, 11);
        output.WriteMessage(Crop);
      }
      if (layerCase_ == LayerOneofCase.Padding) {
        output.WriteRawTag(194, 12);
        output.WriteMessage(Padding);
      }
      if (layerCase_ == LayerOneofCase.Upsample) {
        output.WriteRawTag(146, 13);
        output.WriteMessage(Upsample);
      }
      if (layerCase_ == LayerOneofCase.Unary) {
        output.WriteRawTag(226, 13);
        output.WriteMessage(Unary);
      }
      if (layerCase_ == LayerOneofCase.Add) {
        output.WriteRawTag(178, 14);
        output.WriteMessage(Add);
      }
      if (layerCase_ == LayerOneofCase.Multiply) {
        output.WriteRawTag(186, 14);
        output.WriteMessage(Multiply);
      }
      if (layerCase_ == LayerOneofCase.Average) {
        output.WriteRawTag(130, 15);
        output.WriteMessage(Average);
      }
      if (layerCase_ == LayerOneofCase.Scale) {
        output.WriteRawTag(170, 15);
        output.WriteMessage(Scale);
      }
      if (layerCase_ == LayerOneofCase.Bias) {
        output.WriteRawTag(210, 15);
        output.WriteMessage(Bias);
      }
      if (layerCase_ == LayerOneofCase.Max) {
        output.WriteRawTag(162, 16);
        output.WriteMessage(Max);
      }
      if (layerCase_ == LayerOneofCase.Min) {
        output.WriteRawTag(170, 16);
        output.WriteMessage(Min);
      }
      if (layerCase_ == LayerOneofCase.Dot) {
        output.WriteRawTag(242, 16);
        output.WriteMessage(Dot);
      }
      if (layerCase_ == LayerOneofCase.Reduce) {
        output.WriteRawTag(194, 17);
        output.WriteMessage(Reduce);
      }
      if (layerCase_ == LayerOneofCase.LoadConstant) {
        output.WriteRawTag(146, 18);
        output.WriteMessage(LoadConstant);
      }
      if (layerCase_ == LayerOneofCase.Reshape) {
        output.WriteRawTag(226, 18);
        output.WriteMessage(Reshape);
      }
      if (layerCase_ == LayerOneofCase.Flatten) {
        output.WriteRawTag(234, 18);
        output.WriteMessage(Flatten);
      }
      if (layerCase_ == LayerOneofCase.Permute) {
        output.WriteRawTag(178, 19);
        output.WriteMessage(Permute);
      }
      if (layerCase_ == LayerOneofCase.Concat) {
        output.WriteRawTag(130, 20);
        output.WriteMessage(Concat);
      }
      if (layerCase_ == LayerOneofCase.Split) {
        output.WriteRawTag(210, 20);
        output.WriteMessage(Split);
      }
      if (layerCase_ == LayerOneofCase.SequenceRepeat) {
        output.WriteRawTag(162, 21);
        output.WriteMessage(SequenceRepeat);
      }
      if (layerCase_ == LayerOneofCase.ReorganizeData) {
        output.WriteRawTag(202, 21);
        output.WriteMessage(ReorganizeData);
      }
      if (layerCase_ == LayerOneofCase.Slice) {
        output.WriteRawTag(242, 21);
        output.WriteMessage(Slice);
      }
      if (layerCase_ == LayerOneofCase.SimpleRecurrent) {
        output.WriteRawTag(130, 25);
        output.WriteMessage(SimpleRecurrent);
      }
      if (layerCase_ == LayerOneofCase.Gru) {
        output.WriteRawTag(210, 25);
        output.WriteMessage(Gru);
      }
      if (layerCase_ == LayerOneofCase.UniDirectionalLSTM) {
        output.WriteRawTag(162, 26);
        output.WriteMessage(UniDirectionalLSTM);
      }
      if (layerCase_ == LayerOneofCase.BiDirectionalLSTM) {
        output.WriteRawTag(242, 26);
        output.WriteMessage(BiDirectionalLSTM);
      }
      if (layerCase_ == LayerOneofCase.Custom) {
        output.WriteRawTag(162, 31);
        output.WriteMessage(Custom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += input_.CalculateSize(_repeated_input_codec);
      size += output_.CalculateSize(_repeated_output_codec);
      if (layerCase_ == LayerOneofCase.Convolution) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Convolution);
      }
      if (layerCase_ == LayerOneofCase.Pooling) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pooling);
      }
      if (layerCase_ == LayerOneofCase.Activation) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Activation);
      }
      if (layerCase_ == LayerOneofCase.InnerProduct) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InnerProduct);
      }
      if (layerCase_ == LayerOneofCase.Embedding) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Embedding);
      }
      if (layerCase_ == LayerOneofCase.Batchnorm) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Batchnorm);
      }
      if (layerCase_ == LayerOneofCase.Mvn) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Mvn);
      }
      if (layerCase_ == LayerOneofCase.L2Normalize) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(L2Normalize);
      }
      if (layerCase_ == LayerOneofCase.Softmax) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Softmax);
      }
      if (layerCase_ == LayerOneofCase.Lrn) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Lrn);
      }
      if (layerCase_ == LayerOneofCase.Crop) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Crop);
      }
      if (layerCase_ == LayerOneofCase.Padding) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Padding);
      }
      if (layerCase_ == LayerOneofCase.Upsample) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Upsample);
      }
      if (layerCase_ == LayerOneofCase.Unary) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Unary);
      }
      if (layerCase_ == LayerOneofCase.Add) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Add);
      }
      if (layerCase_ == LayerOneofCase.Multiply) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Multiply);
      }
      if (layerCase_ == LayerOneofCase.Average) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Average);
      }
      if (layerCase_ == LayerOneofCase.Scale) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (layerCase_ == LayerOneofCase.Bias) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Bias);
      }
      if (layerCase_ == LayerOneofCase.Max) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Max);
      }
      if (layerCase_ == LayerOneofCase.Min) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Min);
      }
      if (layerCase_ == LayerOneofCase.Dot) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Dot);
      }
      if (layerCase_ == LayerOneofCase.Reduce) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Reduce);
      }
      if (layerCase_ == LayerOneofCase.LoadConstant) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LoadConstant);
      }
      if (layerCase_ == LayerOneofCase.Reshape) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Reshape);
      }
      if (layerCase_ == LayerOneofCase.Flatten) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Flatten);
      }
      if (layerCase_ == LayerOneofCase.Permute) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Permute);
      }
      if (layerCase_ == LayerOneofCase.Concat) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Concat);
      }
      if (layerCase_ == LayerOneofCase.Split) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Split);
      }
      if (layerCase_ == LayerOneofCase.SequenceRepeat) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SequenceRepeat);
      }
      if (layerCase_ == LayerOneofCase.ReorganizeData) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReorganizeData);
      }
      if (layerCase_ == LayerOneofCase.Slice) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Slice);
      }
      if (layerCase_ == LayerOneofCase.SimpleRecurrent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SimpleRecurrent);
      }
      if (layerCase_ == LayerOneofCase.Gru) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Gru);
      }
      if (layerCase_ == LayerOneofCase.UniDirectionalLSTM) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UniDirectionalLSTM);
      }
      if (layerCase_ == LayerOneofCase.BiDirectionalLSTM) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BiDirectionalLSTM);
      }
      if (layerCase_ == LayerOneofCase.Custom) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Custom);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NeuralNetworkLayer other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      input_.Add(other.input_);
      output_.Add(other.output_);
      switch (other.LayerCase) {
        case LayerOneofCase.Convolution:
          if (Convolution == null) {
            Convolution = new global::CoreML.Specification.ConvolutionLayerParams();
          }
          Convolution.MergeFrom(other.Convolution);
          break;
        case LayerOneofCase.Pooling:
          if (Pooling == null) {
            Pooling = new global::CoreML.Specification.PoolingLayerParams();
          }
          Pooling.MergeFrom(other.Pooling);
          break;
        case LayerOneofCase.Activation:
          if (Activation == null) {
            Activation = new global::CoreML.Specification.ActivationParams();
          }
          Activation.MergeFrom(other.Activation);
          break;
        case LayerOneofCase.InnerProduct:
          if (InnerProduct == null) {
            InnerProduct = new global::CoreML.Specification.InnerProductLayerParams();
          }
          InnerProduct.MergeFrom(other.InnerProduct);
          break;
        case LayerOneofCase.Embedding:
          if (Embedding == null) {
            Embedding = new global::CoreML.Specification.EmbeddingLayerParams();
          }
          Embedding.MergeFrom(other.Embedding);
          break;
        case LayerOneofCase.Batchnorm:
          if (Batchnorm == null) {
            Batchnorm = new global::CoreML.Specification.BatchnormLayerParams();
          }
          Batchnorm.MergeFrom(other.Batchnorm);
          break;
        case LayerOneofCase.Mvn:
          if (Mvn == null) {
            Mvn = new global::CoreML.Specification.MeanVarianceNormalizeLayerParams();
          }
          Mvn.MergeFrom(other.Mvn);
          break;
        case LayerOneofCase.L2Normalize:
          if (L2Normalize == null) {
            L2Normalize = new global::CoreML.Specification.L2NormalizeLayerParams();
          }
          L2Normalize.MergeFrom(other.L2Normalize);
          break;
        case LayerOneofCase.Softmax:
          if (Softmax == null) {
            Softmax = new global::CoreML.Specification.SoftmaxLayerParams();
          }
          Softmax.MergeFrom(other.Softmax);
          break;
        case LayerOneofCase.Lrn:
          if (Lrn == null) {
            Lrn = new global::CoreML.Specification.LRNLayerParams();
          }
          Lrn.MergeFrom(other.Lrn);
          break;
        case LayerOneofCase.Crop:
          if (Crop == null) {
            Crop = new global::CoreML.Specification.CropLayerParams();
          }
          Crop.MergeFrom(other.Crop);
          break;
        case LayerOneofCase.Padding:
          if (Padding == null) {
            Padding = new global::CoreML.Specification.PaddingLayerParams();
          }
          Padding.MergeFrom(other.Padding);
          break;
        case LayerOneofCase.Upsample:
          if (Upsample == null) {
            Upsample = new global::CoreML.Specification.UpsampleLayerParams();
          }
          Upsample.MergeFrom(other.Upsample);
          break;
        case LayerOneofCase.Unary:
          if (Unary == null) {
            Unary = new global::CoreML.Specification.UnaryFunctionLayerParams();
          }
          Unary.MergeFrom(other.Unary);
          break;
        case LayerOneofCase.Add:
          if (Add == null) {
            Add = new global::CoreML.Specification.AddLayerParams();
          }
          Add.MergeFrom(other.Add);
          break;
        case LayerOneofCase.Multiply:
          if (Multiply == null) {
            Multiply = new global::CoreML.Specification.MultiplyLayerParams();
          }
          Multiply.MergeFrom(other.Multiply);
          break;
        case LayerOneofCase.Average:
          if (Average == null) {
            Average = new global::CoreML.Specification.AverageLayerParams();
          }
          Average.MergeFrom(other.Average);
          break;
        case LayerOneofCase.Scale:
          if (Scale == null) {
            Scale = new global::CoreML.Specification.ScaleLayerParams();
          }
          Scale.MergeFrom(other.Scale);
          break;
        case LayerOneofCase.Bias:
          if (Bias == null) {
            Bias = new global::CoreML.Specification.BiasLayerParams();
          }
          Bias.MergeFrom(other.Bias);
          break;
        case LayerOneofCase.Max:
          if (Max == null) {
            Max = new global::CoreML.Specification.MaxLayerParams();
          }
          Max.MergeFrom(other.Max);
          break;
        case LayerOneofCase.Min:
          if (Min == null) {
            Min = new global::CoreML.Specification.MinLayerParams();
          }
          Min.MergeFrom(other.Min);
          break;
        case LayerOneofCase.Dot:
          if (Dot == null) {
            Dot = new global::CoreML.Specification.DotProductLayerParams();
          }
          Dot.MergeFrom(other.Dot);
          break;
        case LayerOneofCase.Reduce:
          if (Reduce == null) {
            Reduce = new global::CoreML.Specification.ReduceLayerParams();
          }
          Reduce.MergeFrom(other.Reduce);
          break;
        case LayerOneofCase.LoadConstant:
          if (LoadConstant == null) {
            LoadConstant = new global::CoreML.Specification.LoadConstantLayerParams();
          }
          LoadConstant.MergeFrom(other.LoadConstant);
          break;
        case LayerOneofCase.Reshape:
          if (Reshape == null) {
            Reshape = new global::CoreML.Specification.ReshapeLayerParams();
          }
          Reshape.MergeFrom(other.Reshape);
          break;
        case LayerOneofCase.Flatten:
          if (Flatten == null) {
            Flatten = new global::CoreML.Specification.FlattenLayerParams();
          }
          Flatten.MergeFrom(other.Flatten);
          break;
        case LayerOneofCase.Permute:
          if (Permute == null) {
            Permute = new global::CoreML.Specification.PermuteLayerParams();
          }
          Permute.MergeFrom(other.Permute);
          break;
        case LayerOneofCase.Concat:
          if (Concat == null) {
            Concat = new global::CoreML.Specification.ConcatLayerParams();
          }
          Concat.MergeFrom(other.Concat);
          break;
        case LayerOneofCase.Split:
          if (Split == null) {
            Split = new global::CoreML.Specification.SplitLayerParams();
          }
          Split.MergeFrom(other.Split);
          break;
        case LayerOneofCase.SequenceRepeat:
          if (SequenceRepeat == null) {
            SequenceRepeat = new global::CoreML.Specification.SequenceRepeatLayerParams();
          }
          SequenceRepeat.MergeFrom(other.SequenceRepeat);
          break;
        case LayerOneofCase.ReorganizeData:
          if (ReorganizeData == null) {
            ReorganizeData = new global::CoreML.Specification.ReorganizeDataLayerParams();
          }
          ReorganizeData.MergeFrom(other.ReorganizeData);
          break;
        case LayerOneofCase.Slice:
          if (Slice == null) {
            Slice = new global::CoreML.Specification.SliceLayerParams();
          }
          Slice.MergeFrom(other.Slice);
          break;
        case LayerOneofCase.SimpleRecurrent:
          if (SimpleRecurrent == null) {
            SimpleRecurrent = new global::CoreML.Specification.SimpleRecurrentLayerParams();
          }
          SimpleRecurrent.MergeFrom(other.SimpleRecurrent);
          break;
        case LayerOneofCase.Gru:
          if (Gru == null) {
            Gru = new global::CoreML.Specification.GRULayerParams();
          }
          Gru.MergeFrom(other.Gru);
          break;
        case LayerOneofCase.UniDirectionalLSTM:
          if (UniDirectionalLSTM == null) {
            UniDirectionalLSTM = new global::CoreML.Specification.UniDirectionalLSTMLayerParams();
          }
          UniDirectionalLSTM.MergeFrom(other.UniDirectionalLSTM);
          break;
        case LayerOneofCase.BiDirectionalLSTM:
          if (BiDirectionalLSTM == null) {
            BiDirectionalLSTM = new global::CoreML.Specification.BiDirectionalLSTMLayerParams();
          }
          BiDirectionalLSTM.MergeFrom(other.BiDirectionalLSTM);
          break;
        case LayerOneofCase.Custom:
          if (Custom == null) {
            Custom = new global::CoreML.Specification.CustomLayerParams();
          }
          Custom.MergeFrom(other.Custom);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            input_.AddEntriesFrom(input, _repeated_input_codec);
            break;
          }
          case 26: {
            output_.AddEntriesFrom(input, _repeated_output_codec);
            break;
          }
          case 802: {
            global::CoreML.Specification.ConvolutionLayerParams subBuilder = new global::CoreML.Specification.ConvolutionLayerParams();
            if (layerCase_ == LayerOneofCase.Convolution) {
              subBuilder.MergeFrom(Convolution);
            }
            input.ReadMessage(subBuilder);
            Convolution = subBuilder;
            break;
          }
          case 962: {
            global::CoreML.Specification.PoolingLayerParams subBuilder = new global::CoreML.Specification.PoolingLayerParams();
            if (layerCase_ == LayerOneofCase.Pooling) {
              subBuilder.MergeFrom(Pooling);
            }
            input.ReadMessage(subBuilder);
            Pooling = subBuilder;
            break;
          }
          case 1042: {
            global::CoreML.Specification.ActivationParams subBuilder = new global::CoreML.Specification.ActivationParams();
            if (layerCase_ == LayerOneofCase.Activation) {
              subBuilder.MergeFrom(Activation);
            }
            input.ReadMessage(subBuilder);
            Activation = subBuilder;
            break;
          }
          case 1122: {
            global::CoreML.Specification.InnerProductLayerParams subBuilder = new global::CoreML.Specification.InnerProductLayerParams();
            if (layerCase_ == LayerOneofCase.InnerProduct) {
              subBuilder.MergeFrom(InnerProduct);
            }
            input.ReadMessage(subBuilder);
            InnerProduct = subBuilder;
            break;
          }
          case 1202: {
            global::CoreML.Specification.EmbeddingLayerParams subBuilder = new global::CoreML.Specification.EmbeddingLayerParams();
            if (layerCase_ == LayerOneofCase.Embedding) {
              subBuilder.MergeFrom(Embedding);
            }
            input.ReadMessage(subBuilder);
            Embedding = subBuilder;
            break;
          }
          case 1282: {
            global::CoreML.Specification.BatchnormLayerParams subBuilder = new global::CoreML.Specification.BatchnormLayerParams();
            if (layerCase_ == LayerOneofCase.Batchnorm) {
              subBuilder.MergeFrom(Batchnorm);
            }
            input.ReadMessage(subBuilder);
            Batchnorm = subBuilder;
            break;
          }
          case 1322: {
            global::CoreML.Specification.MeanVarianceNormalizeLayerParams subBuilder = new global::CoreML.Specification.MeanVarianceNormalizeLayerParams();
            if (layerCase_ == LayerOneofCase.Mvn) {
              subBuilder.MergeFrom(Mvn);
            }
            input.ReadMessage(subBuilder);
            Mvn = subBuilder;
            break;
          }
          case 1362: {
            global::CoreML.Specification.L2NormalizeLayerParams subBuilder = new global::CoreML.Specification.L2NormalizeLayerParams();
            if (layerCase_ == LayerOneofCase.L2Normalize) {
              subBuilder.MergeFrom(L2Normalize);
            }
            input.ReadMessage(subBuilder);
            L2Normalize = subBuilder;
            break;
          }
          case 1402: {
            global::CoreML.Specification.SoftmaxLayerParams subBuilder = new global::CoreML.Specification.SoftmaxLayerParams();
            if (layerCase_ == LayerOneofCase.Softmax) {
              subBuilder.MergeFrom(Softmax);
            }
            input.ReadMessage(subBuilder);
            Softmax = subBuilder;
            break;
          }
          case 1442: {
            global::CoreML.Specification.LRNLayerParams subBuilder = new global::CoreML.Specification.LRNLayerParams();
            if (layerCase_ == LayerOneofCase.Lrn) {
              subBuilder.MergeFrom(Lrn);
            }
            input.ReadMessage(subBuilder);
            Lrn = subBuilder;
            break;
          }
          case 1522: {
            global::CoreML.Specification.CropLayerParams subBuilder = new global::CoreML.Specification.CropLayerParams();
            if (layerCase_ == LayerOneofCase.Crop) {
              subBuilder.MergeFrom(Crop);
            }
            input.ReadMessage(subBuilder);
            Crop = subBuilder;
            break;
          }
          case 1602: {
            global::CoreML.Specification.PaddingLayerParams subBuilder = new global::CoreML.Specification.PaddingLayerParams();
            if (layerCase_ == LayerOneofCase.Padding) {
              subBuilder.MergeFrom(Padding);
            }
            input.ReadMessage(subBuilder);
            Padding = subBuilder;
            break;
          }
          case 1682: {
            global::CoreML.Specification.UpsampleLayerParams subBuilder = new global::CoreML.Specification.UpsampleLayerParams();
            if (layerCase_ == LayerOneofCase.Upsample) {
              subBuilder.MergeFrom(Upsample);
            }
            input.ReadMessage(subBuilder);
            Upsample = subBuilder;
            break;
          }
          case 1762: {
            global::CoreML.Specification.UnaryFunctionLayerParams subBuilder = new global::CoreML.Specification.UnaryFunctionLayerParams();
            if (layerCase_ == LayerOneofCase.Unary) {
              subBuilder.MergeFrom(Unary);
            }
            input.ReadMessage(subBuilder);
            Unary = subBuilder;
            break;
          }
          case 1842: {
            global::CoreML.Specification.AddLayerParams subBuilder = new global::CoreML.Specification.AddLayerParams();
            if (layerCase_ == LayerOneofCase.Add) {
              subBuilder.MergeFrom(Add);
            }
            input.ReadMessage(subBuilder);
            Add = subBuilder;
            break;
          }
          case 1850: {
            global::CoreML.Specification.MultiplyLayerParams subBuilder = new global::CoreML.Specification.MultiplyLayerParams();
            if (layerCase_ == LayerOneofCase.Multiply) {
              subBuilder.MergeFrom(Multiply);
            }
            input.ReadMessage(subBuilder);
            Multiply = subBuilder;
            break;
          }
          case 1922: {
            global::CoreML.Specification.AverageLayerParams subBuilder = new global::CoreML.Specification.AverageLayerParams();
            if (layerCase_ == LayerOneofCase.Average) {
              subBuilder.MergeFrom(Average);
            }
            input.ReadMessage(subBuilder);
            Average = subBuilder;
            break;
          }
          case 1962: {
            global::CoreML.Specification.ScaleLayerParams subBuilder = new global::CoreML.Specification.ScaleLayerParams();
            if (layerCase_ == LayerOneofCase.Scale) {
              subBuilder.MergeFrom(Scale);
            }
            input.ReadMessage(subBuilder);
            Scale = subBuilder;
            break;
          }
          case 2002: {
            global::CoreML.Specification.BiasLayerParams subBuilder = new global::CoreML.Specification.BiasLayerParams();
            if (layerCase_ == LayerOneofCase.Bias) {
              subBuilder.MergeFrom(Bias);
            }
            input.ReadMessage(subBuilder);
            Bias = subBuilder;
            break;
          }
          case 2082: {
            global::CoreML.Specification.MaxLayerParams subBuilder = new global::CoreML.Specification.MaxLayerParams();
            if (layerCase_ == LayerOneofCase.Max) {
              subBuilder.MergeFrom(Max);
            }
            input.ReadMessage(subBuilder);
            Max = subBuilder;
            break;
          }
          case 2090: {
            global::CoreML.Specification.MinLayerParams subBuilder = new global::CoreML.Specification.MinLayerParams();
            if (layerCase_ == LayerOneofCase.Min) {
              subBuilder.MergeFrom(Min);
            }
            input.ReadMessage(subBuilder);
            Min = subBuilder;
            break;
          }
          case 2162: {
            global::CoreML.Specification.DotProductLayerParams subBuilder = new global::CoreML.Specification.DotProductLayerParams();
            if (layerCase_ == LayerOneofCase.Dot) {
              subBuilder.MergeFrom(Dot);
            }
            input.ReadMessage(subBuilder);
            Dot = subBuilder;
            break;
          }
          case 2242: {
            global::CoreML.Specification.ReduceLayerParams subBuilder = new global::CoreML.Specification.ReduceLayerParams();
            if (layerCase_ == LayerOneofCase.Reduce) {
              subBuilder.MergeFrom(Reduce);
            }
            input.ReadMessage(subBuilder);
            Reduce = subBuilder;
            break;
          }
          case 2322: {
            global::CoreML.Specification.LoadConstantLayerParams subBuilder = new global::CoreML.Specification.LoadConstantLayerParams();
            if (layerCase_ == LayerOneofCase.LoadConstant) {
              subBuilder.MergeFrom(LoadConstant);
            }
            input.ReadMessage(subBuilder);
            LoadConstant = subBuilder;
            break;
          }
          case 2402: {
            global::CoreML.Specification.ReshapeLayerParams subBuilder = new global::CoreML.Specification.ReshapeLayerParams();
            if (layerCase_ == LayerOneofCase.Reshape) {
              subBuilder.MergeFrom(Reshape);
            }
            input.ReadMessage(subBuilder);
            Reshape = subBuilder;
            break;
          }
          case 2410: {
            global::CoreML.Specification.FlattenLayerParams subBuilder = new global::CoreML.Specification.FlattenLayerParams();
            if (layerCase_ == LayerOneofCase.Flatten) {
              subBuilder.MergeFrom(Flatten);
            }
            input.ReadMessage(subBuilder);
            Flatten = subBuilder;
            break;
          }
          case 2482: {
            global::CoreML.Specification.PermuteLayerParams subBuilder = new global::CoreML.Specification.PermuteLayerParams();
            if (layerCase_ == LayerOneofCase.Permute) {
              subBuilder.MergeFrom(Permute);
            }
            input.ReadMessage(subBuilder);
            Permute = subBuilder;
            break;
          }
          case 2562: {
            global::CoreML.Specification.ConcatLayerParams subBuilder = new global::CoreML.Specification.ConcatLayerParams();
            if (layerCase_ == LayerOneofCase.Concat) {
              subBuilder.MergeFrom(Concat);
            }
            input.ReadMessage(subBuilder);
            Concat = subBuilder;
            break;
          }
          case 2642: {
            global::CoreML.Specification.SplitLayerParams subBuilder = new global::CoreML.Specification.SplitLayerParams();
            if (layerCase_ == LayerOneofCase.Split) {
              subBuilder.MergeFrom(Split);
            }
            input.ReadMessage(subBuilder);
            Split = subBuilder;
            break;
          }
          case 2722: {
            global::CoreML.Specification.SequenceRepeatLayerParams subBuilder = new global::CoreML.Specification.SequenceRepeatLayerParams();
            if (layerCase_ == LayerOneofCase.SequenceRepeat) {
              subBuilder.MergeFrom(SequenceRepeat);
            }
            input.ReadMessage(subBuilder);
            SequenceRepeat = subBuilder;
            break;
          }
          case 2762: {
            global::CoreML.Specification.ReorganizeDataLayerParams subBuilder = new global::CoreML.Specification.ReorganizeDataLayerParams();
            if (layerCase_ == LayerOneofCase.ReorganizeData) {
              subBuilder.MergeFrom(ReorganizeData);
            }
            input.ReadMessage(subBuilder);
            ReorganizeData = subBuilder;
            break;
          }
          case 2802: {
            global::CoreML.Specification.SliceLayerParams subBuilder = new global::CoreML.Specification.SliceLayerParams();
            if (layerCase_ == LayerOneofCase.Slice) {
              subBuilder.MergeFrom(Slice);
            }
            input.ReadMessage(subBuilder);
            Slice = subBuilder;
            break;
          }
          case 3202: {
            global::CoreML.Specification.SimpleRecurrentLayerParams subBuilder = new global::CoreML.Specification.SimpleRecurrentLayerParams();
            if (layerCase_ == LayerOneofCase.SimpleRecurrent) {
              subBuilder.MergeFrom(SimpleRecurrent);
            }
            input.ReadMessage(subBuilder);
            SimpleRecurrent = subBuilder;
            break;
          }
          case 3282: {
            global::CoreML.Specification.GRULayerParams subBuilder = new global::CoreML.Specification.GRULayerParams();
            if (layerCase_ == LayerOneofCase.Gru) {
              subBuilder.MergeFrom(Gru);
            }
            input.ReadMessage(subBuilder);
            Gru = subBuilder;
            break;
          }
          case 3362: {
            global::CoreML.Specification.UniDirectionalLSTMLayerParams subBuilder = new global::CoreML.Specification.UniDirectionalLSTMLayerParams();
            if (layerCase_ == LayerOneofCase.UniDirectionalLSTM) {
              subBuilder.MergeFrom(UniDirectionalLSTM);
            }
            input.ReadMessage(subBuilder);
            UniDirectionalLSTM = subBuilder;
            break;
          }
          case 3442: {
            global::CoreML.Specification.BiDirectionalLSTMLayerParams subBuilder = new global::CoreML.Specification.BiDirectionalLSTMLayerParams();
            if (layerCase_ == LayerOneofCase.BiDirectionalLSTM) {
              subBuilder.MergeFrom(BiDirectionalLSTM);
            }
            input.ReadMessage(subBuilder);
            BiDirectionalLSTM = subBuilder;
            break;
          }
          case 4002: {
            global::CoreML.Specification.CustomLayerParams subBuilder = new global::CoreML.Specification.CustomLayerParams();
            if (layerCase_ == LayerOneofCase.Custom) {
              subBuilder.MergeFrom(Custom);
            }
            input.ReadMessage(subBuilder);
            Custom = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Specifies the amount of spatial border to be either padded or cropped.
  ///
  /// For padding:
  ///
  /// .. code::
  ///
  ///     H_out = borderAmounts[0].startEdgeSize + H_in + borderAmounts[0].endEdgeSize
  ///     W_out = borderAmounts[1].startEdgeSize + W_in + borderAmounts[1].endEdgeSize
  ///
  ///     topPaddingAmount == Height startEdgeSize
  ///     bottomPaddingAmount == Height endEdgeSize
  ///     leftPaddingAmount == Width startEdgeSize
  ///     rightPaddingAmount == Width endEdgeSize
  ///
  /// For cropping:
  ///
  /// .. code::
  ///
  ///     H_out = (-borderAmounts[0].startEdgeSize) + H_in + (-borderAmounts[0].endEdgeSize)
  ///     W_out = (-borderAmounts[1].startEdgeSize) + W_in + (-borderAmounts[1].endEdgeSize)
  ///
  ///     topCropAmount == Height startEdgeSize
  ///     bottomCropAmount == Height endEdgeSize
  ///     leftCropAmount == Width startEdgeSize
  ///     rightCropAmount == Width endEdgeSize
  /// </summary>
  public sealed partial class BorderAmounts : pb::IMessage<BorderAmounts> {
    private static readonly pb::MessageParser<BorderAmounts> _parser = new pb::MessageParser<BorderAmounts>(() => new BorderAmounts());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BorderAmounts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderAmounts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderAmounts(BorderAmounts other) : this() {
      borderAmounts_ = other.borderAmounts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderAmounts Clone() {
      return new BorderAmounts(this);
    }

    /// <summary>Field number for the "borderAmounts" field.</summary>
    public const int BorderAmounts_FieldNumber = 10;
    private static readonly pb::FieldCodec<global::CoreML.Specification.BorderAmounts.Types.EdgeSizes> _repeated_borderAmounts_codec
        = pb::FieldCodec.ForMessage(82, global::CoreML.Specification.BorderAmounts.Types.EdgeSizes.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.BorderAmounts.Types.EdgeSizes> borderAmounts_ = new pbc::RepeatedField<global::CoreML.Specification.BorderAmounts.Types.EdgeSizes>();
    /// <summary>
    ///*
    /// The border amounts.
    /// This must be length 2 in the order ``[H, W]``.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.BorderAmounts.Types.EdgeSizes> BorderAmounts_ {
      get { return borderAmounts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BorderAmounts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BorderAmounts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!borderAmounts_.Equals(other.borderAmounts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= borderAmounts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      borderAmounts_.WriteTo(output, _repeated_borderAmounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += borderAmounts_.CalculateSize(_repeated_borderAmounts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BorderAmounts other) {
      if (other == null) {
        return;
      }
      borderAmounts_.Add(other.borderAmounts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            borderAmounts_.AddEntriesFrom(input, _repeated_borderAmounts_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BorderAmounts message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class EdgeSizes : pb::IMessage<EdgeSizes> {
        private static readonly pb::MessageParser<EdgeSizes> _parser = new pb::MessageParser<EdgeSizes>(() => new EdgeSizes());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EdgeSizes> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CoreML.Specification.BorderAmounts.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EdgeSizes() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EdgeSizes(EdgeSizes other) : this() {
          startEdgeSize_ = other.startEdgeSize_;
          endEdgeSize_ = other.endEdgeSize_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EdgeSizes Clone() {
          return new EdgeSizes(this);
        }

        /// <summary>Field number for the "startEdgeSize" field.</summary>
        public const int StartEdgeSizeFieldNumber = 1;
        private ulong startEdgeSize_;
        /// <summary>
        ///*
        /// The amount to be padded or cropped from the beginning.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong StartEdgeSize {
          get { return startEdgeSize_; }
          set {
            startEdgeSize_ = value;
          }
        }

        /// <summary>Field number for the "endEdgeSize" field.</summary>
        public const int EndEdgeSizeFieldNumber = 2;
        private ulong endEdgeSize_;
        /// <summary>
        ///*
        /// The amount to be padded or cropped from the end.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong EndEdgeSize {
          get { return endEdgeSize_; }
          set {
            endEdgeSize_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EdgeSizes);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EdgeSizes other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (StartEdgeSize != other.StartEdgeSize) return false;
          if (EndEdgeSize != other.EndEdgeSize) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (StartEdgeSize != 0UL) hash ^= StartEdgeSize.GetHashCode();
          if (EndEdgeSize != 0UL) hash ^= EndEdgeSize.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (StartEdgeSize != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(StartEdgeSize);
          }
          if (EndEdgeSize != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(EndEdgeSize);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (StartEdgeSize != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartEdgeSize);
          }
          if (EndEdgeSize != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndEdgeSize);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EdgeSizes other) {
          if (other == null) {
            return;
          }
          if (other.StartEdgeSize != 0UL) {
            StartEdgeSize = other.StartEdgeSize;
          }
          if (other.EndEdgeSize != 0UL) {
            EndEdgeSize = other.EndEdgeSize;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                StartEdgeSize = input.ReadUInt64();
                break;
              }
              case 16: {
                EndEdgeSize = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// Specifies the type of padding to be used with Convolution/Deconvolution and Pooling layers.
  /// After padding, input spatial shape: ``[H_in, W_in]``, gets modified to the
  /// output spatial shape ``[H_out, W_out]``.
  ///
  /// .. code::
  ///
  ///      topPaddingAmount == Height startEdgeSize == borderAmounts[0].startEdgeSize
  ///      bottomPaddingAmount == Height endEdgeSize == borderAmounts[0].endEdgeSize
  ///      leftPaddingAmount == Width startEdgeSize == borderAmounts[1].startEdgeSize
  ///      rightPaddingAmount == Width endEdgeSize == borderAmounts[1].endEdgeSize
  ///
  /// With Convolution or Pooling:
  ///
  /// .. code::
  ///
  ///    H_out = int_division_round_down((H_in + topPaddingAmount + bottomPaddingAmount - KernelSize[0]),stride[0]) + 1
  ///
  /// which is same as:
  ///
  /// .. code::
  ///
  ///    H_out = int_division_round_up((H_in + topPaddingAmount + bottomPaddingAmount - KernelSize[0] + 1),stride[0])
  ///
  /// With Deconvolution:
  ///
  /// .. code::
  ///
  ///    H_out = (H_in-1) * stride[0] + kernelSize[0] - (topPaddingAmount + bottomPaddingAmount)
  ///
  /// The equivalent expressions hold true for ``W_out`` as well.
  ///
  /// By default, the values of ``paddingAmounts`` are set to ``0``,
  /// which results in a "true" valid padding.
  /// If non-zero values are provided for ``paddingAmounts``,
  /// "valid" convolution/pooling is performed within the spatially expanded input.
  /// </summary>
  public sealed partial class ValidPadding : pb::IMessage<ValidPadding> {
    private static readonly pb::MessageParser<ValidPadding> _parser = new pb::MessageParser<ValidPadding>(() => new ValidPadding());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValidPadding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidPadding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidPadding(ValidPadding other) : this() {
      paddingAmounts_ = other.paddingAmounts_ != null ? other.paddingAmounts_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidPadding Clone() {
      return new ValidPadding(this);
    }

    /// <summary>Field number for the "paddingAmounts" field.</summary>
    public const int PaddingAmountsFieldNumber = 1;
    private global::CoreML.Specification.BorderAmounts paddingAmounts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.BorderAmounts PaddingAmounts {
      get { return paddingAmounts_; }
      set {
        paddingAmounts_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValidPadding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValidPadding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PaddingAmounts, other.PaddingAmounts)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (paddingAmounts_ != null) hash ^= PaddingAmounts.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (paddingAmounts_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PaddingAmounts);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (paddingAmounts_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PaddingAmounts);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValidPadding other) {
      if (other == null) {
        return;
      }
      if (other.paddingAmounts_ != null) {
        if (paddingAmounts_ == null) {
          paddingAmounts_ = new global::CoreML.Specification.BorderAmounts();
        }
        PaddingAmounts.MergeFrom(other.PaddingAmounts);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (paddingAmounts_ == null) {
              paddingAmounts_ = new global::CoreML.Specification.BorderAmounts();
            }
            input.ReadMessage(paddingAmounts_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Specifies the type of padding to be used with Convolution/Deconvolution and pooling layers.
  /// After padding, input spatial shape: ``[H_in, W_in]``, gets modified to the
  /// output spatial shape ``[H_out, W_out]``.
  /// With Convolution or pooling:
  ///
  /// .. code::
  ///
  ///      H_out = int_division_round_up(H_in,stride[0])
  ///      W_out = int_division_round_up(W_in,stride[1])
  ///
  /// This is achieved by using the following padding amounts:
  ///
  /// .. code::
  ///
  ///     totalPaddingHeight = max(0,(H_out-1) * stride[0] + KernelSize[0] - Hin)
  ///     totalPaddingWidth = max(0,(W_out-1) * stride[1] + KernelSize[1] - Win)
  ///
  /// There are two modes of asymmetry:
  /// ``BOTTOM_RIGHT_HEAVY``, and ``TOP_LEFT_HEAVY``.
  ///
  /// If the mode is ``BOTTOM_RIGHT_HEAVY``:
  ///
  /// .. code::
  ///
  ///     topPaddingAmount = floor(totalPaddingHeight / 2)
  ///     bottomPaddingAmount = totalPaddingHeight - topPaddingAmount
  ///     leftPaddingAmount = floor(totalPaddingWidth / 2)
  ///     rightPaddingAmount = totalPaddingWidth - leftPaddingAmount
  ///
  /// If the mode is ``TOP_LEFT_HEAVY``:
  ///
  /// .. code::
  ///
  ///     bottomPaddingAmount = floor(totalPaddingHeight / 2)
  ///     topPaddingAmount = totalPaddingHeight - bottomPaddingAmount
  ///     rightPaddingAmount = floor(totalPaddingWidth / 2)
  ///     leftPaddingAmount = totalPaddingWidth - rightPaddingAmount
  ///
  /// With Deconvolution:
  ///
  /// .. code::
  ///
  ///    H_out = H_in * stride[0]
  ///    W_out = W_in * stride[1]
  /// </summary>
  public sealed partial class SamePadding : pb::IMessage<SamePadding> {
    private static readonly pb::MessageParser<SamePadding> _parser = new pb::MessageParser<SamePadding>(() => new SamePadding());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SamePadding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SamePadding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SamePadding(SamePadding other) : this() {
      asymmetryMode_ = other.asymmetryMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SamePadding Clone() {
      return new SamePadding(this);
    }

    /// <summary>Field number for the "asymmetryMode" field.</summary>
    public const int AsymmetryModeFieldNumber = 1;
    private global::CoreML.Specification.SamePadding.Types.SamePaddingMode asymmetryMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.SamePadding.Types.SamePaddingMode AsymmetryMode {
      get { return asymmetryMode_; }
      set {
        asymmetryMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SamePadding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SamePadding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AsymmetryMode != other.AsymmetryMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AsymmetryMode != 0) hash ^= AsymmetryMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AsymmetryMode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AsymmetryMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AsymmetryMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AsymmetryMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SamePadding other) {
      if (other == null) {
        return;
      }
      if (other.AsymmetryMode != 0) {
        AsymmetryMode = other.AsymmetryMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            asymmetryMode_ = (global::CoreML.Specification.SamePadding.Types.SamePaddingMode) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SamePadding message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SamePaddingMode {
        [pbr::OriginalName("BOTTOM_RIGHT_HEAVY")] BottomRightHeavy = 0,
        [pbr::OriginalName("TOP_LEFT_HEAVY")] TopLeftHeavy = 1,
      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// Weights for layer parameters.
  /// Weights are stored as repeated floating point numbers
  /// using row-major ordering
  /// and can represent 1-, 2-, 3-, or 4-dimensional data.
  /// </summary>
  public sealed partial class WeightParams : pb::IMessage<WeightParams> {
    private static readonly pb::MessageParser<WeightParams> _parser = new pb::MessageParser<WeightParams>(() => new WeightParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeightParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeightParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeightParams(WeightParams other) : this() {
      floatValue_ = other.floatValue_.Clone();
      float16Value_ = other.float16Value_;
      rawValue_ = other.rawValue_;
      quantization_ = other.quantization_ != null ? other.quantization_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeightParams Clone() {
      return new WeightParams(this);
    }

    /// <summary>Field number for the "floatValue" field.</summary>
    public const int FloatValueFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_floatValue_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> floatValue_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///*
    /// Values specified in single / float / FP32 precision.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> FloatValue {
      get { return floatValue_; }
    }

    /// <summary>Field number for the "float16Value" field.</summary>
    public const int Float16ValueFieldNumber = 2;
    private pb::ByteString float16Value_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    /// Values in 16-bit half precision floating point.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Float16Value {
      get { return float16Value_; }
      set {
        float16Value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rawValue" field.</summary>
    public const int RawValueFieldNumber = 30;
    private pb::ByteString rawValue_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    /// Raw value specification for custom layers and quantized lower precisions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RawValue {
      get { return rawValue_; }
      set {
        rawValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quantization" field.</summary>
    public const int QuantizationFieldNumber = 40;
    private global::CoreML.Specification.QuantizationParams quantization_;
    /// <summary>
    ///*
    /// Quantization related parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.QuantizationParams Quantization {
      get { return quantization_; }
      set {
        quantization_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeightParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeightParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!floatValue_.Equals(other.floatValue_)) return false;
      if (Float16Value != other.Float16Value) return false;
      if (RawValue != other.RawValue) return false;
      if (!object.Equals(Quantization, other.Quantization)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= floatValue_.GetHashCode();
      if (Float16Value.Length != 0) hash ^= Float16Value.GetHashCode();
      if (RawValue.Length != 0) hash ^= RawValue.GetHashCode();
      if (quantization_ != null) hash ^= Quantization.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      floatValue_.WriteTo(output, _repeated_floatValue_codec);
      if (Float16Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Float16Value);
      }
      if (RawValue.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteBytes(RawValue);
      }
      if (quantization_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(Quantization);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += floatValue_.CalculateSize(_repeated_floatValue_codec);
      if (Float16Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Float16Value);
      }
      if (RawValue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(RawValue);
      }
      if (quantization_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Quantization);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeightParams other) {
      if (other == null) {
        return;
      }
      floatValue_.Add(other.floatValue_);
      if (other.Float16Value.Length != 0) {
        Float16Value = other.Float16Value;
      }
      if (other.RawValue.Length != 0) {
        RawValue = other.RawValue;
      }
      if (other.quantization_ != null) {
        if (quantization_ == null) {
          quantization_ = new global::CoreML.Specification.QuantizationParams();
        }
        Quantization.MergeFrom(other.Quantization);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            floatValue_.AddEntriesFrom(input, _repeated_floatValue_codec);
            break;
          }
          case 18: {
            Float16Value = input.ReadBytes();
            break;
          }
          case 242: {
            RawValue = input.ReadBytes();
            break;
          }
          case 322: {
            if (quantization_ == null) {
              quantization_ = new global::CoreML.Specification.QuantizationParams();
            }
            input.ReadMessage(quantization_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Quantization parameters.
  /// </summary>
  public sealed partial class QuantizationParams : pb::IMessage<QuantizationParams> {
    private static readonly pb::MessageParser<QuantizationParams> _parser = new pb::MessageParser<QuantizationParams>(() => new QuantizationParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuantizationParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuantizationParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuantizationParams(QuantizationParams other) : this() {
      numberOfBits_ = other.numberOfBits_;
      switch (other.QuantizationTypeCase) {
        case QuantizationTypeOneofCase.LinearQuantization:
          LinearQuantization = other.LinearQuantization.Clone();
          break;
        case QuantizationTypeOneofCase.LookupTableQuantization:
          LookupTableQuantization = other.LookupTableQuantization.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuantizationParams Clone() {
      return new QuantizationParams(this);
    }

    /// <summary>Field number for the "numberOfBits" field.</summary>
    public const int NumberOfBitsFieldNumber = 1;
    private ulong numberOfBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NumberOfBits {
      get { return numberOfBits_; }
      set {
        numberOfBits_ = value;
      }
    }

    /// <summary>Field number for the "linearQuantization" field.</summary>
    public const int LinearQuantizationFieldNumber = 101;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.LinearQuantizationParams LinearQuantization {
      get { return quantizationTypeCase_ == QuantizationTypeOneofCase.LinearQuantization ? (global::CoreML.Specification.LinearQuantizationParams) quantizationType_ : null; }
      set {
        quantizationType_ = value;
        quantizationTypeCase_ = value == null ? QuantizationTypeOneofCase.None : QuantizationTypeOneofCase.LinearQuantization;
      }
    }

    /// <summary>Field number for the "lookupTableQuantization" field.</summary>
    public const int LookupTableQuantizationFieldNumber = 102;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.LookUpTableQuantizationParams LookupTableQuantization {
      get { return quantizationTypeCase_ == QuantizationTypeOneofCase.LookupTableQuantization ? (global::CoreML.Specification.LookUpTableQuantizationParams) quantizationType_ : null; }
      set {
        quantizationType_ = value;
        quantizationTypeCase_ = value == null ? QuantizationTypeOneofCase.None : QuantizationTypeOneofCase.LookupTableQuantization;
      }
    }

    private object quantizationType_;
    /// <summary>Enum of possible cases for the "QuantizationType" oneof.</summary>
    public enum QuantizationTypeOneofCase {
      None = 0,
      LinearQuantization = 101,
      LookupTableQuantization = 102,
    }
    private QuantizationTypeOneofCase quantizationTypeCase_ = QuantizationTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuantizationTypeOneofCase QuantizationTypeCase {
      get { return quantizationTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuantizationType() {
      quantizationTypeCase_ = QuantizationTypeOneofCase.None;
      quantizationType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuantizationParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuantizationParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumberOfBits != other.NumberOfBits) return false;
      if (!object.Equals(LinearQuantization, other.LinearQuantization)) return false;
      if (!object.Equals(LookupTableQuantization, other.LookupTableQuantization)) return false;
      if (QuantizationTypeCase != other.QuantizationTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumberOfBits != 0UL) hash ^= NumberOfBits.GetHashCode();
      if (quantizationTypeCase_ == QuantizationTypeOneofCase.LinearQuantization) hash ^= LinearQuantization.GetHashCode();
      if (quantizationTypeCase_ == QuantizationTypeOneofCase.LookupTableQuantization) hash ^= LookupTableQuantization.GetHashCode();
      hash ^= (int) quantizationTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumberOfBits != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(NumberOfBits);
      }
      if (quantizationTypeCase_ == QuantizationTypeOneofCase.LinearQuantization) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(LinearQuantization);
      }
      if (quantizationTypeCase_ == QuantizationTypeOneofCase.LookupTableQuantization) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(LookupTableQuantization);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumberOfBits != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NumberOfBits);
      }
      if (quantizationTypeCase_ == QuantizationTypeOneofCase.LinearQuantization) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LinearQuantization);
      }
      if (quantizationTypeCase_ == QuantizationTypeOneofCase.LookupTableQuantization) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LookupTableQuantization);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuantizationParams other) {
      if (other == null) {
        return;
      }
      if (other.NumberOfBits != 0UL) {
        NumberOfBits = other.NumberOfBits;
      }
      switch (other.QuantizationTypeCase) {
        case QuantizationTypeOneofCase.LinearQuantization:
          if (LinearQuantization == null) {
            LinearQuantization = new global::CoreML.Specification.LinearQuantizationParams();
          }
          LinearQuantization.MergeFrom(other.LinearQuantization);
          break;
        case QuantizationTypeOneofCase.LookupTableQuantization:
          if (LookupTableQuantization == null) {
            LookupTableQuantization = new global::CoreML.Specification.LookUpTableQuantizationParams();
          }
          LookupTableQuantization.MergeFrom(other.LookupTableQuantization);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NumberOfBits = input.ReadUInt64();
            break;
          }
          case 810: {
            global::CoreML.Specification.LinearQuantizationParams subBuilder = new global::CoreML.Specification.LinearQuantizationParams();
            if (quantizationTypeCase_ == QuantizationTypeOneofCase.LinearQuantization) {
              subBuilder.MergeFrom(LinearQuantization);
            }
            input.ReadMessage(subBuilder);
            LinearQuantization = subBuilder;
            break;
          }
          case 818: {
            global::CoreML.Specification.LookUpTableQuantizationParams subBuilder = new global::CoreML.Specification.LookUpTableQuantizationParams();
            if (quantizationTypeCase_ == QuantizationTypeOneofCase.LookupTableQuantization) {
              subBuilder.MergeFrom(LookupTableQuantization);
            }
            input.ReadMessage(subBuilder);
            LookupTableQuantization = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class LinearQuantizationParams : pb::IMessage<LinearQuantizationParams> {
    private static readonly pb::MessageParser<LinearQuantizationParams> _parser = new pb::MessageParser<LinearQuantizationParams>(() => new LinearQuantizationParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LinearQuantizationParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinearQuantizationParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinearQuantizationParams(LinearQuantizationParams other) : this() {
      scale_ = other.scale_.Clone();
      bias_ = other.bias_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinearQuantizationParams Clone() {
      return new LinearQuantizationParams(this);
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_scale_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> scale_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///*
    /// Stores scale and bias values corresponding to the quantized weights.
    /// Must be an array of 1 element, or an array of C elements, where C
    /// is number of output channels. For recurrent layers it is equal to
    /// the output vector size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Scale {
      get { return scale_; }
    }

    /// <summary>Field number for the "bias" field.</summary>
    public const int BiasFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_bias_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> bias_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Bias {
      get { return bias_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LinearQuantizationParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LinearQuantizationParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!scale_.Equals(other.scale_)) return false;
      if(!bias_.Equals(other.bias_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= scale_.GetHashCode();
      hash ^= bias_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      scale_.WriteTo(output, _repeated_scale_codec);
      bias_.WriteTo(output, _repeated_bias_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += scale_.CalculateSize(_repeated_scale_codec);
      size += bias_.CalculateSize(_repeated_bias_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LinearQuantizationParams other) {
      if (other == null) {
        return;
      }
      scale_.Add(other.scale_);
      bias_.Add(other.bias_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            scale_.AddEntriesFrom(input, _repeated_scale_codec);
            break;
          }
          case 18:
          case 21: {
            bias_.AddEntriesFrom(input, _repeated_bias_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LookUpTableQuantizationParams : pb::IMessage<LookUpTableQuantizationParams> {
    private static readonly pb::MessageParser<LookUpTableQuantizationParams> _parser = new pb::MessageParser<LookUpTableQuantizationParams>(() => new LookUpTableQuantizationParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LookUpTableQuantizationParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LookUpTableQuantizationParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LookUpTableQuantizationParams(LookUpTableQuantizationParams other) : this() {
      floatValue_ = other.floatValue_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LookUpTableQuantizationParams Clone() {
      return new LookUpTableQuantizationParams(this);
    }

    /// <summary>Field number for the "floatValue" field.</summary>
    public const int FloatValueFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_floatValue_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> floatValue_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Stores look-up table quantization values. Must be an array of 
    ///(2^numberOfBits) Elements.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> FloatValue {
      get { return floatValue_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LookUpTableQuantizationParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LookUpTableQuantizationParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!floatValue_.Equals(other.floatValue_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= floatValue_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      floatValue_.WriteTo(output, _repeated_floatValue_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += floatValue_.CalculateSize(_repeated_floatValue_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LookUpTableQuantizationParams other) {
      if (other == null) {
        return;
      }
      floatValue_.Add(other.floatValue_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            floatValue_.AddEntriesFrom(input, _repeated_floatValue_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A layer that performs spatial convolution or deconvolution.
  ///
  /// .. code::
  ///
  ///      y = ConvolutionLayer(x)
  ///
  /// Requires 1 input and produces 1 output.
  ///
  /// Input
  ///  A blob with shape ``[inputChannels,inputHeight,inputWidth]`` or ``[C_in, H_in, W_in]``.
  ///
  /// Output
  ///  A blob with shape ``[outputChannels,outputHeight,outputWidth]`` or  ``[C_out, H_out, W_out]``.
  ///
  /// If ``dilationFactor`` is not 1, effective kernel size is
  /// modified as follows:
  ///
  /// .. code::
  ///
  ///      KernelSize[0] &lt;-- (kernelSize[0]-1) * dilationFactor[0] + 1
  ///      KernelSize[1] &lt;-- (kernelSize[1]-1) * dilationFactor[1] + 1
  ///
  /// Type of padding can be ``valid`` or ``same``. Output spatial dimensions depend on the
  /// the type of padding. For details, refer to the descriptions of the messages "ValidPadding"
  /// and "SamePadding". Padded values are all zeros.
  ///
  /// For Deconvolution, ``ConvolutionPaddingType`` (``valid`` or ``same``) is ignored when ``outputShape`` is set.
  /// </summary>
  public sealed partial class ConvolutionLayerParams : pb::IMessage<ConvolutionLayerParams> {
    private static readonly pb::MessageParser<ConvolutionLayerParams> _parser = new pb::MessageParser<ConvolutionLayerParams>(() => new ConvolutionLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConvolutionLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvolutionLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvolutionLayerParams(ConvolutionLayerParams other) : this() {
      outputChannels_ = other.outputChannels_;
      kernelChannels_ = other.kernelChannels_;
      nGroups_ = other.nGroups_;
      kernelSize_ = other.kernelSize_.Clone();
      stride_ = other.stride_.Clone();
      dilationFactor_ = other.dilationFactor_.Clone();
      isDeconvolution_ = other.isDeconvolution_;
      hasBias_ = other.hasBias_;
      weights_ = other.weights_ != null ? other.weights_.Clone() : null;
      bias_ = other.bias_ != null ? other.bias_.Clone() : null;
      outputShape_ = other.outputShape_.Clone();
      switch (other.ConvolutionPaddingTypeCase) {
        case ConvolutionPaddingTypeOneofCase.Valid:
          Valid = other.Valid.Clone();
          break;
        case ConvolutionPaddingTypeOneofCase.Same:
          Same = other.Same.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvolutionLayerParams Clone() {
      return new ConvolutionLayerParams(this);
    }

    /// <summary>Field number for the "outputChannels" field.</summary>
    public const int OutputChannelsFieldNumber = 1;
    private ulong outputChannels_;
    /// <summary>
    ///*
    /// The number of kernels.
    /// Same as ``C_out`` used in the layer description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OutputChannels {
      get { return outputChannels_; }
      set {
        outputChannels_ = value;
      }
    }

    /// <summary>Field number for the "kernelChannels" field.</summary>
    public const int KernelChannelsFieldNumber = 2;
    private ulong kernelChannels_;
    /// <summary>
    ///*
    /// Channel dimension of the kernels.
    /// Must be equal to ``inputChannels / nGroups``, if isDeconvolution == False
    /// Must be equal to ``inputChannels``, if isDeconvolution == True
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong KernelChannels {
      get { return kernelChannels_; }
      set {
        kernelChannels_ = value;
      }
    }

    /// <summary>Field number for the "nGroups" field.</summary>
    public const int NGroupsFieldNumber = 10;
    private ulong nGroups_;
    /// <summary>
    ///*
    /// Group convolution, i.e. weight reuse along channel axis.
    /// Input and kernels are divided into g groups
    /// and convolution / deconvolution is applied within the groups independently.
    /// If not set or 0, it is set to the default value 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NGroups {
      get { return nGroups_; }
      set {
        nGroups_ = value;
      }
    }

    /// <summary>Field number for the "kernelSize" field.</summary>
    public const int KernelSizeFieldNumber = 20;
    private static readonly pb::FieldCodec<ulong> _repeated_kernelSize_codec
        = pb::FieldCodec.ForUInt64(162);
    private readonly pbc::RepeatedField<ulong> kernelSize_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///*
    /// Must be length 2 in the order ``[H, W]``.
    /// If not set, default value ``[3, 3]`` is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> KernelSize {
      get { return kernelSize_; }
    }

    /// <summary>Field number for the "stride" field.</summary>
    public const int StrideFieldNumber = 30;
    private static readonly pb::FieldCodec<ulong> _repeated_stride_codec
        = pb::FieldCodec.ForUInt64(242);
    private readonly pbc::RepeatedField<ulong> stride_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///*
    /// Must be length 2 in the order ``[H, W]``.
    /// If not set, default value ``[1, 1]`` is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Stride {
      get { return stride_; }
    }

    /// <summary>Field number for the "dilationFactor" field.</summary>
    public const int DilationFactorFieldNumber = 40;
    private static readonly pb::FieldCodec<ulong> _repeated_dilationFactor_codec
        = pb::FieldCodec.ForUInt64(322);
    private readonly pbc::RepeatedField<ulong> dilationFactor_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///*
    /// Must be length 2 in order ``[H, W]``.
    /// If not set, default value ``[1, 1]`` is used.
    /// It is ignored if ``isDeconvolution == true``.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> DilationFactor {
      get { return dilationFactor_; }
    }

    /// <summary>Field number for the "valid" field.</summary>
    public const int ValidFieldNumber = 50;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ValidPadding Valid {
      get { return convolutionPaddingTypeCase_ == ConvolutionPaddingTypeOneofCase.Valid ? (global::CoreML.Specification.ValidPadding) convolutionPaddingType_ : null; }
      set {
        convolutionPaddingType_ = value;
        convolutionPaddingTypeCase_ = value == null ? ConvolutionPaddingTypeOneofCase.None : ConvolutionPaddingTypeOneofCase.Valid;
      }
    }

    /// <summary>Field number for the "same" field.</summary>
    public const int SameFieldNumber = 51;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.SamePadding Same {
      get { return convolutionPaddingTypeCase_ == ConvolutionPaddingTypeOneofCase.Same ? (global::CoreML.Specification.SamePadding) convolutionPaddingType_ : null; }
      set {
        convolutionPaddingType_ = value;
        convolutionPaddingTypeCase_ = value == null ? ConvolutionPaddingTypeOneofCase.None : ConvolutionPaddingTypeOneofCase.Same;
      }
    }

    /// <summary>Field number for the "isDeconvolution" field.</summary>
    public const int IsDeconvolutionFieldNumber = 60;
    private bool isDeconvolution_;
    /// <summary>
    ///*
    /// Flag to specify whether it is a deconvolution layer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDeconvolution {
      get { return isDeconvolution_; }
      set {
        isDeconvolution_ = value;
      }
    }

    /// <summary>Field number for the "hasBias" field.</summary>
    public const int HasBiasFieldNumber = 70;
    private bool hasBias_;
    /// <summary>
    ///*
    /// Flag to specify whether a bias is to be added or not.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBias {
      get { return hasBias_; }
      set {
        hasBias_ = value;
      }
    }

    /// <summary>Field number for the "weights" field.</summary>
    public const int WeightsFieldNumber = 90;
    private global::CoreML.Specification.WeightParams weights_;
    /// <summary>
    ///*
    /// Weights associated with this layer.
    /// If convolution (``isDeconvolution == false``), weights have the shape
    /// ``[outputChannels, kernelChannels, kernelHeight, kernelWidth]``, where kernelChannels == inputChannels / nGroups
    /// If deconvolution (``isDeconvolution == true``) weights have the shape
    /// ``[kernelChannels, outputChannels / nGroups, kernelHeight, kernelWidth]``, where kernelChannels == inputChannels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams Weights {
      get { return weights_; }
      set {
        weights_ = value;
      }
    }

    /// <summary>Field number for the "bias" field.</summary>
    public const int BiasFieldNumber = 91;
    private global::CoreML.Specification.WeightParams bias_;
    /// <summary>
    //// Must be of size [outputChannels].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams Bias {
      get { return bias_; }
      set {
        bias_ = value;
      }
    }

    /// <summary>Field number for the "outputShape" field.</summary>
    public const int OutputShapeFieldNumber = 100;
    private static readonly pb::FieldCodec<ulong> _repeated_outputShape_codec
        = pb::FieldCodec.ForUInt64(802);
    private readonly pbc::RepeatedField<ulong> outputShape_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///*
    /// The output shape, which has length 2 ``[H_out, W_out]``.
    /// This is used only for deconvolution (``isDeconvolution == true``).
    /// If not set, the deconvolution output shape is calculated
    /// based on ``ConvolutionPaddingType``.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> OutputShape {
      get { return outputShape_; }
    }

    private object convolutionPaddingType_;
    /// <summary>Enum of possible cases for the "ConvolutionPaddingType" oneof.</summary>
    public enum ConvolutionPaddingTypeOneofCase {
      None = 0,
      Valid = 50,
      Same = 51,
    }
    private ConvolutionPaddingTypeOneofCase convolutionPaddingTypeCase_ = ConvolutionPaddingTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvolutionPaddingTypeOneofCase ConvolutionPaddingTypeCase {
      get { return convolutionPaddingTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConvolutionPaddingType() {
      convolutionPaddingTypeCase_ = ConvolutionPaddingTypeOneofCase.None;
      convolutionPaddingType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConvolutionLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConvolutionLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutputChannels != other.OutputChannels) return false;
      if (KernelChannels != other.KernelChannels) return false;
      if (NGroups != other.NGroups) return false;
      if(!kernelSize_.Equals(other.kernelSize_)) return false;
      if(!stride_.Equals(other.stride_)) return false;
      if(!dilationFactor_.Equals(other.dilationFactor_)) return false;
      if (!object.Equals(Valid, other.Valid)) return false;
      if (!object.Equals(Same, other.Same)) return false;
      if (IsDeconvolution != other.IsDeconvolution) return false;
      if (HasBias != other.HasBias) return false;
      if (!object.Equals(Weights, other.Weights)) return false;
      if (!object.Equals(Bias, other.Bias)) return false;
      if(!outputShape_.Equals(other.outputShape_)) return false;
      if (ConvolutionPaddingTypeCase != other.ConvolutionPaddingTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OutputChannels != 0UL) hash ^= OutputChannels.GetHashCode();
      if (KernelChannels != 0UL) hash ^= KernelChannels.GetHashCode();
      if (NGroups != 0UL) hash ^= NGroups.GetHashCode();
      hash ^= kernelSize_.GetHashCode();
      hash ^= stride_.GetHashCode();
      hash ^= dilationFactor_.GetHashCode();
      if (convolutionPaddingTypeCase_ == ConvolutionPaddingTypeOneofCase.Valid) hash ^= Valid.GetHashCode();
      if (convolutionPaddingTypeCase_ == ConvolutionPaddingTypeOneofCase.Same) hash ^= Same.GetHashCode();
      if (IsDeconvolution != false) hash ^= IsDeconvolution.GetHashCode();
      if (HasBias != false) hash ^= HasBias.GetHashCode();
      if (weights_ != null) hash ^= Weights.GetHashCode();
      if (bias_ != null) hash ^= Bias.GetHashCode();
      hash ^= outputShape_.GetHashCode();
      hash ^= (int) convolutionPaddingTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OutputChannels != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(OutputChannels);
      }
      if (KernelChannels != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(KernelChannels);
      }
      if (NGroups != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(NGroups);
      }
      kernelSize_.WriteTo(output, _repeated_kernelSize_codec);
      stride_.WriteTo(output, _repeated_stride_codec);
      dilationFactor_.WriteTo(output, _repeated_dilationFactor_codec);
      if (convolutionPaddingTypeCase_ == ConvolutionPaddingTypeOneofCase.Valid) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(Valid);
      }
      if (convolutionPaddingTypeCase_ == ConvolutionPaddingTypeOneofCase.Same) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(Same);
      }
      if (IsDeconvolution != false) {
        output.WriteRawTag(224, 3);
        output.WriteBool(IsDeconvolution);
      }
      if (HasBias != false) {
        output.WriteRawTag(176, 4);
        output.WriteBool(HasBias);
      }
      if (weights_ != null) {
        output.WriteRawTag(210, 5);
        output.WriteMessage(Weights);
      }
      if (bias_ != null) {
        output.WriteRawTag(218, 5);
        output.WriteMessage(Bias);
      }
      outputShape_.WriteTo(output, _repeated_outputShape_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OutputChannels != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OutputChannels);
      }
      if (KernelChannels != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(KernelChannels);
      }
      if (NGroups != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NGroups);
      }
      size += kernelSize_.CalculateSize(_repeated_kernelSize_codec);
      size += stride_.CalculateSize(_repeated_stride_codec);
      size += dilationFactor_.CalculateSize(_repeated_dilationFactor_codec);
      if (convolutionPaddingTypeCase_ == ConvolutionPaddingTypeOneofCase.Valid) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Valid);
      }
      if (convolutionPaddingTypeCase_ == ConvolutionPaddingTypeOneofCase.Same) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Same);
      }
      if (IsDeconvolution != false) {
        size += 2 + 1;
      }
      if (HasBias != false) {
        size += 2 + 1;
      }
      if (weights_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Weights);
      }
      if (bias_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Bias);
      }
      size += outputShape_.CalculateSize(_repeated_outputShape_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConvolutionLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.OutputChannels != 0UL) {
        OutputChannels = other.OutputChannels;
      }
      if (other.KernelChannels != 0UL) {
        KernelChannels = other.KernelChannels;
      }
      if (other.NGroups != 0UL) {
        NGroups = other.NGroups;
      }
      kernelSize_.Add(other.kernelSize_);
      stride_.Add(other.stride_);
      dilationFactor_.Add(other.dilationFactor_);
      if (other.IsDeconvolution != false) {
        IsDeconvolution = other.IsDeconvolution;
      }
      if (other.HasBias != false) {
        HasBias = other.HasBias;
      }
      if (other.weights_ != null) {
        if (weights_ == null) {
          weights_ = new global::CoreML.Specification.WeightParams();
        }
        Weights.MergeFrom(other.Weights);
      }
      if (other.bias_ != null) {
        if (bias_ == null) {
          bias_ = new global::CoreML.Specification.WeightParams();
        }
        Bias.MergeFrom(other.Bias);
      }
      outputShape_.Add(other.outputShape_);
      switch (other.ConvolutionPaddingTypeCase) {
        case ConvolutionPaddingTypeOneofCase.Valid:
          if (Valid == null) {
            Valid = new global::CoreML.Specification.ValidPadding();
          }
          Valid.MergeFrom(other.Valid);
          break;
        case ConvolutionPaddingTypeOneofCase.Same:
          if (Same == null) {
            Same = new global::CoreML.Specification.SamePadding();
          }
          Same.MergeFrom(other.Same);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OutputChannels = input.ReadUInt64();
            break;
          }
          case 16: {
            KernelChannels = input.ReadUInt64();
            break;
          }
          case 80: {
            NGroups = input.ReadUInt64();
            break;
          }
          case 162:
          case 160: {
            kernelSize_.AddEntriesFrom(input, _repeated_kernelSize_codec);
            break;
          }
          case 242:
          case 240: {
            stride_.AddEntriesFrom(input, _repeated_stride_codec);
            break;
          }
          case 322:
          case 320: {
            dilationFactor_.AddEntriesFrom(input, _repeated_dilationFactor_codec);
            break;
          }
          case 402: {
            global::CoreML.Specification.ValidPadding subBuilder = new global::CoreML.Specification.ValidPadding();
            if (convolutionPaddingTypeCase_ == ConvolutionPaddingTypeOneofCase.Valid) {
              subBuilder.MergeFrom(Valid);
            }
            input.ReadMessage(subBuilder);
            Valid = subBuilder;
            break;
          }
          case 410: {
            global::CoreML.Specification.SamePadding subBuilder = new global::CoreML.Specification.SamePadding();
            if (convolutionPaddingTypeCase_ == ConvolutionPaddingTypeOneofCase.Same) {
              subBuilder.MergeFrom(Same);
            }
            input.ReadMessage(subBuilder);
            Same = subBuilder;
            break;
          }
          case 480: {
            IsDeconvolution = input.ReadBool();
            break;
          }
          case 560: {
            HasBias = input.ReadBool();
            break;
          }
          case 722: {
            if (weights_ == null) {
              weights_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(weights_);
            break;
          }
          case 730: {
            if (bias_ == null) {
              bias_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(bias_);
            break;
          }
          case 802:
          case 800: {
            outputShape_.AddEntriesFrom(input, _repeated_outputShape_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A layer that performs a matrix vector product.
  /// This is equivalent to a fully-connected, or dense layer.
  ///
  /// .. code::
  ///
  ///      y = InnerProductLayer(x)
  ///
  /// Requires 1 input and produces 1 output.
  ///
  /// Input
  ///  A blob with shape ``[C_in]`` or ``[C_in, 1, 1]``, where ``C_in`` is equal to ``inputChannels``.
  ///
  /// Output
  ///  A blob with shape ``[C_out]``, where ``C_out`` is equal to ``outputChannels``.
  /// </summary>
  public sealed partial class InnerProductLayerParams : pb::IMessage<InnerProductLayerParams> {
    private static readonly pb::MessageParser<InnerProductLayerParams> _parser = new pb::MessageParser<InnerProductLayerParams>(() => new InnerProductLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InnerProductLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerProductLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerProductLayerParams(InnerProductLayerParams other) : this() {
      inputChannels_ = other.inputChannels_;
      outputChannels_ = other.outputChannels_;
      hasBias_ = other.hasBias_;
      weights_ = other.weights_ != null ? other.weights_.Clone() : null;
      bias_ = other.bias_ != null ? other.bias_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerProductLayerParams Clone() {
      return new InnerProductLayerParams(this);
    }

    /// <summary>Field number for the "inputChannels" field.</summary>
    public const int InputChannelsFieldNumber = 1;
    private ulong inputChannels_;
    /// <summary>
    //// Input size: C_in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InputChannels {
      get { return inputChannels_; }
      set {
        inputChannels_ = value;
      }
    }

    /// <summary>Field number for the "outputChannels" field.</summary>
    public const int OutputChannelsFieldNumber = 2;
    private ulong outputChannels_;
    /// <summary>
    //// Output size: C_out.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OutputChannels {
      get { return outputChannels_; }
      set {
        outputChannels_ = value;
      }
    }

    /// <summary>Field number for the "hasBias" field.</summary>
    public const int HasBiasFieldNumber = 10;
    private bool hasBias_;
    /// <summary>
    //// Whether a bias is added or not.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBias {
      get { return hasBias_; }
      set {
        hasBias_ = value;
      }
    }

    /// <summary>Field number for the "weights" field.</summary>
    public const int WeightsFieldNumber = 20;
    private global::CoreML.Specification.WeightParams weights_;
    /// <summary>
    //// Weight matrix [C_out, C_in].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams Weights {
      get { return weights_; }
      set {
        weights_ = value;
      }
    }

    /// <summary>Field number for the "bias" field.</summary>
    public const int BiasFieldNumber = 21;
    private global::CoreML.Specification.WeightParams bias_;
    /// <summary>
    //// Bias vector [C_out].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams Bias {
      get { return bias_; }
      set {
        bias_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InnerProductLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InnerProductLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InputChannels != other.InputChannels) return false;
      if (OutputChannels != other.OutputChannels) return false;
      if (HasBias != other.HasBias) return false;
      if (!object.Equals(Weights, other.Weights)) return false;
      if (!object.Equals(Bias, other.Bias)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InputChannels != 0UL) hash ^= InputChannels.GetHashCode();
      if (OutputChannels != 0UL) hash ^= OutputChannels.GetHashCode();
      if (HasBias != false) hash ^= HasBias.GetHashCode();
      if (weights_ != null) hash ^= Weights.GetHashCode();
      if (bias_ != null) hash ^= Bias.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InputChannels != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(InputChannels);
      }
      if (OutputChannels != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(OutputChannels);
      }
      if (HasBias != false) {
        output.WriteRawTag(80);
        output.WriteBool(HasBias);
      }
      if (weights_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Weights);
      }
      if (bias_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Bias);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InputChannels != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InputChannels);
      }
      if (OutputChannels != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OutputChannels);
      }
      if (HasBias != false) {
        size += 1 + 1;
      }
      if (weights_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Weights);
      }
      if (bias_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Bias);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InnerProductLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.InputChannels != 0UL) {
        InputChannels = other.InputChannels;
      }
      if (other.OutputChannels != 0UL) {
        OutputChannels = other.OutputChannels;
      }
      if (other.HasBias != false) {
        HasBias = other.HasBias;
      }
      if (other.weights_ != null) {
        if (weights_ == null) {
          weights_ = new global::CoreML.Specification.WeightParams();
        }
        Weights.MergeFrom(other.Weights);
      }
      if (other.bias_ != null) {
        if (bias_ == null) {
          bias_ = new global::CoreML.Specification.WeightParams();
        }
        Bias.MergeFrom(other.Bias);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InputChannels = input.ReadUInt64();
            break;
          }
          case 16: {
            OutputChannels = input.ReadUInt64();
            break;
          }
          case 80: {
            HasBias = input.ReadBool();
            break;
          }
          case 162: {
            if (weights_ == null) {
              weights_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(weights_);
            break;
          }
          case 170: {
            if (bias_ == null) {
              bias_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(bias_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A layer that performs a matrix lookup and optionally adds a bias.
  ///
  /// .. code::
  ///
  ///      y = EmbeddingLayer(x)
  ///
  /// Requires 1 input and produces 1 output.
  ///
  /// Input
  ///     A sequence of integers with shape ``[1]`` or ``[1, 1, 1]``, (equivalent to ``[Seq_length, 1, 1, 1]``).
  ///     Input values must be in the range ``[0, inputDim - 1]``.
  ///
  /// Output
  ///     A sequence of 1-dimensional features of size ``outputChannels``
  ///     (equivalent to ``[Seq_length, outputChannels, 1, 1]``).
  /// </summary>
  public sealed partial class EmbeddingLayerParams : pb::IMessage<EmbeddingLayerParams> {
    private static readonly pb::MessageParser<EmbeddingLayerParams> _parser = new pb::MessageParser<EmbeddingLayerParams>(() => new EmbeddingLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmbeddingLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmbeddingLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmbeddingLayerParams(EmbeddingLayerParams other) : this() {
      inputDim_ = other.inputDim_;
      outputChannels_ = other.outputChannels_;
      hasBias_ = other.hasBias_;
      weights_ = other.weights_ != null ? other.weights_.Clone() : null;
      bias_ = other.bias_ != null ? other.bias_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmbeddingLayerParams Clone() {
      return new EmbeddingLayerParams(this);
    }

    /// <summary>Field number for the "inputDim" field.</summary>
    public const int InputDimFieldNumber = 1;
    private ulong inputDim_;
    /// <summary>
    //// Size of the input dictionary.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InputDim {
      get { return inputDim_; }
      set {
        inputDim_ = value;
      }
    }

    /// <summary>Field number for the "outputChannels" field.</summary>
    public const int OutputChannelsFieldNumber = 2;
    private ulong outputChannels_;
    /// <summary>
    //// Size of the output vectors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OutputChannels {
      get { return outputChannels_; }
      set {
        outputChannels_ = value;
      }
    }

    /// <summary>Field number for the "hasBias" field.</summary>
    public const int HasBiasFieldNumber = 10;
    private bool hasBias_;
    /// <summary>
    //// Whether a bias is added or not.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBias {
      get { return hasBias_; }
      set {
        hasBias_ = value;
      }
    }

    /// <summary>Field number for the "weights" field.</summary>
    public const int WeightsFieldNumber = 20;
    private global::CoreML.Specification.WeightParams weights_;
    /// <summary>
    //// 2-D weights of dimensions [outputChannels, inputDim].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams Weights {
      get { return weights_; }
      set {
        weights_ = value;
      }
    }

    /// <summary>Field number for the "bias" field.</summary>
    public const int BiasFieldNumber = 21;
    private global::CoreML.Specification.WeightParams bias_;
    /// <summary>
    //// Bias of size [outputChannels].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams Bias {
      get { return bias_; }
      set {
        bias_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmbeddingLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmbeddingLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InputDim != other.InputDim) return false;
      if (OutputChannels != other.OutputChannels) return false;
      if (HasBias != other.HasBias) return false;
      if (!object.Equals(Weights, other.Weights)) return false;
      if (!object.Equals(Bias, other.Bias)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InputDim != 0UL) hash ^= InputDim.GetHashCode();
      if (OutputChannels != 0UL) hash ^= OutputChannels.GetHashCode();
      if (HasBias != false) hash ^= HasBias.GetHashCode();
      if (weights_ != null) hash ^= Weights.GetHashCode();
      if (bias_ != null) hash ^= Bias.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InputDim != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(InputDim);
      }
      if (OutputChannels != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(OutputChannels);
      }
      if (HasBias != false) {
        output.WriteRawTag(80);
        output.WriteBool(HasBias);
      }
      if (weights_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Weights);
      }
      if (bias_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Bias);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InputDim != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InputDim);
      }
      if (OutputChannels != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OutputChannels);
      }
      if (HasBias != false) {
        size += 1 + 1;
      }
      if (weights_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Weights);
      }
      if (bias_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Bias);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmbeddingLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.InputDim != 0UL) {
        InputDim = other.InputDim;
      }
      if (other.OutputChannels != 0UL) {
        OutputChannels = other.OutputChannels;
      }
      if (other.HasBias != false) {
        HasBias = other.HasBias;
      }
      if (other.weights_ != null) {
        if (weights_ == null) {
          weights_ = new global::CoreML.Specification.WeightParams();
        }
        Weights.MergeFrom(other.Weights);
      }
      if (other.bias_ != null) {
        if (bias_ == null) {
          bias_ = new global::CoreML.Specification.WeightParams();
        }
        Bias.MergeFrom(other.Bias);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InputDim = input.ReadUInt64();
            break;
          }
          case 16: {
            OutputChannels = input.ReadUInt64();
            break;
          }
          case 80: {
            HasBias = input.ReadBool();
            break;
          }
          case 162: {
            if (weights_ == null) {
              weights_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(weights_);
            break;
          }
          case 170: {
            if (bias_ == null) {
              bias_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(bias_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A layer that performs batch normalization,
  /// which is performed along the channel axis,
  /// and repeated along the other axes, if present.
  ///
  /// .. code::
  ///
  ///      y = BatchnormLayer(x)
  ///
  /// Requires 1 input and produces 1 output.
  ///
  /// This operation is described by the following formula:
  ///
  /// .. math::
  ///     y_i = \gamma_i \dfrac{ (x_i - \mu_i)}{\sqrt{\sigma_i^2 + \epsilon}} + \beta_i \;,\;i=1,....,C
  ///
  /// Input
  ///     A blob with shape ``[C]`` or ``[C, H, W]``.
  ///
  /// Output
  ///     A blob with the same shape as the input.
  /// </summary>
  public sealed partial class BatchnormLayerParams : pb::IMessage<BatchnormLayerParams> {
    private static readonly pb::MessageParser<BatchnormLayerParams> _parser = new pb::MessageParser<BatchnormLayerParams>(() => new BatchnormLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchnormLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchnormLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchnormLayerParams(BatchnormLayerParams other) : this() {
      channels_ = other.channels_;
      computeMeanVar_ = other.computeMeanVar_;
      instanceNormalization_ = other.instanceNormalization_;
      epsilon_ = other.epsilon_;
      gamma_ = other.gamma_ != null ? other.gamma_.Clone() : null;
      beta_ = other.beta_ != null ? other.beta_.Clone() : null;
      mean_ = other.mean_ != null ? other.mean_.Clone() : null;
      variance_ = other.variance_ != null ? other.variance_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchnormLayerParams Clone() {
      return new BatchnormLayerParams(this);
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 1;
    private ulong channels_;
    /// <summary>
    //// Size of the channel dimension in the input.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Channels {
      get { return channels_; }
      set {
        channels_ = value;
      }
    }

    /// <summary>Field number for the "computeMeanVar" field.</summary>
    public const int ComputeMeanVarFieldNumber = 5;
    private bool computeMeanVar_;
    /// <summary>
    ///*
    /// If ``computeMeanVar == true``,
    /// the mean and variance are calculated from either
    /// the single input instance, if ``instanceNormalization == true``,
    /// or the whole batch, if ``instanceNormalization = false``.
    /// and the values provided in parameters "mean" and "variance" are ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ComputeMeanVar {
      get { return computeMeanVar_; }
      set {
        computeMeanVar_ = value;
      }
    }

    /// <summary>Field number for the "instanceNormalization" field.</summary>
    public const int InstanceNormalizationFieldNumber = 6;
    private bool instanceNormalization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InstanceNormalization {
      get { return instanceNormalization_; }
      set {
        instanceNormalization_ = value;
      }
    }

    /// <summary>Field number for the "epsilon" field.</summary>
    public const int EpsilonFieldNumber = 10;
    private float epsilon_;
    /// <summary>
    ///*
    /// A small constant to avoid division by 0 while normalizing by variance.
    /// Defaults to ``1e-5`` if not set or set to ``0``.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Epsilon {
      get { return epsilon_; }
      set {
        epsilon_ = value;
      }
    }

    /// <summary>Field number for the "gamma" field.</summary>
    public const int GammaFieldNumber = 15;
    private global::CoreML.Specification.WeightParams gamma_;
    /// <summary>
    //// Parameter of length [channels]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams Gamma {
      get { return gamma_; }
      set {
        gamma_ = value;
      }
    }

    /// <summary>Field number for the "beta" field.</summary>
    public const int BetaFieldNumber = 16;
    private global::CoreML.Specification.WeightParams beta_;
    /// <summary>
    //// Parameter of length [channels]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams Beta {
      get { return beta_; }
      set {
        beta_ = value;
      }
    }

    /// <summary>Field number for the "mean" field.</summary>
    public const int MeanFieldNumber = 17;
    private global::CoreML.Specification.WeightParams mean_;
    /// <summary>
    //// Parameter of length [channels]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams Mean {
      get { return mean_; }
      set {
        mean_ = value;
      }
    }

    /// <summary>Field number for the "variance" field.</summary>
    public const int VarianceFieldNumber = 18;
    private global::CoreML.Specification.WeightParams variance_;
    /// <summary>
    //// Parameter of length [channels]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams Variance {
      get { return variance_; }
      set {
        variance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchnormLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchnormLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Channels != other.Channels) return false;
      if (ComputeMeanVar != other.ComputeMeanVar) return false;
      if (InstanceNormalization != other.InstanceNormalization) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Epsilon, other.Epsilon)) return false;
      if (!object.Equals(Gamma, other.Gamma)) return false;
      if (!object.Equals(Beta, other.Beta)) return false;
      if (!object.Equals(Mean, other.Mean)) return false;
      if (!object.Equals(Variance, other.Variance)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Channels != 0UL) hash ^= Channels.GetHashCode();
      if (ComputeMeanVar != false) hash ^= ComputeMeanVar.GetHashCode();
      if (InstanceNormalization != false) hash ^= InstanceNormalization.GetHashCode();
      if (Epsilon != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Epsilon);
      if (gamma_ != null) hash ^= Gamma.GetHashCode();
      if (beta_ != null) hash ^= Beta.GetHashCode();
      if (mean_ != null) hash ^= Mean.GetHashCode();
      if (variance_ != null) hash ^= Variance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Channels != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Channels);
      }
      if (ComputeMeanVar != false) {
        output.WriteRawTag(40);
        output.WriteBool(ComputeMeanVar);
      }
      if (InstanceNormalization != false) {
        output.WriteRawTag(48);
        output.WriteBool(InstanceNormalization);
      }
      if (Epsilon != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Epsilon);
      }
      if (gamma_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Gamma);
      }
      if (beta_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Beta);
      }
      if (mean_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Mean);
      }
      if (variance_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Variance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Channels != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Channels);
      }
      if (ComputeMeanVar != false) {
        size += 1 + 1;
      }
      if (InstanceNormalization != false) {
        size += 1 + 1;
      }
      if (Epsilon != 0F) {
        size += 1 + 4;
      }
      if (gamma_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gamma);
      }
      if (beta_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Beta);
      }
      if (mean_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Mean);
      }
      if (variance_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Variance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchnormLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.Channels != 0UL) {
        Channels = other.Channels;
      }
      if (other.ComputeMeanVar != false) {
        ComputeMeanVar = other.ComputeMeanVar;
      }
      if (other.InstanceNormalization != false) {
        InstanceNormalization = other.InstanceNormalization;
      }
      if (other.Epsilon != 0F) {
        Epsilon = other.Epsilon;
      }
      if (other.gamma_ != null) {
        if (gamma_ == null) {
          gamma_ = new global::CoreML.Specification.WeightParams();
        }
        Gamma.MergeFrom(other.Gamma);
      }
      if (other.beta_ != null) {
        if (beta_ == null) {
          beta_ = new global::CoreML.Specification.WeightParams();
        }
        Beta.MergeFrom(other.Beta);
      }
      if (other.mean_ != null) {
        if (mean_ == null) {
          mean_ = new global::CoreML.Specification.WeightParams();
        }
        Mean.MergeFrom(other.Mean);
      }
      if (other.variance_ != null) {
        if (variance_ == null) {
          variance_ = new global::CoreML.Specification.WeightParams();
        }
        Variance.MergeFrom(other.Variance);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Channels = input.ReadUInt64();
            break;
          }
          case 40: {
            ComputeMeanVar = input.ReadBool();
            break;
          }
          case 48: {
            InstanceNormalization = input.ReadBool();
            break;
          }
          case 85: {
            Epsilon = input.ReadFloat();
            break;
          }
          case 122: {
            if (gamma_ == null) {
              gamma_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(gamma_);
            break;
          }
          case 130: {
            if (beta_ == null) {
              beta_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(beta_);
            break;
          }
          case 138: {
            if (mean_ == null) {
              mean_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(mean_);
            break;
          }
          case 146: {
            if (variance_ == null) {
              variance_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(variance_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A spatial pooling layer.
  ///
  /// .. code::
  ///
  ///      y = PoolingLayer(x)
  ///
  /// Requires 1 input and produces 1 output.
  ///
  /// Input
  ///     A blob with shape ``[C, H_in, W_in]``.
  /// Output
  ///     A blob with shape ``[C, H_out, W_out]``.
  ///
  /// Padding options are similar to ``ConvolutionLayerParams``
  /// with the additional option of ``ValidCompletePadding`` (``includeLastPixel``),
  /// which ensures that the last application of the kernel
  /// always includes the last pixel of the input image, if there is padding.
  ///
  /// .. code::
  ///
  ///     H_out = int_division_round_up((H_in + 2 * paddingAmounts[0] - kernelSize[0]),Stride[0]) + 1)
  ///     if (paddingAmounts[0] > 0 or paddingAmounts[1] > 0)
  ///          if ((H_out - 1) * Stride >= H_in + paddingAmounts[0]) {
  ///              H_out = H_out - 1
  ///          }
  ///     }
  ///
  /// The equivalent expressions hold true for ``W_out`` as well.
  /// Only symmetric padding is supported with this option.
  /// </summary>
  public sealed partial class PoolingLayerParams : pb::IMessage<PoolingLayerParams> {
    private static readonly pb::MessageParser<PoolingLayerParams> _parser = new pb::MessageParser<PoolingLayerParams>(() => new PoolingLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PoolingLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolingLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolingLayerParams(PoolingLayerParams other) : this() {
      type_ = other.type_;
      kernelSize_ = other.kernelSize_.Clone();
      stride_ = other.stride_.Clone();
      avgPoolExcludePadding_ = other.avgPoolExcludePadding_;
      globalPooling_ = other.globalPooling_;
      switch (other.PoolingPaddingTypeCase) {
        case PoolingPaddingTypeOneofCase.Valid:
          Valid = other.Valid.Clone();
          break;
        case PoolingPaddingTypeOneofCase.Same:
          Same = other.Same.Clone();
          break;
        case PoolingPaddingTypeOneofCase.IncludeLastPixel:
          IncludeLastPixel = other.IncludeLastPixel.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolingLayerParams Clone() {
      return new PoolingLayerParams(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::CoreML.Specification.PoolingLayerParams.Types.PoolingType type_ = 0;
    /// <summary>
    //// Type of pooling operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.PoolingLayerParams.Types.PoolingType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "kernelSize" field.</summary>
    public const int KernelSizeFieldNumber = 10;
    private static readonly pb::FieldCodec<ulong> _repeated_kernelSize_codec
        = pb::FieldCodec.ForUInt64(82);
    private readonly pbc::RepeatedField<ulong> kernelSize_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///*
    /// Must be length 2 in the order ``[H, W]``.
    /// If not set, default value ``[3, 3]`` is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> KernelSize {
      get { return kernelSize_; }
    }

    /// <summary>Field number for the "stride" field.</summary>
    public const int StrideFieldNumber = 20;
    private static readonly pb::FieldCodec<ulong> _repeated_stride_codec
        = pb::FieldCodec.ForUInt64(162);
    private readonly pbc::RepeatedField<ulong> stride_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///*
    /// Must be length 2 in the order ``[H, W]``.
    /// If not set, default value ``[1, 1]`` is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Stride {
      get { return stride_; }
    }

    /// <summary>Field number for the "valid" field.</summary>
    public const int ValidFieldNumber = 30;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ValidPadding Valid {
      get { return poolingPaddingTypeCase_ == PoolingPaddingTypeOneofCase.Valid ? (global::CoreML.Specification.ValidPadding) poolingPaddingType_ : null; }
      set {
        poolingPaddingType_ = value;
        poolingPaddingTypeCase_ = value == null ? PoolingPaddingTypeOneofCase.None : PoolingPaddingTypeOneofCase.Valid;
      }
    }

    /// <summary>Field number for the "same" field.</summary>
    public const int SameFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.SamePadding Same {
      get { return poolingPaddingTypeCase_ == PoolingPaddingTypeOneofCase.Same ? (global::CoreML.Specification.SamePadding) poolingPaddingType_ : null; }
      set {
        poolingPaddingType_ = value;
        poolingPaddingTypeCase_ = value == null ? PoolingPaddingTypeOneofCase.None : PoolingPaddingTypeOneofCase.Same;
      }
    }

    /// <summary>Field number for the "includeLastPixel" field.</summary>
    public const int IncludeLastPixelFieldNumber = 32;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.PoolingLayerParams.Types.ValidCompletePadding IncludeLastPixel {
      get { return poolingPaddingTypeCase_ == PoolingPaddingTypeOneofCase.IncludeLastPixel ? (global::CoreML.Specification.PoolingLayerParams.Types.ValidCompletePadding) poolingPaddingType_ : null; }
      set {
        poolingPaddingType_ = value;
        poolingPaddingTypeCase_ = value == null ? PoolingPaddingTypeOneofCase.None : PoolingPaddingTypeOneofCase.IncludeLastPixel;
      }
    }

    /// <summary>Field number for the "avgPoolExcludePadding" field.</summary>
    public const int AvgPoolExcludePaddingFieldNumber = 50;
    private bool avgPoolExcludePadding_;
    /// <summary>
    ///*
    /// If true, padded values are excluded from the count (denominator)
    /// when computing average pooling.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AvgPoolExcludePadding {
      get { return avgPoolExcludePadding_; }
      set {
        avgPoolExcludePadding_ = value;
      }
    }

    /// <summary>Field number for the "globalPooling" field.</summary>
    public const int GlobalPoolingFieldNumber = 60;
    private bool globalPooling_;
    /// <summary>
    ///*
    /// If true, global pooling is performed.
    /// Kernel size is inferred from the input data spatial dimensions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GlobalPooling {
      get { return globalPooling_; }
      set {
        globalPooling_ = value;
      }
    }

    private object poolingPaddingType_;
    /// <summary>Enum of possible cases for the "PoolingPaddingType" oneof.</summary>
    public enum PoolingPaddingTypeOneofCase {
      None = 0,
      Valid = 30,
      Same = 31,
      IncludeLastPixel = 32,
    }
    private PoolingPaddingTypeOneofCase poolingPaddingTypeCase_ = PoolingPaddingTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolingPaddingTypeOneofCase PoolingPaddingTypeCase {
      get { return poolingPaddingTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPoolingPaddingType() {
      poolingPaddingTypeCase_ = PoolingPaddingTypeOneofCase.None;
      poolingPaddingType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PoolingLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PoolingLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!kernelSize_.Equals(other.kernelSize_)) return false;
      if(!stride_.Equals(other.stride_)) return false;
      if (!object.Equals(Valid, other.Valid)) return false;
      if (!object.Equals(Same, other.Same)) return false;
      if (!object.Equals(IncludeLastPixel, other.IncludeLastPixel)) return false;
      if (AvgPoolExcludePadding != other.AvgPoolExcludePadding) return false;
      if (GlobalPooling != other.GlobalPooling) return false;
      if (PoolingPaddingTypeCase != other.PoolingPaddingTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= kernelSize_.GetHashCode();
      hash ^= stride_.GetHashCode();
      if (poolingPaddingTypeCase_ == PoolingPaddingTypeOneofCase.Valid) hash ^= Valid.GetHashCode();
      if (poolingPaddingTypeCase_ == PoolingPaddingTypeOneofCase.Same) hash ^= Same.GetHashCode();
      if (poolingPaddingTypeCase_ == PoolingPaddingTypeOneofCase.IncludeLastPixel) hash ^= IncludeLastPixel.GetHashCode();
      if (AvgPoolExcludePadding != false) hash ^= AvgPoolExcludePadding.GetHashCode();
      if (GlobalPooling != false) hash ^= GlobalPooling.GetHashCode();
      hash ^= (int) poolingPaddingTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      kernelSize_.WriteTo(output, _repeated_kernelSize_codec);
      stride_.WriteTo(output, _repeated_stride_codec);
      if (poolingPaddingTypeCase_ == PoolingPaddingTypeOneofCase.Valid) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Valid);
      }
      if (poolingPaddingTypeCase_ == PoolingPaddingTypeOneofCase.Same) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(Same);
      }
      if (poolingPaddingTypeCase_ == PoolingPaddingTypeOneofCase.IncludeLastPixel) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(IncludeLastPixel);
      }
      if (AvgPoolExcludePadding != false) {
        output.WriteRawTag(144, 3);
        output.WriteBool(AvgPoolExcludePadding);
      }
      if (GlobalPooling != false) {
        output.WriteRawTag(224, 3);
        output.WriteBool(GlobalPooling);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += kernelSize_.CalculateSize(_repeated_kernelSize_codec);
      size += stride_.CalculateSize(_repeated_stride_codec);
      if (poolingPaddingTypeCase_ == PoolingPaddingTypeOneofCase.Valid) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Valid);
      }
      if (poolingPaddingTypeCase_ == PoolingPaddingTypeOneofCase.Same) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Same);
      }
      if (poolingPaddingTypeCase_ == PoolingPaddingTypeOneofCase.IncludeLastPixel) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IncludeLastPixel);
      }
      if (AvgPoolExcludePadding != false) {
        size += 2 + 1;
      }
      if (GlobalPooling != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PoolingLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      kernelSize_.Add(other.kernelSize_);
      stride_.Add(other.stride_);
      if (other.AvgPoolExcludePadding != false) {
        AvgPoolExcludePadding = other.AvgPoolExcludePadding;
      }
      if (other.GlobalPooling != false) {
        GlobalPooling = other.GlobalPooling;
      }
      switch (other.PoolingPaddingTypeCase) {
        case PoolingPaddingTypeOneofCase.Valid:
          if (Valid == null) {
            Valid = new global::CoreML.Specification.ValidPadding();
          }
          Valid.MergeFrom(other.Valid);
          break;
        case PoolingPaddingTypeOneofCase.Same:
          if (Same == null) {
            Same = new global::CoreML.Specification.SamePadding();
          }
          Same.MergeFrom(other.Same);
          break;
        case PoolingPaddingTypeOneofCase.IncludeLastPixel:
          if (IncludeLastPixel == null) {
            IncludeLastPixel = new global::CoreML.Specification.PoolingLayerParams.Types.ValidCompletePadding();
          }
          IncludeLastPixel.MergeFrom(other.IncludeLastPixel);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::CoreML.Specification.PoolingLayerParams.Types.PoolingType) input.ReadEnum();
            break;
          }
          case 82:
          case 80: {
            kernelSize_.AddEntriesFrom(input, _repeated_kernelSize_codec);
            break;
          }
          case 162:
          case 160: {
            stride_.AddEntriesFrom(input, _repeated_stride_codec);
            break;
          }
          case 242: {
            global::CoreML.Specification.ValidPadding subBuilder = new global::CoreML.Specification.ValidPadding();
            if (poolingPaddingTypeCase_ == PoolingPaddingTypeOneofCase.Valid) {
              subBuilder.MergeFrom(Valid);
            }
            input.ReadMessage(subBuilder);
            Valid = subBuilder;
            break;
          }
          case 250: {
            global::CoreML.Specification.SamePadding subBuilder = new global::CoreML.Specification.SamePadding();
            if (poolingPaddingTypeCase_ == PoolingPaddingTypeOneofCase.Same) {
              subBuilder.MergeFrom(Same);
            }
            input.ReadMessage(subBuilder);
            Same = subBuilder;
            break;
          }
          case 258: {
            global::CoreML.Specification.PoolingLayerParams.Types.ValidCompletePadding subBuilder = new global::CoreML.Specification.PoolingLayerParams.Types.ValidCompletePadding();
            if (poolingPaddingTypeCase_ == PoolingPaddingTypeOneofCase.IncludeLastPixel) {
              subBuilder.MergeFrom(IncludeLastPixel);
            }
            input.ReadMessage(subBuilder);
            IncludeLastPixel = subBuilder;
            break;
          }
          case 400: {
            AvgPoolExcludePadding = input.ReadBool();
            break;
          }
          case 480: {
            GlobalPooling = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PoolingLayerParams message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum PoolingType {
        [pbr::OriginalName("MAX")] Max = 0,
        [pbr::OriginalName("AVERAGE")] Average = 1,
        [pbr::OriginalName("L2")] L2 = 2,
      }

      public sealed partial class ValidCompletePadding : pb::IMessage<ValidCompletePadding> {
        private static readonly pb::MessageParser<ValidCompletePadding> _parser = new pb::MessageParser<ValidCompletePadding>(() => new ValidCompletePadding());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ValidCompletePadding> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CoreML.Specification.PoolingLayerParams.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValidCompletePadding() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValidCompletePadding(ValidCompletePadding other) : this() {
          paddingAmounts_ = other.paddingAmounts_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValidCompletePadding Clone() {
          return new ValidCompletePadding(this);
        }

        /// <summary>Field number for the "paddingAmounts" field.</summary>
        public const int PaddingAmountsFieldNumber = 10;
        private static readonly pb::FieldCodec<ulong> _repeated_paddingAmounts_codec
            = pb::FieldCodec.ForUInt64(82);
        private readonly pbc::RepeatedField<ulong> paddingAmounts_ = new pbc::RepeatedField<ulong>();
        /// <summary>
        ///*
        /// Must be length 2 in order ``[H, W]``.
        /// If not set, value ``[0, 0]`` is used.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ulong> PaddingAmounts {
          get { return paddingAmounts_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ValidCompletePadding);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ValidCompletePadding other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!paddingAmounts_.Equals(other.paddingAmounts_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= paddingAmounts_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          paddingAmounts_.WriteTo(output, _repeated_paddingAmounts_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += paddingAmounts_.CalculateSize(_repeated_paddingAmounts_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ValidCompletePadding other) {
          if (other == null) {
            return;
          }
          paddingAmounts_.Add(other.paddingAmounts_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82:
              case 80: {
                paddingAmounts_.AddEntriesFrom(input, _repeated_paddingAmounts_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// A layer that performs padding along spatial dimensions.
  ///
  /// .. code::
  ///
  ///      y = PaddingLayer(x)
  ///
  /// Requires 1 input and produces 1 output.
  ///
  /// Input
  ///     A blob with shape ``[C, H_in, W_in]``.
  ///
  /// Output
  ///     A blob with shape ``[C, H_out, W_out]``.
  ///
  /// Output dimensions are calculated as follows:
  ///
  /// .. code::
  ///
  ///     H_out = H_in + topPaddingAmount + bottomPaddingAmount
  ///     W_out = W_in + leftPaddingAmount + rightPaddingAmount
  ///
  ///     topPaddingAmount == Height startEdgeSize == borderAmounts[0].startEdgeSize
  ///     bottomPaddingAmount == Height endEdgeSize == borderAmounts[0].endEdgeSize
  ///     leftPaddingAmount == Width startEdgeSize == borderAmounts[1].startEdgeSize
  ///     rightPaddingAmount == Width endEdgeSize == borderAmounts[1].endEdgeSize
  ///
  /// There are three types of padding:
  ///
  /// - ``PaddingConstant``, which fills a constant value at the border.
  /// - ``PaddingReflection``, which reflects the values at the border.
  /// - ``PaddingReplication``, which replicates the values at the border.
  ///
  /// Given the following input:
  ///
  /// .. code::
  ///
  ///     [1, 3, 4]  :  1   2   3   4
  ///                   5   6   7   8
  ///                   9   10  11  12
  ///
  /// Here is the output of applying the padding
  /// ``(top=2, left=2, bottom=0, right=0)``
  /// with each of the supported types:
  ///
  /// - ``PaddingConstant`` (``value = 0``):
  ///   .. code::
  ///
  ///       [1, 5, 6]  :  0   0   0  0   0   0
  ///                     0   0   0  0   0   0
  ///                     0   0   1  2   3   4
  ///                     0   0   5  6   7   8
  ///                     0   0   9  10  11  12
  ///
  /// - ``PaddingReflection``:
  ///   .. code::
  ///
  ///       [1, 5, 6]  :  11  10  9  10  11  12
  ///                     7   6   5  6   7   8
  ///                     3   2   1  2   3   4
  ///                     7   6   5  6   7   8
  ///                     11  10  9  10  11  12
  ///
  /// - ``PaddingReplication``:
  ///   .. code::
  ///
  ///       [1, 5, 6]  :  1   1   1  2   3   4
  ///                     1   1   1  2   3   4
  ///                     1   1   1  2   3   4
  ///                     5   5   5  6   7   8
  ///                     9   9   9  10  11  12
  /// </summary>
  public sealed partial class PaddingLayerParams : pb::IMessage<PaddingLayerParams> {
    private static readonly pb::MessageParser<PaddingLayerParams> _parser = new pb::MessageParser<PaddingLayerParams>(() => new PaddingLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaddingLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaddingLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaddingLayerParams(PaddingLayerParams other) : this() {
      paddingAmounts_ = other.paddingAmounts_ != null ? other.paddingAmounts_.Clone() : null;
      switch (other.PaddingTypeCase) {
        case PaddingTypeOneofCase.Constant:
          Constant = other.Constant.Clone();
          break;
        case PaddingTypeOneofCase.Reflection:
          Reflection = other.Reflection.Clone();
          break;
        case PaddingTypeOneofCase.Replication:
          Replication = other.Replication.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaddingLayerParams Clone() {
      return new PaddingLayerParams(this);
    }

    /// <summary>Field number for the "constant" field.</summary>
    public const int ConstantFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.PaddingLayerParams.Types.PaddingConstant Constant {
      get { return paddingTypeCase_ == PaddingTypeOneofCase.Constant ? (global::CoreML.Specification.PaddingLayerParams.Types.PaddingConstant) paddingType_ : null; }
      set {
        paddingType_ = value;
        paddingTypeCase_ = value == null ? PaddingTypeOneofCase.None : PaddingTypeOneofCase.Constant;
      }
    }

    /// <summary>Field number for the "reflection" field.</summary>
    public const int ReflectionFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.PaddingLayerParams.Types.PaddingReflection Reflection {
      get { return paddingTypeCase_ == PaddingTypeOneofCase.Reflection ? (global::CoreML.Specification.PaddingLayerParams.Types.PaddingReflection) paddingType_ : null; }
      set {
        paddingType_ = value;
        paddingTypeCase_ = value == null ? PaddingTypeOneofCase.None : PaddingTypeOneofCase.Reflection;
      }
    }

    /// <summary>Field number for the "replication" field.</summary>
    public const int ReplicationFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.PaddingLayerParams.Types.PaddingReplication Replication {
      get { return paddingTypeCase_ == PaddingTypeOneofCase.Replication ? (global::CoreML.Specification.PaddingLayerParams.Types.PaddingReplication) paddingType_ : null; }
      set {
        paddingType_ = value;
        paddingTypeCase_ = value == null ? PaddingTypeOneofCase.None : PaddingTypeOneofCase.Replication;
      }
    }

    /// <summary>Field number for the "paddingAmounts" field.</summary>
    public const int PaddingAmountsFieldNumber = 10;
    private global::CoreML.Specification.BorderAmounts paddingAmounts_;
    /// <summary>
    //// Amounts to be padded to the input.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.BorderAmounts PaddingAmounts {
      get { return paddingAmounts_; }
      set {
        paddingAmounts_ = value;
      }
    }

    private object paddingType_;
    /// <summary>Enum of possible cases for the "PaddingType" oneof.</summary>
    public enum PaddingTypeOneofCase {
      None = 0,
      Constant = 1,
      Reflection = 2,
      Replication = 3,
    }
    private PaddingTypeOneofCase paddingTypeCase_ = PaddingTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaddingTypeOneofCase PaddingTypeCase {
      get { return paddingTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPaddingType() {
      paddingTypeCase_ = PaddingTypeOneofCase.None;
      paddingType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaddingLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaddingLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Constant, other.Constant)) return false;
      if (!object.Equals(Reflection, other.Reflection)) return false;
      if (!object.Equals(Replication, other.Replication)) return false;
      if (!object.Equals(PaddingAmounts, other.PaddingAmounts)) return false;
      if (PaddingTypeCase != other.PaddingTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (paddingTypeCase_ == PaddingTypeOneofCase.Constant) hash ^= Constant.GetHashCode();
      if (paddingTypeCase_ == PaddingTypeOneofCase.Reflection) hash ^= Reflection.GetHashCode();
      if (paddingTypeCase_ == PaddingTypeOneofCase.Replication) hash ^= Replication.GetHashCode();
      if (paddingAmounts_ != null) hash ^= PaddingAmounts.GetHashCode();
      hash ^= (int) paddingTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (paddingTypeCase_ == PaddingTypeOneofCase.Constant) {
        output.WriteRawTag(10);
        output.WriteMessage(Constant);
      }
      if (paddingTypeCase_ == PaddingTypeOneofCase.Reflection) {
        output.WriteRawTag(18);
        output.WriteMessage(Reflection);
      }
      if (paddingTypeCase_ == PaddingTypeOneofCase.Replication) {
        output.WriteRawTag(26);
        output.WriteMessage(Replication);
      }
      if (paddingAmounts_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(PaddingAmounts);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (paddingTypeCase_ == PaddingTypeOneofCase.Constant) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Constant);
      }
      if (paddingTypeCase_ == PaddingTypeOneofCase.Reflection) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reflection);
      }
      if (paddingTypeCase_ == PaddingTypeOneofCase.Replication) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Replication);
      }
      if (paddingAmounts_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PaddingAmounts);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaddingLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.paddingAmounts_ != null) {
        if (paddingAmounts_ == null) {
          paddingAmounts_ = new global::CoreML.Specification.BorderAmounts();
        }
        PaddingAmounts.MergeFrom(other.PaddingAmounts);
      }
      switch (other.PaddingTypeCase) {
        case PaddingTypeOneofCase.Constant:
          if (Constant == null) {
            Constant = new global::CoreML.Specification.PaddingLayerParams.Types.PaddingConstant();
          }
          Constant.MergeFrom(other.Constant);
          break;
        case PaddingTypeOneofCase.Reflection:
          if (Reflection == null) {
            Reflection = new global::CoreML.Specification.PaddingLayerParams.Types.PaddingReflection();
          }
          Reflection.MergeFrom(other.Reflection);
          break;
        case PaddingTypeOneofCase.Replication:
          if (Replication == null) {
            Replication = new global::CoreML.Specification.PaddingLayerParams.Types.PaddingReplication();
          }
          Replication.MergeFrom(other.Replication);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::CoreML.Specification.PaddingLayerParams.Types.PaddingConstant subBuilder = new global::CoreML.Specification.PaddingLayerParams.Types.PaddingConstant();
            if (paddingTypeCase_ == PaddingTypeOneofCase.Constant) {
              subBuilder.MergeFrom(Constant);
            }
            input.ReadMessage(subBuilder);
            Constant = subBuilder;
            break;
          }
          case 18: {
            global::CoreML.Specification.PaddingLayerParams.Types.PaddingReflection subBuilder = new global::CoreML.Specification.PaddingLayerParams.Types.PaddingReflection();
            if (paddingTypeCase_ == PaddingTypeOneofCase.Reflection) {
              subBuilder.MergeFrom(Reflection);
            }
            input.ReadMessage(subBuilder);
            Reflection = subBuilder;
            break;
          }
          case 26: {
            global::CoreML.Specification.PaddingLayerParams.Types.PaddingReplication subBuilder = new global::CoreML.Specification.PaddingLayerParams.Types.PaddingReplication();
            if (paddingTypeCase_ == PaddingTypeOneofCase.Replication) {
              subBuilder.MergeFrom(Replication);
            }
            input.ReadMessage(subBuilder);
            Replication = subBuilder;
            break;
          }
          case 82: {
            if (paddingAmounts_ == null) {
              paddingAmounts_ = new global::CoreML.Specification.BorderAmounts();
            }
            input.ReadMessage(paddingAmounts_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PaddingLayerParams message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///*
      /// Fill a constant value in the padded region.
      /// </summary>
      public sealed partial class PaddingConstant : pb::IMessage<PaddingConstant> {
        private static readonly pb::MessageParser<PaddingConstant> _parser = new pb::MessageParser<PaddingConstant>(() => new PaddingConstant());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PaddingConstant> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CoreML.Specification.PaddingLayerParams.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PaddingConstant() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PaddingConstant(PaddingConstant other) : this() {
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PaddingConstant Clone() {
          return new PaddingConstant(this);
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 1;
        private float value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PaddingConstant);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PaddingConstant other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Value != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Value != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PaddingConstant other) {
          if (other == null) {
            return;
          }
          if (other.Value != 0F) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                Value = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///*
      /// Reflect the values at the border for padding.
      /// </summary>
      public sealed partial class PaddingReflection : pb::IMessage<PaddingReflection> {
        private static readonly pb::MessageParser<PaddingReflection> _parser = new pb::MessageParser<PaddingReflection>(() => new PaddingReflection());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PaddingReflection> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CoreML.Specification.PaddingLayerParams.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PaddingReflection() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PaddingReflection(PaddingReflection other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PaddingReflection Clone() {
          return new PaddingReflection(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PaddingReflection);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PaddingReflection other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PaddingReflection other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      /// <summary>
      ///*
      /// Replicate the values at the border for padding.
      /// </summary>
      public sealed partial class PaddingReplication : pb::IMessage<PaddingReplication> {
        private static readonly pb::MessageParser<PaddingReplication> _parser = new pb::MessageParser<PaddingReplication>(() => new PaddingReplication());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PaddingReplication> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CoreML.Specification.PaddingLayerParams.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PaddingReplication() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PaddingReplication(PaddingReplication other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PaddingReplication Clone() {
          return new PaddingReplication(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PaddingReplication);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PaddingReplication other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PaddingReplication other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// A layer that concatenates along the channel axis (default) or sequence axis.
  ///
  /// .. code::
  ///
  ///      y = ConcatLayer(x1,x2,....)
  ///
  /// Requires more than 1 input and produces 1 output.
  ///
  /// The input and output formats are dependent on ``sequenceConcat``.
  ///
  /// If ``sequenceConcat == true``:
  ///
  /// Input
  ///     Sequences of length ``Seq_i`` of blobs with shape ``[C, H, W]``.
  /// Output
  ///     A Sequence of length ``summation(Seq_i)`` of blobs with shape ``[C, H, W]``.
  ///
  /// If ``sequenceConcat == false``:
  ///
  /// Input
  ///     A blob with shape ``[C_i, H, W]``, where ``i = 1, 2, ...``.
  /// Output
  ///     A blob with shape ``[summation(C_i), H, W]``.
  /// </summary>
  public sealed partial class ConcatLayerParams : pb::IMessage<ConcatLayerParams> {
    private static readonly pb::MessageParser<ConcatLayerParams> _parser = new pb::MessageParser<ConcatLayerParams>(() => new ConcatLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConcatLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConcatLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConcatLayerParams(ConcatLayerParams other) : this() {
      sequenceConcat_ = other.sequenceConcat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConcatLayerParams Clone() {
      return new ConcatLayerParams(this);
    }

    /// <summary>Field number for the "sequenceConcat" field.</summary>
    public const int SequenceConcatFieldNumber = 100;
    private bool sequenceConcat_;
    /// <summary>
    ///*
    /// If true, concatenate along the sequence axis instead of the channel axis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SequenceConcat {
      get { return sequenceConcat_; }
      set {
        sequenceConcat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConcatLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConcatLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SequenceConcat != other.SequenceConcat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SequenceConcat != false) hash ^= SequenceConcat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SequenceConcat != false) {
        output.WriteRawTag(160, 6);
        output.WriteBool(SequenceConcat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SequenceConcat != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConcatLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.SequenceConcat != false) {
        SequenceConcat = other.SequenceConcat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 800: {
            SequenceConcat = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A layer that performs local response normalization (LRN).
  ///
  /// .. code::
  ///
  ///      y = LRNLayer(x)
  ///
  /// Requires 1 input and produces 1 output.
  ///
  /// Input
  ///     A blob with shape ``[C, H, W]``
  /// Output
  ///     A blob with the same shape as the input.
  ///
  /// This layer is described by the following formula:
  ///
  /// .. math::
  ///     x_i \leftarrow  \dfrac{x_i}{\left ( k + \dfrac{\alpha}{C} \sum_j x_j^2 \right )^\beta}
  ///
  /// where the summation is done over a ``(localSize, 1, 1)`` neighborhood ---
  /// that is, over a window "across" channels in 1x1 spatial neighborhoods.
  /// </summary>
  public sealed partial class LRNLayerParams : pb::IMessage<LRNLayerParams> {
    private static readonly pb::MessageParser<LRNLayerParams> _parser = new pb::MessageParser<LRNLayerParams>(() => new LRNLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LRNLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LRNLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LRNLayerParams(LRNLayerParams other) : this() {
      alpha_ = other.alpha_;
      beta_ = other.beta_;
      localSize_ = other.localSize_;
      k_ = other.k_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LRNLayerParams Clone() {
      return new LRNLayerParams(this);
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 1;
    private float alpha_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    /// <summary>Field number for the "beta" field.</summary>
    public const int BetaFieldNumber = 2;
    private float beta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Beta {
      get { return beta_; }
      set {
        beta_ = value;
      }
    }

    /// <summary>Field number for the "localSize" field.</summary>
    public const int LocalSizeFieldNumber = 3;
    private ulong localSize_;
    /// <summary>
    //// Number of channels in the normalization window.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LocalSize {
      get { return localSize_; }
      set {
        localSize_ = value;
      }
    }

    /// <summary>Field number for the "k" field.</summary>
    public const int KFieldNumber = 4;
    private float k_;
    /// <summary>
    //// Defaults to 1 if not set or 0. Must be strictly positive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LRNLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LRNLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Beta, other.Beta)) return false;
      if (LocalSize != other.LocalSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(K, other.K)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
      if (Beta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Beta);
      if (LocalSize != 0UL) hash ^= LocalSize.GetHashCode();
      if (K != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(K);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Alpha != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Alpha);
      }
      if (Beta != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Beta);
      }
      if (LocalSize != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(LocalSize);
      }
      if (K != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(K);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (Beta != 0F) {
        size += 1 + 4;
      }
      if (LocalSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LocalSize);
      }
      if (K != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LRNLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      if (other.Beta != 0F) {
        Beta = other.Beta;
      }
      if (other.LocalSize != 0UL) {
        LocalSize = other.LocalSize;
      }
      if (other.K != 0F) {
        K = other.K;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Alpha = input.ReadFloat();
            break;
          }
          case 21: {
            Beta = input.ReadFloat();
            break;
          }
          case 24: {
            LocalSize = input.ReadUInt64();
            break;
          }
          case 37: {
            K = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Softmax Normalization Layer
  ///
  /// A layer that performs softmax normalization.
  /// Normalization is done along the channel axis.
  ///
  /// .. code::
  ///
  ///      y = SoftmaxLayer(x)
  ///
  /// Requires 1 input and produces 1 output.
  ///
  /// Input
  ///     A blob with shape ``[C]`` or ``[C, H, W]``.
  /// Output
  ///     A blob with the same shape as the input.
  ///
  /// This layer is described by the following formula:
  ///
  /// .. math::
  ///     x_i \leftarrow \dfrac{e^{x_i}}{\sum_i{e^{x_i}}}
  /// </summary>
  public sealed partial class SoftmaxLayerParams : pb::IMessage<SoftmaxLayerParams> {
    private static readonly pb::MessageParser<SoftmaxLayerParams> _parser = new pb::MessageParser<SoftmaxLayerParams>(() => new SoftmaxLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SoftmaxLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoftmaxLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoftmaxLayerParams(SoftmaxLayerParams other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoftmaxLayerParams Clone() {
      return new SoftmaxLayerParams(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SoftmaxLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SoftmaxLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SoftmaxLayerParams other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A layer that uniformly splits across the channel dimension
  /// to produce a specified number of outputs.
  ///
  /// .. code::
  ///
  ///      (y1,y2,...yN) = SplitLayer(x), where N = nOutputs
  ///
  /// Requires 1 input and produces multiple outputs.
  ///
  /// Input
  ///     A blob with shape ``[C]`` or ``[C, H, W]``
  /// Output
  ///     ``nOutputs`` blobs with shapes
  ///     ``[C/nOutputs]`` or ``[C/nOutputs, H, W]``
  /// </summary>
  public sealed partial class SplitLayerParams : pb::IMessage<SplitLayerParams> {
    private static readonly pb::MessageParser<SplitLayerParams> _parser = new pb::MessageParser<SplitLayerParams>(() => new SplitLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SplitLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitLayerParams(SplitLayerParams other) : this() {
      nOutputs_ = other.nOutputs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitLayerParams Clone() {
      return new SplitLayerParams(this);
    }

    /// <summary>Field number for the "nOutputs" field.</summary>
    public const int NOutputsFieldNumber = 1;
    private ulong nOutputs_;
    /// <summary>
    //// The number of outputs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NOutputs {
      get { return nOutputs_; }
      set {
        nOutputs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SplitLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SplitLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NOutputs != other.NOutputs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NOutputs != 0UL) hash ^= NOutputs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NOutputs != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(NOutputs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NOutputs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NOutputs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SplitLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.NOutputs != 0UL) {
        NOutputs = other.NOutputs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NOutputs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A layer that performs elementwise addition.
  ///
  /// .. code::
  ///
  ///      y = AddLayer(x1,x2,...)
  ///
  /// Requires 1 or more than 1 input and produces 1 output.
  ///
  /// Input
  ///     One or more blobs with broadcastable shapes ``[1]``, ``[C]``, ``[1, H, W]``, or ``[C, H, W]``.
  /// Output
  ///     A blob with shape equal to the input blob.
  ///
  /// If only one input is provided, scalar addition is performed:
  ///
  /// .. math::
  ///     y = x + \alpha
  /// </summary>
  public sealed partial class AddLayerParams : pb::IMessage<AddLayerParams> {
    private static readonly pb::MessageParser<AddLayerParams> _parser = new pb::MessageParser<AddLayerParams>(() => new AddLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddLayerParams(AddLayerParams other) : this() {
      alpha_ = other.alpha_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddLayerParams Clone() {
      return new AddLayerParams(this);
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 1;
    private float alpha_;
    /// <summary>
    ///*
    /// Scalar to be added to the input.
    /// Only used if there is a single input.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Alpha != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Alpha);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Alpha = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A layer that performs elementwise multiplication.
  ///
  /// .. code::
  ///
  ///      y = MultiplyLayer(x1,x2,...)
  ///
  /// Requires 1 or more than 1 input and produces 1 output.
  ///
  /// Input
  ///     One or more blobs with broadcastable shapes ``[1]``, ``[C]``, ``[1, H, W]``, or ``[C, H, W]``.
  /// Output
  ///     A blob with shape equal to the first input blob.
  ///
  /// If only one input is provided, scalar multiplication is performed:
  ///
  /// .. math::
  ///     y = \alpha x
  /// </summary>
  public sealed partial class MultiplyLayerParams : pb::IMessage<MultiplyLayerParams> {
    private static readonly pb::MessageParser<MultiplyLayerParams> _parser = new pb::MessageParser<MultiplyLayerParams>(() => new MultiplyLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiplyLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplyLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplyLayerParams(MultiplyLayerParams other) : this() {
      alpha_ = other.alpha_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplyLayerParams Clone() {
      return new MultiplyLayerParams(this);
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 1;
    private float alpha_;
    /// <summary>
    ///*
    /// Scalar to be multiplied with the input.
    /// Only used if there is a single input.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiplyLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiplyLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Alpha != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Alpha);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiplyLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Alpha = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A layer that applies a unary function.
  ///
  /// .. code::
  ///
  ///      y = UnaryFunctionLayer(x)
  ///
  /// Requires 1 input and produces 1 output.
  ///
  /// Input
  ///     A blob with shape ``[C]`` or ``[C, H, W]``.
  /// Output
  ///     A blob with the same shape as the input.
  ///
  /// The input is first modified by shifting and scaling:
  ///
  /// .. math::
  ///     x \leftarrow \text{scale} \cdot x + \text{shift}
  /// </summary>
  public sealed partial class UnaryFunctionLayerParams : pb::IMessage<UnaryFunctionLayerParams> {
    private static readonly pb::MessageParser<UnaryFunctionLayerParams> _parser = new pb::MessageParser<UnaryFunctionLayerParams>(() => new UnaryFunctionLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnaryFunctionLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnaryFunctionLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnaryFunctionLayerParams(UnaryFunctionLayerParams other) : this() {
      type_ = other.type_;
      alpha_ = other.alpha_;
      epsilon_ = other.epsilon_;
      shift_ = other.shift_;
      scale_ = other.scale_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnaryFunctionLayerParams Clone() {
      return new UnaryFunctionLayerParams(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::CoreML.Specification.UnaryFunctionLayerParams.Types.Operation type_ = 0;
    /// <summary>
    //// The type of unary function.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.UnaryFunctionLayerParams.Types.Operation Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 2;
    private float alpha_;
    /// <summary>
    ///*
    /// A constant used in ``POWER`` and ``THRESHOLD`` functions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    /// <summary>Field number for the "epsilon" field.</summary>
    public const int EpsilonFieldNumber = 3;
    private float epsilon_;
    /// <summary>
    ///*
    /// A small constant to avoid division by 0 while normalizing variance.
    /// Defaults to ``1e-6`` if not set or set to ``0``.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Epsilon {
      get { return epsilon_; }
      set {
        epsilon_ = value;
      }
    }

    /// <summary>Field number for the "shift" field.</summary>
    public const int ShiftFieldNumber = 4;
    private float shift_;
    /// <summary>
    ///*
    /// Input is shifted by this amount
    /// before the unary function is applied.
    /// Defaults to ``0.0`` if not set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Shift {
      get { return shift_; }
      set {
        shift_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 5;
    private float scale_;
    /// <summary>
    ///*
    /// Input is scaled by this amount
    /// before the unary function is applied.
    /// Defaults to ``1.0`` if not set or set to ``0``.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnaryFunctionLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnaryFunctionLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Epsilon, other.Epsilon)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Shift, other.Shift)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
      if (Epsilon != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Epsilon);
      if (Shift != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Shift);
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Alpha != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Alpha);
      }
      if (Epsilon != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Epsilon);
      }
      if (Shift != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Shift);
      }
      if (Scale != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Scale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (Epsilon != 0F) {
        size += 1 + 4;
      }
      if (Shift != 0F) {
        size += 1 + 4;
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnaryFunctionLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      if (other.Epsilon != 0F) {
        Epsilon = other.Epsilon;
      }
      if (other.Shift != 0F) {
        Shift = other.Shift;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::CoreML.Specification.UnaryFunctionLayerParams.Types.Operation) input.ReadEnum();
            break;
          }
          case 21: {
            Alpha = input.ReadFloat();
            break;
          }
          case 29: {
            Epsilon = input.ReadFloat();
            break;
          }
          case 37: {
            Shift = input.ReadFloat();
            break;
          }
          case 45: {
            Scale = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UnaryFunctionLayerParams message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///*
      /// A unary operator.
      ///
      /// The following functions are supported:
      ///
      /// ``SQRT``
      ///     .. math:: f(x) = \sqrt{x}
      ///
      /// ``RSQRT``
      ///     .. math:: f(x) = \dfrac{1}{\sqrt{x + \epsilon}}
      ///
      /// ``INVERSE``
      ///     .. math:: f(x) = \dfrac{1}{x + \epsilon}
      ///
      /// ``POWER``
      ///     .. math:: f(x) = x^\alpha
      ///
      /// ``EXP``
      ///     .. math:: f(x) = e^x
      ///
      /// ``LOG``
      ///     .. math:: f(x) = \log x
      ///
      /// ``ABS``
      ///     .. math:: f(x) = |x|
      ///
      /// ``THRESHOLD``
      ///     .. math:: f(x) = \text{max}(\alpha, x)
      /// </summary>
      public enum Operation {
        [pbr::OriginalName("SQRT")] Sqrt = 0,
        [pbr::OriginalName("RSQRT")] Rsqrt = 1,
        [pbr::OriginalName("INVERSE")] Inverse = 2,
        [pbr::OriginalName("POWER")] Power = 3,
        [pbr::OriginalName("EXP")] Exp = 4,
        [pbr::OriginalName("LOG")] Log = 5,
        [pbr::OriginalName("ABS")] Abs = 6,
        [pbr::OriginalName("THRESHOLD")] Threshold = 7,
      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// A layer that scales up spatial dimensions.
  /// It supports two modes: nearest neighbour (default) and bilinear.
  ///
  /// .. code::
  ///
  ///      y = UpsampleLayer(x)
  ///
  /// Requires 1 input and produces 1 output.
  ///
  /// Input
  ///     A blob with shape ``[C, H, W]``.
  /// Output
  ///     A blob with shape ``[C, scalingFactor[0] * H, scalingFactor[1] * W]``
  /// </summary>
  public sealed partial class UpsampleLayerParams : pb::IMessage<UpsampleLayerParams> {
    private static readonly pb::MessageParser<UpsampleLayerParams> _parser = new pb::MessageParser<UpsampleLayerParams>(() => new UpsampleLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpsampleLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpsampleLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpsampleLayerParams(UpsampleLayerParams other) : this() {
      scalingFactor_ = other.scalingFactor_.Clone();
      mode_ = other.mode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpsampleLayerParams Clone() {
      return new UpsampleLayerParams(this);
    }

    /// <summary>Field number for the "scalingFactor" field.</summary>
    public const int ScalingFactorFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_scalingFactor_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> scalingFactor_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///*
    /// Scaling Factor.
    /// Must be length 2 in order ``[H, W]``.
    /// If not set, default value ``[1, 1]`` is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> ScalingFactor {
      get { return scalingFactor_; }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 5;
    private global::CoreML.Specification.UpsampleLayerParams.Types.InterpolationMode mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.UpsampleLayerParams.Types.InterpolationMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpsampleLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpsampleLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!scalingFactor_.Equals(other.scalingFactor_)) return false;
      if (Mode != other.Mode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= scalingFactor_.GetHashCode();
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      scalingFactor_.WriteTo(output, _repeated_scalingFactor_codec);
      if (Mode != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += scalingFactor_.CalculateSize(_repeated_scalingFactor_codec);
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpsampleLayerParams other) {
      if (other == null) {
        return;
      }
      scalingFactor_.Add(other.scalingFactor_);
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            scalingFactor_.AddEntriesFrom(input, _repeated_scalingFactor_codec);
            break;
          }
          case 40: {
            mode_ = (global::CoreML.Specification.UpsampleLayerParams.Types.InterpolationMode) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UpsampleLayerParams message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum InterpolationMode {
        /// <summary>
        //// Nearest Neighbour
        /// </summary>
        [pbr::OriginalName("NN")] Nn = 0,
        /// <summary>
        //// Bilinear
        /// </summary>
        [pbr::OriginalName("BILINEAR")] Bilinear = 1,
      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// A layer that performs elementwise addition of a bias,
  /// which is broadcasted to match the input shape.
  ///
  /// .. code::
  ///
  ///      y = BiasLayer(x)
  ///
  /// Requires 1 input and produces 1 output.
  ///
  /// Input
  ///     A blob with shape ``[C, H, W]``.
  /// Output
  ///     A blob with the same shape as the input.
  /// </summary>
  public sealed partial class BiasLayerParams : pb::IMessage<BiasLayerParams> {
    private static readonly pb::MessageParser<BiasLayerParams> _parser = new pb::MessageParser<BiasLayerParams>(() => new BiasLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BiasLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiasLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiasLayerParams(BiasLayerParams other) : this() {
      shape_ = other.shape_.Clone();
      bias_ = other.bias_ != null ? other.bias_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiasLayerParams Clone() {
      return new BiasLayerParams(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_shape_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> shape_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///*
    /// The shape of the bias.
    /// Must be one of the following:
    /// ``[1]``, ``[C]``, ``[1, H, W]`` or ``[C, H, W]``.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Shape {
      get { return shape_; }
    }

    /// <summary>Field number for the "bias" field.</summary>
    public const int BiasFieldNumber = 2;
    private global::CoreML.Specification.WeightParams bias_;
    /// <summary>
    ///*
    /// The bias values.
    /// The size must be equal to the product of the ``shape`` dimensions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams Bias {
      get { return bias_; }
      set {
        bias_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BiasLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BiasLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!shape_.Equals(other.shape_)) return false;
      if (!object.Equals(Bias, other.Bias)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= shape_.GetHashCode();
      if (bias_ != null) hash ^= Bias.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      shape_.WriteTo(output, _repeated_shape_codec);
      if (bias_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Bias);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += shape_.CalculateSize(_repeated_shape_codec);
      if (bias_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bias);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BiasLayerParams other) {
      if (other == null) {
        return;
      }
      shape_.Add(other.shape_);
      if (other.bias_ != null) {
        if (bias_ == null) {
          bias_ = new global::CoreML.Specification.WeightParams();
        }
        Bias.MergeFrom(other.Bias);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            shape_.AddEntriesFrom(input, _repeated_shape_codec);
            break;
          }
          case 18: {
            if (bias_ == null) {
              bias_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(bias_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A layer that performs elmentwise multiplication by a scale factor
  /// and optionally adds a bias;
  /// both the scale and bias are broadcasted to match the input shape.
  ///
  /// .. code::
  ///
  ///      y = ScaleLayer(x)
  ///
  /// Requires 1 input and produces 1 output.
  ///
  /// Input
  ///     A blob with shape ``[C, H, W]``.
  /// Output
  ///     A blob with the same shape as the input.
  /// </summary>
  public sealed partial class ScaleLayerParams : pb::IMessage<ScaleLayerParams> {
    private static readonly pb::MessageParser<ScaleLayerParams> _parser = new pb::MessageParser<ScaleLayerParams>(() => new ScaleLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScaleLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScaleLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScaleLayerParams(ScaleLayerParams other) : this() {
      shapeScale_ = other.shapeScale_.Clone();
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      hasBias_ = other.hasBias_;
      shapeBias_ = other.shapeBias_.Clone();
      bias_ = other.bias_ != null ? other.bias_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScaleLayerParams Clone() {
      return new ScaleLayerParams(this);
    }

    /// <summary>Field number for the "shapeScale" field.</summary>
    public const int ShapeScaleFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_shapeScale_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> shapeScale_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///*
    /// The shape of the scale.
    /// Must be one of the following:
    /// ``[1]``, ``[C]``, ``[1, H, W]`` or ``[C, H, W]``.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> ShapeScale {
      get { return shapeScale_; }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private global::CoreML.Specification.WeightParams scale_;
    /// <summary>
    ///*
    /// The scale values.
    /// The size must be equal to the product of the ``shape`` dimensions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "hasBias" field.</summary>
    public const int HasBiasFieldNumber = 3;
    private bool hasBias_;
    /// <summary>
    //// If true, a bias is added after scaling.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBias {
      get { return hasBias_; }
      set {
        hasBias_ = value;
      }
    }

    /// <summary>Field number for the "shapeBias" field.</summary>
    public const int ShapeBiasFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_shapeBias_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> shapeBias_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///*
    /// The shape of the bias.
    /// Must be one of the following:
    /// ``[1]``, ``[C]``, ``[1, H, W]`` or ``[C, H, W]``.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> ShapeBias {
      get { return shapeBias_; }
    }

    /// <summary>Field number for the "bias" field.</summary>
    public const int BiasFieldNumber = 5;
    private global::CoreML.Specification.WeightParams bias_;
    /// <summary>
    ///*
    /// The bias values.
    /// The size must be equal to the product of the ``shape`` dimensions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams Bias {
      get { return bias_; }
      set {
        bias_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScaleLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScaleLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!shapeScale_.Equals(other.shapeScale_)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (HasBias != other.HasBias) return false;
      if(!shapeBias_.Equals(other.shapeBias_)) return false;
      if (!object.Equals(Bias, other.Bias)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= shapeScale_.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (HasBias != false) hash ^= HasBias.GetHashCode();
      hash ^= shapeBias_.GetHashCode();
      if (bias_ != null) hash ^= Bias.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      shapeScale_.WriteTo(output, _repeated_shapeScale_codec);
      if (scale_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Scale);
      }
      if (HasBias != false) {
        output.WriteRawTag(24);
        output.WriteBool(HasBias);
      }
      shapeBias_.WriteTo(output, _repeated_shapeBias_codec);
      if (bias_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Bias);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += shapeScale_.CalculateSize(_repeated_shapeScale_codec);
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (HasBias != false) {
        size += 1 + 1;
      }
      size += shapeBias_.CalculateSize(_repeated_shapeBias_codec);
      if (bias_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bias);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScaleLayerParams other) {
      if (other == null) {
        return;
      }
      shapeScale_.Add(other.shapeScale_);
      if (other.scale_ != null) {
        if (scale_ == null) {
          scale_ = new global::CoreML.Specification.WeightParams();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.HasBias != false) {
        HasBias = other.HasBias;
      }
      shapeBias_.Add(other.shapeBias_);
      if (other.bias_ != null) {
        if (bias_ == null) {
          bias_ = new global::CoreML.Specification.WeightParams();
        }
        Bias.MergeFrom(other.Bias);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            shapeScale_.AddEntriesFrom(input, _repeated_shapeScale_codec);
            break;
          }
          case 18: {
            if (scale_ == null) {
              scale_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(scale_);
            break;
          }
          case 24: {
            HasBias = input.ReadBool();
            break;
          }
          case 34:
          case 32: {
            shapeBias_.AddEntriesFrom(input, _repeated_shapeBias_codec);
            break;
          }
          case 42: {
            if (bias_ == null) {
              bias_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(bias_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A layer that loads data as a parameter and provides it as an output.
  ///
  /// .. code::
  ///
  ///      y = LoadConstantLayer()
  ///
  /// Takes no input. Produces 1 output.
  ///
  /// Input
  ///     None
  /// Output:
  ///     A blob with shape ``[C, H, W]``
  /// </summary>
  public sealed partial class LoadConstantLayerParams : pb::IMessage<LoadConstantLayerParams> {
    private static readonly pb::MessageParser<LoadConstantLayerParams> _parser = new pb::MessageParser<LoadConstantLayerParams>(() => new LoadConstantLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadConstantLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadConstantLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadConstantLayerParams(LoadConstantLayerParams other) : this() {
      shape_ = other.shape_.Clone();
      data_ = other.data_ != null ? other.data_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadConstantLayerParams Clone() {
      return new LoadConstantLayerParams(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_shape_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> shape_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///*
    /// The shape of the constant to be loaded,
    /// which must be``[C, H, W]``.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Shape {
      get { return shape_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::CoreML.Specification.WeightParams data_;
    /// <summary>
    ///*
    /// The data values,
    /// of size ``C * H * W``.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadConstantLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadConstantLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!shape_.Equals(other.shape_)) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= shape_.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      shape_.WriteTo(output, _repeated_shape_codec);
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += shape_.CalculateSize(_repeated_shape_codec);
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadConstantLayerParams other) {
      if (other == null) {
        return;
      }
      shape_.Add(other.shape_);
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::CoreML.Specification.WeightParams();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            shape_.AddEntriesFrom(input, _repeated_shape_codec);
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A layer that performs L2 normalization, i.e. divides by the
  /// the square root of the sum of squares of all elements of input.
  ///
  /// .. code::
  ///
  ///      y = L2NormalizeLayer(x)
  ///
  /// Requires 1 input and produces 1 output.
  ///
  /// Input
  ///     A blob with shape ``[C]`` or ``[C, H, W]``.
  /// Output
  ///     A blob with the same shape as the input.
  ///
  /// This layer is described by the following formula:
  ///
  /// .. math::
  ///     x_i \leftarrow \dfrac{x_i}{\sqrt{\sum{x_i^2} + \epsilon}}
  /// </summary>
  public sealed partial class L2NormalizeLayerParams : pb::IMessage<L2NormalizeLayerParams> {
    private static readonly pb::MessageParser<L2NormalizeLayerParams> _parser = new pb::MessageParser<L2NormalizeLayerParams>(() => new L2NormalizeLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2NormalizeLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2NormalizeLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2NormalizeLayerParams(L2NormalizeLayerParams other) : this() {
      epsilon_ = other.epsilon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2NormalizeLayerParams Clone() {
      return new L2NormalizeLayerParams(this);
    }

    /// <summary>Field number for the "epsilon" field.</summary>
    public const int EpsilonFieldNumber = 1;
    private float epsilon_;
    /// <summary>
    ///*
    /// A small constant to avoid division by 0 while normalizing variance.
    /// Defaults to ``1e-6`` if not set or set to ``0``.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Epsilon {
      get { return epsilon_; }
      set {
        epsilon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2NormalizeLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2NormalizeLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Epsilon, other.Epsilon)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Epsilon != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Epsilon);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Epsilon != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Epsilon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Epsilon != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2NormalizeLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.Epsilon != 0F) {
        Epsilon = other.Epsilon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Epsilon = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A layer that flattens the input.
  ///
  /// .. code::
  ///
  ///      y = FlattenLayer(x)
  ///
  /// Requires 1 input and produces 1 output.
  ///
  /// Input
  ///     A blob with shape ``[C, H, W]``.
  /// Output
  ///     A blob with shape ``[C * H * W, 1, 1]``
  ///
  /// There are two flatten orders: ``CHANNEL_FIRST`` and ``CHANNEL_LAST``.
  /// ``CHANNEL_FIRST`` does not require data to be rearranged,
  /// because row major ordering is used by internal storage.
  /// ``CHANNEL_LAST`` requires data to be rearranged.
  /// </summary>
  public sealed partial class FlattenLayerParams : pb::IMessage<FlattenLayerParams> {
    private static readonly pb::MessageParser<FlattenLayerParams> _parser = new pb::MessageParser<FlattenLayerParams>(() => new FlattenLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlattenLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlattenLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlattenLayerParams(FlattenLayerParams other) : this() {
      mode_ = other.mode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlattenLayerParams Clone() {
      return new FlattenLayerParams(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::CoreML.Specification.FlattenLayerParams.Types.FlattenOrder mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.FlattenLayerParams.Types.FlattenOrder Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlattenLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlattenLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlattenLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mode_ = (global::CoreML.Specification.FlattenLayerParams.Types.FlattenOrder) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FlattenLayerParams message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum FlattenOrder {
        [pbr::OriginalName("CHANNEL_FIRST")] ChannelFirst = 0,
        [pbr::OriginalName("CHANNEL_LAST")] ChannelLast = 1,
      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// A layer that recasts the input into a new shape.
  ///
  /// .. code::
  ///
  ///      y = ReshapeLayer(x)
  ///
  /// Requires 1 input and produces 1 output.
  ///
  /// Input
  ///     A blob with shape ``[C, H, W]`` or ``[Seq, C, H, W]``.
  /// Output
  ///     A blob with shape ``[C_out, H_out, W_out]``
  ///     or ``[Seq_out, C_out, H_out, W_out]``.
  ///
  /// There are two reshape orders: ``CHANNEL_FIRST`` and ``CHANNEL_LAST``.
  /// ``CHANNEL_FIRST`` is equivalent to
  /// flattening the input to ``[C * H * W, 1, 1]`` in channel first order
  /// and then reshaping it to the target shape;
  /// no data rearrangement is required.
  /// ``CHANNEL_LAST`` is equivalent to
  /// flattening the input to ``[H * W * C, 1, 1]`` in channel last order,
  /// reshaping it to ``[H_out, W_out, C_out]`` (it is now in "H_out-major"" order),
  /// and then permuting it to ``[C_out, H_out, W_out]``;
  /// both the flattening and permuting requires the data to be rearranged.
  /// </summary>
  public sealed partial class ReshapeLayerParams : pb::IMessage<ReshapeLayerParams> {
    private static readonly pb::MessageParser<ReshapeLayerParams> _parser = new pb::MessageParser<ReshapeLayerParams>(() => new ReshapeLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReshapeLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReshapeLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReshapeLayerParams(ReshapeLayerParams other) : this() {
      targetShape_ = other.targetShape_.Clone();
      mode_ = other.mode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReshapeLayerParams Clone() {
      return new ReshapeLayerParams(this);
    }

    /// <summary>Field number for the "targetShape" field.</summary>
    public const int TargetShapeFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_targetShape_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> targetShape_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///*
    /// The shape of the output.
    /// Must be of length 3 or 4.
    /// If set to 3, ``targetShape`` is interpreted as
    /// ``[C_out, H_out, W_out]``, and sequence length of the input is preserved.
    /// If set to 4, ``targetShape`` is interpreted as
    /// ``[Seq_out, C_out, H_out, W_out]``,
    /// where ``Seq_out`` is the new sequence length.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> TargetShape {
      get { return targetShape_; }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 2;
    private global::CoreML.Specification.ReshapeLayerParams.Types.ReshapeOrder mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ReshapeLayerParams.Types.ReshapeOrder Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReshapeLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReshapeLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!targetShape_.Equals(other.targetShape_)) return false;
      if (Mode != other.Mode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= targetShape_.GetHashCode();
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      targetShape_.WriteTo(output, _repeated_targetShape_codec);
      if (Mode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += targetShape_.CalculateSize(_repeated_targetShape_codec);
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReshapeLayerParams other) {
      if (other == null) {
        return;
      }
      targetShape_.Add(other.targetShape_);
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            targetShape_.AddEntriesFrom(input, _repeated_targetShape_codec);
            break;
          }
          case 16: {
            mode_ = (global::CoreML.Specification.ReshapeLayerParams.Types.ReshapeOrder) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReshapeLayerParams message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ReshapeOrder {
        [pbr::OriginalName("CHANNEL_FIRST")] ChannelFirst = 0,
        [pbr::OriginalName("CHANNEL_LAST")] ChannelLast = 1,
      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// A layer that rearranges the dimensions and data of an input.
  ///
  /// .. code::
  ///
  ///      y = PermuteLayer(x)
  ///
  /// Requires 1 input and produces 1 output.
  ///
  /// Input
  ///     A sequence of 3-dimensional blobs. ``InputShape = [Seq, C, H, W]``.
  /// Output
  ///     A sequence of a different length of 3-dimensional blobs.
  ///     Shape: ``[InputShape[axis[0]], InputShape[axis[1]],
  ///     InputShape[axis[2]], InputShape[axis[3]]]``. Hence output is a sequence of length ``InputShape[axis[0]]``.
  ///
  /// Examples:
  ///
  /// - If ``axis`` is set to ``[0, 3, 1, 2]``,
  ///   then the output has shape ``[W,C,H]``
  ///   and has the same sequence length that of the input.
  ///
  /// - If ``axis`` is set to ``[3, 1, 2, 0]``,
  ///   and the input is a sequence of data
  ///   with length ``Seq`` and shape ``[C, 1, 1]``,
  ///   then the output is a unit sequence of data with shape ``[C, 1, Seq]``.
  ///
  /// - If ``axis`` is set to ``[0, 3, 2, 1]``,
  ///   the output is a reverse of the input: ``[C, H, W] -> [W, H, C]``.
  ///
  /// - If ``axis`` is not set, or is set to ``[0, 1, 2, 3]``,
  ///   the output is the same as the input.
  /// </summary>
  public sealed partial class PermuteLayerParams : pb::IMessage<PermuteLayerParams> {
    private static readonly pb::MessageParser<PermuteLayerParams> _parser = new pb::MessageParser<PermuteLayerParams>(() => new PermuteLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PermuteLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PermuteLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PermuteLayerParams(PermuteLayerParams other) : this() {
      axis_ = other.axis_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PermuteLayerParams Clone() {
      return new PermuteLayerParams(this);
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_axis_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> axis_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///*
    /// The order in which to permute the dimensions.
    /// Must have length 4 and a permutation of ``[0, 1, 2, 3]``.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Axis {
      get { return axis_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PermuteLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PermuteLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!axis_.Equals(other.axis_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= axis_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      axis_.WriteTo(output, _repeated_axis_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += axis_.CalculateSize(_repeated_axis_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PermuteLayerParams other) {
      if (other == null) {
        return;
      }
      axis_.Add(other.axis_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            axis_.AddEntriesFrom(input, _repeated_axis_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A layer that reorganizes data in the input in specific ways.
  ///
  /// .. code::
  ///
  ///      y = ReorganizeDataLayer(x)
  ///
  /// Requires 1 input and produces 1 output.
  ///
  /// Input
  ///     A blob with shape ``[C, H, W]``.
  /// Output
  ///     A blob with shape ``[C_out, H_out, W_out]``.
  ///
  /// mode == SPACE_TO_DEPTH
  ///  ``[C_out, H_out, W_out]`` : ``[C * blockSize * blockSize, H/blockSize, W/blockSize]``.
  ///  blockSize must divide H and W.
  ///  Data is moved from the spatial dimensions to the channel dimension. Input is spatially divided into
  ///  non-overlapping blocks of size blockSize X blockSize and data from each block is moved into the
  ///  channel dimension.
  ///
  /// mode == DEPTH_TO_SPACE
  ///  ``[C_out, H_out, W_out]`` : ``[C/(blockSize * blockSize), H * blockSize, W * blockSize]``.
  ///  Square of blockSize must divide C.
  ///  Reverse of SPACE_TO_DEPTH. Data is moved from the channel dimension to the spatial dimensions.
  /// </summary>
  public sealed partial class ReorganizeDataLayerParams : pb::IMessage<ReorganizeDataLayerParams> {
    private static readonly pb::MessageParser<ReorganizeDataLayerParams> _parser = new pb::MessageParser<ReorganizeDataLayerParams>(() => new ReorganizeDataLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReorganizeDataLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReorganizeDataLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReorganizeDataLayerParams(ReorganizeDataLayerParams other) : this() {
      mode_ = other.mode_;
      blockSize_ = other.blockSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReorganizeDataLayerParams Clone() {
      return new ReorganizeDataLayerParams(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::CoreML.Specification.ReorganizeDataLayerParams.Types.ReorganizationType mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ReorganizeDataLayerParams.Types.ReorganizationType Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "blockSize" field.</summary>
    public const int BlockSizeFieldNumber = 2;
    private ulong blockSize_;
    /// <summary>
    //// must be greater than 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BlockSize {
      get { return blockSize_; }
      set {
        blockSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReorganizeDataLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReorganizeDataLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if (BlockSize != other.BlockSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (BlockSize != 0UL) hash ^= BlockSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (BlockSize != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(BlockSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (BlockSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BlockSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReorganizeDataLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.BlockSize != 0UL) {
        BlockSize = other.BlockSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mode_ = (global::CoreML.Specification.ReorganizeDataLayerParams.Types.ReorganizationType) input.ReadEnum();
            break;
          }
          case 16: {
            BlockSize = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReorganizeDataLayerParams message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ReorganizationType {
        [pbr::OriginalName("SPACE_TO_DEPTH")] SpaceToDepth = 0,
        [pbr::OriginalName("DEPTH_TO_SPACE")] DepthToSpace = 1,
      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// A layer that slices the input data along a given axis.
  ///
  /// .. code::
  ///
  ///      y = SliceLayer(x)
  ///
  /// Requires 1 input and produces 1 output.
  ///
  /// Input
  ///     A blob with shape ``[Seq, C, H, W]``.
  /// Output
  ///     A blob with shape ``[Seq_out, C_out, H_out, W_out]``.
  ///
  /// Sliced section is taken from the interval ``[startIndex, endIndex)``, i.e.
  /// startIndex is inclusive while endIndex is exclusive.
  /// stride must be positive and represents the step size for slicing.
  /// startIndex must be non-negative. Negative indexing is supported for endIndex: -1 denotes N, -2 denotes N-1
  /// and so on, where N is the length of the dimension to be sliced.
  /// </summary>
  public sealed partial class SliceLayerParams : pb::IMessage<SliceLayerParams> {
    private static readonly pb::MessageParser<SliceLayerParams> _parser = new pb::MessageParser<SliceLayerParams>(() => new SliceLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SliceLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SliceLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SliceLayerParams(SliceLayerParams other) : this() {
      startIndex_ = other.startIndex_;
      endIndex_ = other.endIndex_;
      stride_ = other.stride_;
      axis_ = other.axis_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SliceLayerParams Clone() {
      return new SliceLayerParams(this);
    }

    /// <summary>Field number for the "startIndex" field.</summary>
    public const int StartIndexFieldNumber = 1;
    private long startIndex_;
    /// <summary>
    //// start of the sliced section. Inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartIndex {
      get { return startIndex_; }
      set {
        startIndex_ = value;
      }
    }

    /// <summary>Field number for the "endIndex" field.</summary>
    public const int EndIndexFieldNumber = 2;
    private long endIndex_;
    /// <summary>
    //// end of sliced section. Exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndIndex {
      get { return endIndex_; }
      set {
        endIndex_ = value;
      }
    }

    /// <summary>Field number for the "stride" field.</summary>
    public const int StrideFieldNumber = 3;
    private ulong stride_;
    /// <summary>
    //// The step size. Must be positive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Stride {
      get { return stride_; }
      set {
        stride_ = value;
      }
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 4;
    private global::CoreML.Specification.SliceLayerParams.Types.SliceAxis axis_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.SliceLayerParams.Types.SliceAxis Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SliceLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SliceLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartIndex != other.StartIndex) return false;
      if (EndIndex != other.EndIndex) return false;
      if (Stride != other.Stride) return false;
      if (Axis != other.Axis) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartIndex != 0L) hash ^= StartIndex.GetHashCode();
      if (EndIndex != 0L) hash ^= EndIndex.GetHashCode();
      if (Stride != 0UL) hash ^= Stride.GetHashCode();
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartIndex != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StartIndex);
      }
      if (EndIndex != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EndIndex);
      }
      if (Stride != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Stride);
      }
      if (Axis != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Axis);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartIndex);
      }
      if (EndIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndIndex);
      }
      if (Stride != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Stride);
      }
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Axis);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SliceLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.StartIndex != 0L) {
        StartIndex = other.StartIndex;
      }
      if (other.EndIndex != 0L) {
        EndIndex = other.EndIndex;
      }
      if (other.Stride != 0UL) {
        Stride = other.Stride;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartIndex = input.ReadInt64();
            break;
          }
          case 16: {
            EndIndex = input.ReadInt64();
            break;
          }
          case 24: {
            Stride = input.ReadUInt64();
            break;
          }
          case 32: {
            axis_ = (global::CoreML.Specification.SliceLayerParams.Types.SliceAxis) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SliceLayerParams message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SliceAxis {
        [pbr::OriginalName("CHANNEL_AXIS")] ChannelAxis = 0,
        [pbr::OriginalName("HEIGHT_AXIS")] HeightAxis = 1,
        [pbr::OriginalName("WIDTH_AXIS")] WidthAxis = 2,
      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// A layer that reduces the input using a specified operation.
  ///
  /// .. code::
  ///
  ///      y = ReduceLayer(x)
  ///
  /// Requires 1 input and produces 1 output.
  ///
  /// Input
  ///     A blob with shape ``[C, H, W]``.
  /// Output
  ///     A blob whose shape depends on the value of axis, the dimension(s) along which reduction is performed.
  ///     if axis == C   : ``[1, H, W]``
  ///     if axis == H   : ``[C, 1, W]``
  ///     if axis == W   : ``[C, H, 1]``
  ///     if axis == HW  : ``[C, 1, 1]``
  ///     if axis == CHW : ``[1, 1, 1]`` [Default]
  /// </summary>
  public sealed partial class ReduceLayerParams : pb::IMessage<ReduceLayerParams> {
    private static readonly pb::MessageParser<ReduceLayerParams> _parser = new pb::MessageParser<ReduceLayerParams>(() => new ReduceLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReduceLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReduceLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReduceLayerParams(ReduceLayerParams other) : this() {
      mode_ = other.mode_;
      epsilon_ = other.epsilon_;
      axis_ = other.axis_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReduceLayerParams Clone() {
      return new ReduceLayerParams(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::CoreML.Specification.ReduceLayerParams.Types.ReduceOperation mode_ = 0;
    /// <summary>
    //// Specifies function used to reduce.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ReduceLayerParams.Types.ReduceOperation Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "epsilon" field.</summary>
    public const int EpsilonFieldNumber = 2;
    private float epsilon_;
    /// <summary>
    ///*
    /// Used if mode is ``LOGSUM``.
    /// Defaults to ``1e-6`` if not set or is set to ``0``.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Epsilon {
      get { return epsilon_; }
      set {
        epsilon_ = value;
      }
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 3;
    private global::CoreML.Specification.ReduceLayerParams.Types.ReduceAxis axis_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ReduceLayerParams.Types.ReduceAxis Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReduceLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReduceLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Epsilon, other.Epsilon)) return false;
      if (Axis != other.Axis) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (Epsilon != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Epsilon);
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (Epsilon != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Epsilon);
      }
      if (Axis != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Axis);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (Epsilon != 0F) {
        size += 1 + 4;
      }
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Axis);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReduceLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.Epsilon != 0F) {
        Epsilon = other.Epsilon;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mode_ = (global::CoreML.Specification.ReduceLayerParams.Types.ReduceOperation) input.ReadEnum();
            break;
          }
          case 21: {
            Epsilon = input.ReadFloat();
            break;
          }
          case 24: {
            axis_ = (global::CoreML.Specification.ReduceLayerParams.Types.ReduceAxis) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReduceLayerParams message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///
      /// The following reduction operations are supported
      /// and are applied on the specified axis of the input array:
      ///
      /// ``SUM``
      ///     Sum of all elements
      ///
      ///     .. math:: \sum{x_i}
      ///
      /// ``AVG``
      ///     Sum of all elements divided by the number of elements
      ///
      ///     .. math:: \dfrac{\sum^n{x_i}}{n}
      ///
      /// ``PROD``
      ///     Product of all elements
      ///
      ///     .. math:: \prod{x_i}
      ///
      /// ``LOGSUM``
      ///     Sum of the natural logarithm of all elements
      ///
      ///     .. math:: \sum{\ln{(x_i + \epsilon)}}
      ///
      /// ``SUMSQUARE``
      ///     Sum of squares of all elements
      ///
      ///     .. math:: \sum{x^2}
      ///
      /// ``L1``
      ///     L1 normalization of all elements
      ///
      ///     .. math:: ||x||_1 = \sum{|x_i|}
      ///
      /// ``L2``
      ///     L2 normalization of all elements
      ///
      ///     .. math:: ||x||_2 = \sqrt{\sum{x_i^2}}
      ///
      /// ``MAX``
      ///     Maximum of all elements
      ///
      ///     .. math:: \text{max}(x_i)
      ///
      /// ``MIN``
      ///     Minumum of all elements
      ///
      ///     .. math:: \text{min}(x_i)
      ///
      /// ``ARGMAX``
      ///     Argument of the maximum of all elements
      ///
      ///     .. math:: \text{argmax}(x_i)
      /// </summary>
      public enum ReduceOperation {
        [pbr::OriginalName("SUM")] Sum = 0,
        [pbr::OriginalName("AVG")] Avg = 1,
        [pbr::OriginalName("PROD")] Prod = 2,
        [pbr::OriginalName("LOGSUM")] Logsum = 3,
        [pbr::OriginalName("SUMSQUARE")] Sumsquare = 4,
        [pbr::OriginalName("L1")] L1 = 5,
        [pbr::OriginalName("L2")] L2 = 6,
        [pbr::OriginalName("MAX")] Max = 7,
        [pbr::OriginalName("MIN")] Min = 8,
        /// <summary>
        //// only supported with axis = C, H or W.
        /// </summary>
        [pbr::OriginalName("ARGMAX")] Argmax = 9,
      }

      public enum ReduceAxis {
        [pbr::OriginalName("CHW")] Chw = 0,
        [pbr::OriginalName("HW")] Hw = 1,
        [pbr::OriginalName("C")] C = 2,
        [pbr::OriginalName("H")] H = 3,
        [pbr::OriginalName("W")] W = 4,
      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// A layer that crops the spatial dimensions of an input.
  /// If two inputs are provided, the shape of the second input is used as the reference shape.
  ///
  /// .. code::
  ///
  ///      y = CropLayer(x1) or y = CropLayer(x1,x2)
  ///
  /// Requires 1 or 2 inputs and produces 1 output.
  ///
  /// Input
  ///     - 1 input case: A blob with shape ``[C, H_in, W_in]``.
  ///     - 2 input case: 1st blob with shape ``[C, H_in, W_in]``, 2nd blob with shape ``[C, H_out, W_out]``.
  ///
  /// Output
  ///     A blob with shape ``[C, H_out, W_out]``.
  ///
  /// If one input is used, output is computed as follows:
  ///
  /// .. code::
  ///
  ///      y = x1[:, topCropAmount:H_in - bottomCropAmount, leftCropAmount:W_in - rightCropAmount]
  ///
  ///      topCropAmount == Height startEdgeSize == borderAmounts[0].startEdgeSize
  ///      bottomCropAmount == Height endEdgeSize == borderAmounts[0].endEdgeSize
  ///      leftCropAmount == Width startEdgeSize == borderAmounts[1].startEdgeSize
  ///      rightCropAmount == Width endEdgeSize == borderAmounts[1].endEdgeSize
  ///
  ///      H_out = H_in - topCropAmount - bottomCropAmount
  ///      W_out = W_in - leftCropAmount - rightCropAmount
  ///
  /// If two inputs are used, output is computed as follows:
  ///
  /// .. code::
  ///
  ///      y = x1[:, offset[0]:offset[0] + H_out, offset[1]:offset[1] + W_out]
  /// </summary>
  public sealed partial class CropLayerParams : pb::IMessage<CropLayerParams> {
    private static readonly pb::MessageParser<CropLayerParams> _parser = new pb::MessageParser<CropLayerParams>(() => new CropLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CropLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CropLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CropLayerParams(CropLayerParams other) : this() {
      cropAmounts_ = other.cropAmounts_ != null ? other.cropAmounts_.Clone() : null;
      offset_ = other.offset_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CropLayerParams Clone() {
      return new CropLayerParams(this);
    }

    /// <summary>Field number for the "cropAmounts" field.</summary>
    public const int CropAmountsFieldNumber = 1;
    private global::CoreML.Specification.BorderAmounts cropAmounts_;
    /// <summary>
    ///*
    /// The amounts to be cropped from the input.
    /// Used only if a single input is provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.BorderAmounts CropAmounts {
      get { return cropAmounts_; }
      set {
        cropAmounts_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 5;
    private static readonly pb::FieldCodec<ulong> _repeated_offset_codec
        = pb::FieldCodec.ForUInt64(42);
    private readonly pbc::RepeatedField<ulong> offset_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///*
    /// The offset amounts.
    /// Used only if two inputs are provided.
    /// Must be of length 2, in order ``[H, W]``.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Offset {
      get { return offset_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CropLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CropLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CropAmounts, other.CropAmounts)) return false;
      if(!offset_.Equals(other.offset_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cropAmounts_ != null) hash ^= CropAmounts.GetHashCode();
      hash ^= offset_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cropAmounts_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CropAmounts);
      }
      offset_.WriteTo(output, _repeated_offset_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cropAmounts_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CropAmounts);
      }
      size += offset_.CalculateSize(_repeated_offset_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CropLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.cropAmounts_ != null) {
        if (cropAmounts_ == null) {
          cropAmounts_ = new global::CoreML.Specification.BorderAmounts();
        }
        CropAmounts.MergeFrom(other.CropAmounts);
      }
      offset_.Add(other.offset_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cropAmounts_ == null) {
              cropAmounts_ = new global::CoreML.Specification.BorderAmounts();
            }
            input.ReadMessage(cropAmounts_);
            break;
          }
          case 42:
          case 40: {
            offset_.AddEntriesFrom(input, _repeated_offset_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A layer that computes the elementwise average of the inputs.
  ///
  /// .. code::
  ///
  ///      y = AverageLayer(x1,x2,...)
  ///
  /// Requires multiple inputs and produces 1 output.
  ///
  /// Input
  ///     Multiple blobs with broadcastable shapes ``[1]``, ``[C]``, ``[1, H, W]``, or ``[C, H, W]``.
  /// Output
  ///     A blob with the same shape as each input.
  /// </summary>
  public sealed partial class AverageLayerParams : pb::IMessage<AverageLayerParams> {
    private static readonly pb::MessageParser<AverageLayerParams> _parser = new pb::MessageParser<AverageLayerParams>(() => new AverageLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AverageLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AverageLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AverageLayerParams(AverageLayerParams other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AverageLayerParams Clone() {
      return new AverageLayerParams(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AverageLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AverageLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AverageLayerParams other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A layer that computes the elementwise maximum over the inputs.
  ///
  /// .. code::
  ///
  ///      y = MaxLayer(x1,x2,...)
  ///
  /// Requires multiple inputs and produces 1 output.
  ///
  /// Input
  ///     Multiple blobs, each with shape ``[C]`` or ``[C, H, W]``.
  /// Output
  ///     A blob with the same shape as each input.
  /// </summary>
  public sealed partial class MaxLayerParams : pb::IMessage<MaxLayerParams> {
    private static readonly pb::MessageParser<MaxLayerParams> _parser = new pb::MessageParser<MaxLayerParams>(() => new MaxLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MaxLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaxLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaxLayerParams(MaxLayerParams other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaxLayerParams Clone() {
      return new MaxLayerParams(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MaxLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MaxLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MaxLayerParams other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A layer that computes the elementwise minimum over the inputs.
  ///
  /// .. code::
  ///
  ///      y = MinLayer(x1,x2,...)
  ///
  /// Requires multiple inputs and produces 1 output.
  ///
  /// Input
  ///     Multiple blobs, each with shape ``[C]`` or ``[C, H, W]``.
  /// Output
  ///     A blob with the same shape as each input.
  /// </summary>
  public sealed partial class MinLayerParams : pb::IMessage<MinLayerParams> {
    private static readonly pb::MessageParser<MinLayerParams> _parser = new pb::MessageParser<MinLayerParams>(() => new MinLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MinLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinLayerParams(MinLayerParams other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinLayerParams Clone() {
      return new MinLayerParams(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MinLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MinLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MinLayerParams other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A layer that computes the dot product of two vectors.
  ///
  /// .. code::
  ///
  ///      y = DotProductLayer(x1,x2)
  ///
  /// Requires 2 inputs and produces 1 output.
  ///
  /// Input
  ///     Two blobs with shape ``[C]``.
  /// Output
  ///     A scalar.
  /// </summary>
  public sealed partial class DotProductLayerParams : pb::IMessage<DotProductLayerParams> {
    private static readonly pb::MessageParser<DotProductLayerParams> _parser = new pb::MessageParser<DotProductLayerParams>(() => new DotProductLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DotProductLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DotProductLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DotProductLayerParams(DotProductLayerParams other) : this() {
      cosineSimilarity_ = other.cosineSimilarity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DotProductLayerParams Clone() {
      return new DotProductLayerParams(this);
    }

    /// <summary>Field number for the "cosineSimilarity" field.</summary>
    public const int CosineSimilarityFieldNumber = 1;
    private bool cosineSimilarity_;
    /// <summary>
    ///*
    /// If true, inputs are normalized first,
    /// thereby computing the cosine similarity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CosineSimilarity {
      get { return cosineSimilarity_; }
      set {
        cosineSimilarity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DotProductLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DotProductLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CosineSimilarity != other.CosineSimilarity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CosineSimilarity != false) hash ^= CosineSimilarity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CosineSimilarity != false) {
        output.WriteRawTag(8);
        output.WriteBool(CosineSimilarity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CosineSimilarity != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DotProductLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.CosineSimilarity != false) {
        CosineSimilarity = other.CosineSimilarity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CosineSimilarity = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A layer that performs mean variance normalization.
  ///
  /// .. code::
  ///
  ///      y = MeanVarianceNormalizeLayer(x)
  ///
  /// Requires 1 input and produces 1 output.
  ///
  /// Input
  ///     A blob with shape ``[C]`` or ``[C, H, W]``.
  /// Output
  ///     A blob with the same shape as the input.
  ///
  /// If ``acrossChannels == true``
  /// normalization is performed on flattened input.
  ///
  /// If ``acrossChannels == false``
  /// normalization is performed within a channel,
  /// across spatial dimensions.
  /// </summary>
  public sealed partial class MeanVarianceNormalizeLayerParams : pb::IMessage<MeanVarianceNormalizeLayerParams> {
    private static readonly pb::MessageParser<MeanVarianceNormalizeLayerParams> _parser = new pb::MessageParser<MeanVarianceNormalizeLayerParams>(() => new MeanVarianceNormalizeLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MeanVarianceNormalizeLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeanVarianceNormalizeLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeanVarianceNormalizeLayerParams(MeanVarianceNormalizeLayerParams other) : this() {
      acrossChannels_ = other.acrossChannels_;
      normalizeVariance_ = other.normalizeVariance_;
      epsilon_ = other.epsilon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeanVarianceNormalizeLayerParams Clone() {
      return new MeanVarianceNormalizeLayerParams(this);
    }

    /// <summary>Field number for the "acrossChannels" field.</summary>
    public const int AcrossChannelsFieldNumber = 1;
    private bool acrossChannels_;
    /// <summary>
    ///*
    /// If true, mean and variance are computed across channels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AcrossChannels {
      get { return acrossChannels_; }
      set {
        acrossChannels_ = value;
      }
    }

    /// <summary>Field number for the "normalizeVariance" field.</summary>
    public const int NormalizeVarianceFieldNumber = 2;
    private bool normalizeVariance_;
    /// <summary>
    ///*
    /// If false, only mean is subtracted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NormalizeVariance {
      get { return normalizeVariance_; }
      set {
        normalizeVariance_ = value;
      }
    }

    /// <summary>Field number for the "epsilon" field.</summary>
    public const int EpsilonFieldNumber = 3;
    private float epsilon_;
    /// <summary>
    ///*
    /// A small constant to avoid division by 0 while normalizing variance.
    /// Defaults to ``1e-6`` if not set or set to ``0``.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Epsilon {
      get { return epsilon_; }
      set {
        epsilon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MeanVarianceNormalizeLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MeanVarianceNormalizeLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AcrossChannels != other.AcrossChannels) return false;
      if (NormalizeVariance != other.NormalizeVariance) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Epsilon, other.Epsilon)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AcrossChannels != false) hash ^= AcrossChannels.GetHashCode();
      if (NormalizeVariance != false) hash ^= NormalizeVariance.GetHashCode();
      if (Epsilon != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Epsilon);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AcrossChannels != false) {
        output.WriteRawTag(8);
        output.WriteBool(AcrossChannels);
      }
      if (NormalizeVariance != false) {
        output.WriteRawTag(16);
        output.WriteBool(NormalizeVariance);
      }
      if (Epsilon != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Epsilon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AcrossChannels != false) {
        size += 1 + 1;
      }
      if (NormalizeVariance != false) {
        size += 1 + 1;
      }
      if (Epsilon != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MeanVarianceNormalizeLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.AcrossChannels != false) {
        AcrossChannels = other.AcrossChannels;
      }
      if (other.NormalizeVariance != false) {
        NormalizeVariance = other.NormalizeVariance;
      }
      if (other.Epsilon != 0F) {
        Epsilon = other.Epsilon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AcrossChannels = input.ReadBool();
            break;
          }
          case 16: {
            NormalizeVariance = input.ReadBool();
            break;
          }
          case 29: {
            Epsilon = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A layer that repeats a sequence.
  ///
  /// .. code::
  ///
  ///      y = SequenceRepeatLayer(x)
  ///
  /// Requires 1 input and produces 1 output.
  ///
  /// Input
  ///     A sequence of blobs, i.e. shape is either ``[Seq, C]`` or ``[Seq, C, H, W]``.
  /// Output
  ///     A sequence of length ``nRepetitions * Seq``
  ///     with shape corresponding to the input,
  ///     i.e. shape is either ``[nRepetitions * Seq, C]`` or ``[nRepetitions * Seq, C, H, W]``.
  /// </summary>
  public sealed partial class SequenceRepeatLayerParams : pb::IMessage<SequenceRepeatLayerParams> {
    private static readonly pb::MessageParser<SequenceRepeatLayerParams> _parser = new pb::MessageParser<SequenceRepeatLayerParams>(() => new SequenceRepeatLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SequenceRepeatLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SequenceRepeatLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SequenceRepeatLayerParams(SequenceRepeatLayerParams other) : this() {
      nRepetitions_ = other.nRepetitions_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SequenceRepeatLayerParams Clone() {
      return new SequenceRepeatLayerParams(this);
    }

    /// <summary>Field number for the "nRepetitions" field.</summary>
    public const int NRepetitionsFieldNumber = 1;
    private ulong nRepetitions_;
    /// <summary>
    ///*
    /// Number of repetitions.
    /// Defaults to ``1`` if not set or set to ``0``.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NRepetitions {
      get { return nRepetitions_; }
      set {
        nRepetitions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SequenceRepeatLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SequenceRepeatLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NRepetitions != other.NRepetitions) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NRepetitions != 0UL) hash ^= NRepetitions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NRepetitions != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(NRepetitions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NRepetitions != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NRepetitions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SequenceRepeatLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.NRepetitions != 0UL) {
        NRepetitions = other.NRepetitions;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NRepetitions = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A simple recurrent layer.
  ///
  /// .. code::
  ///
  ///      y_t = SimpleRecurrentLayer(x_t, y_{t-1})
  ///
  /// Input
  ///    A sequence of vectors of size ``inputVectorSize``
  ///    with shape ``[Seq, inputVectorSize]``.
  /// Output
  ///    A vector of size ``outputVectorSize``. It is either the final output or a sequence of outputs at all time steps.
  ///
  /// - Output Shape: ``[1,outputVectorSize]`` , if ``sequenceOutput == false``
  /// - Output Shape: ``[Seq,outputVectorSize]`` , if ``sequenceOutput == true``
  ///
  /// This layer is described by the following equation:
  ///
  /// .. math::
  ///     \boldsymbol{y_t} = f(\mathrm{clip}(W \boldsymbol{x_t} + \
  ///                                        R \boldsymbol{y_{t-1}} + b))
  ///
  /// - ``W`` is a 2-dimensional weight matrix
  ///   (``[outputVectorSize, inputVectorSize]``, row-major)
  /// - ``R`` is a 2-dimensional recursion matrix
  ///   (``[outputVectorSize, outputVectorSize]``, row-major)
  /// - ``b`` is a 1-dimensional bias vector (``[outputVectorSize]``)
  /// - ``f()`` is an activation
  /// - ``clip()`` is a function that constrains values between ``[-50.0, 50.0]``
  /// </summary>
  public sealed partial class SimpleRecurrentLayerParams : pb::IMessage<SimpleRecurrentLayerParams> {
    private static readonly pb::MessageParser<SimpleRecurrentLayerParams> _parser = new pb::MessageParser<SimpleRecurrentLayerParams>(() => new SimpleRecurrentLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleRecurrentLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleRecurrentLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleRecurrentLayerParams(SimpleRecurrentLayerParams other) : this() {
      inputVectorSize_ = other.inputVectorSize_;
      outputVectorSize_ = other.outputVectorSize_;
      activation_ = other.activation_ != null ? other.activation_.Clone() : null;
      sequenceOutput_ = other.sequenceOutput_;
      hasBiasVector_ = other.hasBiasVector_;
      weightMatrix_ = other.weightMatrix_ != null ? other.weightMatrix_.Clone() : null;
      recursionMatrix_ = other.recursionMatrix_ != null ? other.recursionMatrix_.Clone() : null;
      biasVector_ = other.biasVector_ != null ? other.biasVector_.Clone() : null;
      reverseInput_ = other.reverseInput_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleRecurrentLayerParams Clone() {
      return new SimpleRecurrentLayerParams(this);
    }

    /// <summary>Field number for the "inputVectorSize" field.</summary>
    public const int InputVectorSizeFieldNumber = 1;
    private ulong inputVectorSize_;
    /// <summary>
    //// The size of the input vectors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InputVectorSize {
      get { return inputVectorSize_; }
      set {
        inputVectorSize_ = value;
      }
    }

    /// <summary>Field number for the "outputVectorSize" field.</summary>
    public const int OutputVectorSizeFieldNumber = 2;
    private ulong outputVectorSize_;
    /// <summary>
    //// The size of the output vectors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OutputVectorSize {
      get { return outputVectorSize_; }
      set {
        outputVectorSize_ = value;
      }
    }

    /// <summary>Field number for the "activation" field.</summary>
    public const int ActivationFieldNumber = 10;
    private global::CoreML.Specification.ActivationParams activation_;
    /// <summary>
    ///*
    /// Activations supported are Linear, Sigmoid, Tanh, ReLU, Scaled Tanh (alpha = 1.71, beta = 2/3), Hard sigmoid (alpha = 0.2, beta = 0.5)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.ActivationParams Activation {
      get { return activation_; }
      set {
        activation_ = value;
      }
    }

    /// <summary>Field number for the "sequenceOutput" field.</summary>
    public const int SequenceOutputFieldNumber = 15;
    private bool sequenceOutput_;
    /// <summary>
    ///*
    ///If false output is just the result after final state update.
    ///If true, output is a sequence, containing outputs at all time steps.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SequenceOutput {
      get { return sequenceOutput_; }
      set {
        sequenceOutput_ = value;
      }
    }

    /// <summary>Field number for the "hasBiasVector" field.</summary>
    public const int HasBiasVectorFieldNumber = 20;
    private bool hasBiasVector_;
    /// <summary>
    //// If false, no bias is added.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBiasVector {
      get { return hasBiasVector_; }
      set {
        hasBiasVector_ = value;
      }
    }

    /// <summary>Field number for the "weightMatrix" field.</summary>
    public const int WeightMatrixFieldNumber = 30;
    private global::CoreML.Specification.WeightParams weightMatrix_;
    /// <summary>
    //// Weight matrix W.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams WeightMatrix {
      get { return weightMatrix_; }
      set {
        weightMatrix_ = value;
      }
    }

    /// <summary>Field number for the "recursionMatrix" field.</summary>
    public const int RecursionMatrixFieldNumber = 31;
    private global::CoreML.Specification.WeightParams recursionMatrix_;
    /// <summary>
    //// Recursion Weight matrix R.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams RecursionMatrix {
      get { return recursionMatrix_; }
      set {
        recursionMatrix_ = value;
      }
    }

    /// <summary>Field number for the "biasVector" field.</summary>
    public const int BiasVectorFieldNumber = 32;
    private global::CoreML.Specification.WeightParams biasVector_;
    /// <summary>
    //// Bias vector b.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams BiasVector {
      get { return biasVector_; }
      set {
        biasVector_ = value;
      }
    }

    /// <summary>Field number for the "reverseInput" field.</summary>
    public const int ReverseInputFieldNumber = 100;
    private bool reverseInput_;
    /// <summary>
    /// If true, then the node processes the input sequence from right to left
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReverseInput {
      get { return reverseInput_; }
      set {
        reverseInput_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleRecurrentLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleRecurrentLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InputVectorSize != other.InputVectorSize) return false;
      if (OutputVectorSize != other.OutputVectorSize) return false;
      if (!object.Equals(Activation, other.Activation)) return false;
      if (SequenceOutput != other.SequenceOutput) return false;
      if (HasBiasVector != other.HasBiasVector) return false;
      if (!object.Equals(WeightMatrix, other.WeightMatrix)) return false;
      if (!object.Equals(RecursionMatrix, other.RecursionMatrix)) return false;
      if (!object.Equals(BiasVector, other.BiasVector)) return false;
      if (ReverseInput != other.ReverseInput) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InputVectorSize != 0UL) hash ^= InputVectorSize.GetHashCode();
      if (OutputVectorSize != 0UL) hash ^= OutputVectorSize.GetHashCode();
      if (activation_ != null) hash ^= Activation.GetHashCode();
      if (SequenceOutput != false) hash ^= SequenceOutput.GetHashCode();
      if (HasBiasVector != false) hash ^= HasBiasVector.GetHashCode();
      if (weightMatrix_ != null) hash ^= WeightMatrix.GetHashCode();
      if (recursionMatrix_ != null) hash ^= RecursionMatrix.GetHashCode();
      if (biasVector_ != null) hash ^= BiasVector.GetHashCode();
      if (ReverseInput != false) hash ^= ReverseInput.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InputVectorSize != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(InputVectorSize);
      }
      if (OutputVectorSize != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(OutputVectorSize);
      }
      if (activation_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Activation);
      }
      if (SequenceOutput != false) {
        output.WriteRawTag(120);
        output.WriteBool(SequenceOutput);
      }
      if (HasBiasVector != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(HasBiasVector);
      }
      if (weightMatrix_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(WeightMatrix);
      }
      if (recursionMatrix_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(RecursionMatrix);
      }
      if (biasVector_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(BiasVector);
      }
      if (ReverseInput != false) {
        output.WriteRawTag(160, 6);
        output.WriteBool(ReverseInput);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InputVectorSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InputVectorSize);
      }
      if (OutputVectorSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OutputVectorSize);
      }
      if (activation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Activation);
      }
      if (SequenceOutput != false) {
        size += 1 + 1;
      }
      if (HasBiasVector != false) {
        size += 2 + 1;
      }
      if (weightMatrix_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WeightMatrix);
      }
      if (recursionMatrix_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RecursionMatrix);
      }
      if (biasVector_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BiasVector);
      }
      if (ReverseInput != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleRecurrentLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.InputVectorSize != 0UL) {
        InputVectorSize = other.InputVectorSize;
      }
      if (other.OutputVectorSize != 0UL) {
        OutputVectorSize = other.OutputVectorSize;
      }
      if (other.activation_ != null) {
        if (activation_ == null) {
          activation_ = new global::CoreML.Specification.ActivationParams();
        }
        Activation.MergeFrom(other.Activation);
      }
      if (other.SequenceOutput != false) {
        SequenceOutput = other.SequenceOutput;
      }
      if (other.HasBiasVector != false) {
        HasBiasVector = other.HasBiasVector;
      }
      if (other.weightMatrix_ != null) {
        if (weightMatrix_ == null) {
          weightMatrix_ = new global::CoreML.Specification.WeightParams();
        }
        WeightMatrix.MergeFrom(other.WeightMatrix);
      }
      if (other.recursionMatrix_ != null) {
        if (recursionMatrix_ == null) {
          recursionMatrix_ = new global::CoreML.Specification.WeightParams();
        }
        RecursionMatrix.MergeFrom(other.RecursionMatrix);
      }
      if (other.biasVector_ != null) {
        if (biasVector_ == null) {
          biasVector_ = new global::CoreML.Specification.WeightParams();
        }
        BiasVector.MergeFrom(other.BiasVector);
      }
      if (other.ReverseInput != false) {
        ReverseInput = other.ReverseInput;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InputVectorSize = input.ReadUInt64();
            break;
          }
          case 16: {
            OutputVectorSize = input.ReadUInt64();
            break;
          }
          case 82: {
            if (activation_ == null) {
              activation_ = new global::CoreML.Specification.ActivationParams();
            }
            input.ReadMessage(activation_);
            break;
          }
          case 120: {
            SequenceOutput = input.ReadBool();
            break;
          }
          case 160: {
            HasBiasVector = input.ReadBool();
            break;
          }
          case 242: {
            if (weightMatrix_ == null) {
              weightMatrix_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(weightMatrix_);
            break;
          }
          case 250: {
            if (recursionMatrix_ == null) {
              recursionMatrix_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(recursionMatrix_);
            break;
          }
          case 258: {
            if (biasVector_ == null) {
              biasVector_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(biasVector_);
            break;
          }
          case 800: {
            ReverseInput = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Gated-Recurrent Unit (GRU) Layer
  ///
  /// .. code::
  ///
  ///      y_t = GRULayer(x_t, y_{t-1})
  ///
  /// Input
  ///    A sequence of vectors of size ``inputVectorSize``
  ///    with shape ``[Seq, inputVectorSize]``.
  /// Output
  ///    A vector of size ``outputVectorSize``. It is either the final output or a sequence of outputs at all time steps.
  ///
  /// - Output Shape: ``[1,outputVectorSize]`` , if ``sequenceOutput == false``
  /// - Output Shape: ``[Seq,outputVectorSize]`` , if ``sequenceOutput == true``
  ///
  /// This layer is described by the following equations:
  ///
  /// Update Gate
  ///     .. math::
  ///         \boldsymbol{z_t} = \
  ///             f(\mathrm{clip}(W_z \boldsymbol{x_t} + \
  ///                             R_z \boldsymbol{y_{t-1}} + b_z)
  ///
  /// Reset Gate
  ///     .. math::
  ///         \boldsymbol{r_t} = \
  ///             f(\mathrm{clip}(W_r \boldsymbol{x_t} + \
  ///                             R_r \boldsymbol{y_{t-1}} + b_r))
  ///
  /// Cell Memory State
  ///     .. math::
  ///         \boldsymbol{c_t} = \
  ///             \boldsymbol{y_{t-1}} \odot \boldsymbol{r_t}
  ///
  /// Output Gate
  ///     .. math::
  ///         \boldsymbol{o_t} = \
  ///             g(\mathrm{clip}(W_o \boldsymbol{x_t} + \
  ///                             R_o \boldsymbol{c_t} + b_o))
  ///
  /// Output
  ///     .. math::
  ///         \boldsymbol{y_t} = \
  ///             (1 - \boldsymbol{z_t}) \odot \boldsymbol{o_t} + \
  ///              \boldsymbol{z_t} \odot \boldsymbol{y_{t-1}}
  ///
  /// - ``W_z``, ``W_r``, ``W_o`` are 2-dimensional input weight matrices
  ///   (``[outputVectorSize, inputVectorSize]``, row-major)
  /// - ``R_z``, ``R_r``, ``R_o`` are 2-dimensional recursion matrices
  ///   (``[outputVectorSize, outputVectorSize]``, row-major)
  /// - ``b_z``, ``b_r``, ``b_o`` are 1-dimensional bias vectors
  ///   (``[outputVectorSize]``)
  /// - ``f()``, ``g()`` are activations
  /// - ``clip()`` is a function that constrains values between ``[-50.0, 50.0]``
  /// - ``⊙`` denotes the elementwise product of matrices
  /// </summary>
  public sealed partial class GRULayerParams : pb::IMessage<GRULayerParams> {
    private static readonly pb::MessageParser<GRULayerParams> _parser = new pb::MessageParser<GRULayerParams>(() => new GRULayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GRULayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GRULayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GRULayerParams(GRULayerParams other) : this() {
      inputVectorSize_ = other.inputVectorSize_;
      outputVectorSize_ = other.outputVectorSize_;
      activations_ = other.activations_.Clone();
      sequenceOutput_ = other.sequenceOutput_;
      hasBiasVectors_ = other.hasBiasVectors_;
      updateGateWeightMatrix_ = other.updateGateWeightMatrix_ != null ? other.updateGateWeightMatrix_.Clone() : null;
      resetGateWeightMatrix_ = other.resetGateWeightMatrix_ != null ? other.resetGateWeightMatrix_.Clone() : null;
      outputGateWeightMatrix_ = other.outputGateWeightMatrix_ != null ? other.outputGateWeightMatrix_.Clone() : null;
      updateGateRecursionMatrix_ = other.updateGateRecursionMatrix_ != null ? other.updateGateRecursionMatrix_.Clone() : null;
      resetGateRecursionMatrix_ = other.resetGateRecursionMatrix_ != null ? other.resetGateRecursionMatrix_.Clone() : null;
      outputGateRecursionMatrix_ = other.outputGateRecursionMatrix_ != null ? other.outputGateRecursionMatrix_.Clone() : null;
      updateGateBiasVector_ = other.updateGateBiasVector_ != null ? other.updateGateBiasVector_.Clone() : null;
      resetGateBiasVector_ = other.resetGateBiasVector_ != null ? other.resetGateBiasVector_.Clone() : null;
      outputGateBiasVector_ = other.outputGateBiasVector_ != null ? other.outputGateBiasVector_.Clone() : null;
      reverseInput_ = other.reverseInput_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GRULayerParams Clone() {
      return new GRULayerParams(this);
    }

    /// <summary>Field number for the "inputVectorSize" field.</summary>
    public const int InputVectorSizeFieldNumber = 1;
    private ulong inputVectorSize_;
    /// <summary>
    //// Size of the input vectors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InputVectorSize {
      get { return inputVectorSize_; }
      set {
        inputVectorSize_ = value;
      }
    }

    /// <summary>Field number for the "outputVectorSize" field.</summary>
    public const int OutputVectorSizeFieldNumber = 2;
    private ulong outputVectorSize_;
    /// <summary>
    //// Size of the output vectors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OutputVectorSize {
      get { return outputVectorSize_; }
      set {
        outputVectorSize_ = value;
      }
    }

    /// <summary>Field number for the "activations" field.</summary>
    public const int ActivationsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::CoreML.Specification.ActivationParams> _repeated_activations_codec
        = pb::FieldCodec.ForMessage(82, global::CoreML.Specification.ActivationParams.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.ActivationParams> activations_ = new pbc::RepeatedField<global::CoreML.Specification.ActivationParams>();
    /// <summary>
    ///*
    /// 2 element array representing activations [f(), g()] in that order.
    /// Typical values used = [sigmoid, tanh].
    /// Activations supported are Linear, Sigmoid, Tanh, ReLU, Scaled Tanh (alpha = 1.71, beta = 2/3), Hard sigmoid (alpha = 0.2, beta = 0.5)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.ActivationParams> Activations {
      get { return activations_; }
    }

    /// <summary>Field number for the "sequenceOutput" field.</summary>
    public const int SequenceOutputFieldNumber = 15;
    private bool sequenceOutput_;
    /// <summary>
    ///*
    /// If false output is just the result after final state update.
    /// If true, output is a sequence, containing outputs at all time steps.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SequenceOutput {
      get { return sequenceOutput_; }
      set {
        sequenceOutput_ = value;
      }
    }

    /// <summary>Field number for the "hasBiasVectors" field.</summary>
    public const int HasBiasVectorsFieldNumber = 20;
    private bool hasBiasVectors_;
    /// <summary>
    ///*
    /// If false, no biases (``b_z``, ``b_r``, ``b_o``) are added.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBiasVectors {
      get { return hasBiasVectors_; }
      set {
        hasBiasVectors_ = value;
      }
    }

    /// <summary>Field number for the "updateGateWeightMatrix" field.</summary>
    public const int UpdateGateWeightMatrixFieldNumber = 30;
    private global::CoreML.Specification.WeightParams updateGateWeightMatrix_;
    /// <summary>
    //// Weight Matrix W_z.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams UpdateGateWeightMatrix {
      get { return updateGateWeightMatrix_; }
      set {
        updateGateWeightMatrix_ = value;
      }
    }

    /// <summary>Field number for the "resetGateWeightMatrix" field.</summary>
    public const int ResetGateWeightMatrixFieldNumber = 31;
    private global::CoreML.Specification.WeightParams resetGateWeightMatrix_;
    /// <summary>
    //// Weight Matrix W_r.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams ResetGateWeightMatrix {
      get { return resetGateWeightMatrix_; }
      set {
        resetGateWeightMatrix_ = value;
      }
    }

    /// <summary>Field number for the "outputGateWeightMatrix" field.</summary>
    public const int OutputGateWeightMatrixFieldNumber = 32;
    private global::CoreML.Specification.WeightParams outputGateWeightMatrix_;
    /// <summary>
    //// Weight Matrix W_o.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams OutputGateWeightMatrix {
      get { return outputGateWeightMatrix_; }
      set {
        outputGateWeightMatrix_ = value;
      }
    }

    /// <summary>Field number for the "updateGateRecursionMatrix" field.</summary>
    public const int UpdateGateRecursionMatrixFieldNumber = 50;
    private global::CoreML.Specification.WeightParams updateGateRecursionMatrix_;
    /// <summary>
    //// Recursion Weight Matrix R_z.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams UpdateGateRecursionMatrix {
      get { return updateGateRecursionMatrix_; }
      set {
        updateGateRecursionMatrix_ = value;
      }
    }

    /// <summary>Field number for the "resetGateRecursionMatrix" field.</summary>
    public const int ResetGateRecursionMatrixFieldNumber = 51;
    private global::CoreML.Specification.WeightParams resetGateRecursionMatrix_;
    /// <summary>
    //// Recursion Weight Matrix R_r.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams ResetGateRecursionMatrix {
      get { return resetGateRecursionMatrix_; }
      set {
        resetGateRecursionMatrix_ = value;
      }
    }

    /// <summary>Field number for the "outputGateRecursionMatrix" field.</summary>
    public const int OutputGateRecursionMatrixFieldNumber = 52;
    private global::CoreML.Specification.WeightParams outputGateRecursionMatrix_;
    /// <summary>
    //// Recursion Weight Matrix R_o.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams OutputGateRecursionMatrix {
      get { return outputGateRecursionMatrix_; }
      set {
        outputGateRecursionMatrix_ = value;
      }
    }

    /// <summary>Field number for the "updateGateBiasVector" field.</summary>
    public const int UpdateGateBiasVectorFieldNumber = 70;
    private global::CoreML.Specification.WeightParams updateGateBiasVector_;
    /// <summary>
    //// Bias vector b_z.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams UpdateGateBiasVector {
      get { return updateGateBiasVector_; }
      set {
        updateGateBiasVector_ = value;
      }
    }

    /// <summary>Field number for the "resetGateBiasVector" field.</summary>
    public const int ResetGateBiasVectorFieldNumber = 71;
    private global::CoreML.Specification.WeightParams resetGateBiasVector_;
    /// <summary>
    //// Bias vector b_r.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams ResetGateBiasVector {
      get { return resetGateBiasVector_; }
      set {
        resetGateBiasVector_ = value;
      }
    }

    /// <summary>Field number for the "outputGateBiasVector" field.</summary>
    public const int OutputGateBiasVectorFieldNumber = 72;
    private global::CoreML.Specification.WeightParams outputGateBiasVector_;
    /// <summary>
    //// Bias vector b_o.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams OutputGateBiasVector {
      get { return outputGateBiasVector_; }
      set {
        outputGateBiasVector_ = value;
      }
    }

    /// <summary>Field number for the "reverseInput" field.</summary>
    public const int ReverseInputFieldNumber = 100;
    private bool reverseInput_;
    /// <summary>
    //// If true, then the node processes the input sequence from right to left
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReverseInput {
      get { return reverseInput_; }
      set {
        reverseInput_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GRULayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GRULayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InputVectorSize != other.InputVectorSize) return false;
      if (OutputVectorSize != other.OutputVectorSize) return false;
      if(!activations_.Equals(other.activations_)) return false;
      if (SequenceOutput != other.SequenceOutput) return false;
      if (HasBiasVectors != other.HasBiasVectors) return false;
      if (!object.Equals(UpdateGateWeightMatrix, other.UpdateGateWeightMatrix)) return false;
      if (!object.Equals(ResetGateWeightMatrix, other.ResetGateWeightMatrix)) return false;
      if (!object.Equals(OutputGateWeightMatrix, other.OutputGateWeightMatrix)) return false;
      if (!object.Equals(UpdateGateRecursionMatrix, other.UpdateGateRecursionMatrix)) return false;
      if (!object.Equals(ResetGateRecursionMatrix, other.ResetGateRecursionMatrix)) return false;
      if (!object.Equals(OutputGateRecursionMatrix, other.OutputGateRecursionMatrix)) return false;
      if (!object.Equals(UpdateGateBiasVector, other.UpdateGateBiasVector)) return false;
      if (!object.Equals(ResetGateBiasVector, other.ResetGateBiasVector)) return false;
      if (!object.Equals(OutputGateBiasVector, other.OutputGateBiasVector)) return false;
      if (ReverseInput != other.ReverseInput) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InputVectorSize != 0UL) hash ^= InputVectorSize.GetHashCode();
      if (OutputVectorSize != 0UL) hash ^= OutputVectorSize.GetHashCode();
      hash ^= activations_.GetHashCode();
      if (SequenceOutput != false) hash ^= SequenceOutput.GetHashCode();
      if (HasBiasVectors != false) hash ^= HasBiasVectors.GetHashCode();
      if (updateGateWeightMatrix_ != null) hash ^= UpdateGateWeightMatrix.GetHashCode();
      if (resetGateWeightMatrix_ != null) hash ^= ResetGateWeightMatrix.GetHashCode();
      if (outputGateWeightMatrix_ != null) hash ^= OutputGateWeightMatrix.GetHashCode();
      if (updateGateRecursionMatrix_ != null) hash ^= UpdateGateRecursionMatrix.GetHashCode();
      if (resetGateRecursionMatrix_ != null) hash ^= ResetGateRecursionMatrix.GetHashCode();
      if (outputGateRecursionMatrix_ != null) hash ^= OutputGateRecursionMatrix.GetHashCode();
      if (updateGateBiasVector_ != null) hash ^= UpdateGateBiasVector.GetHashCode();
      if (resetGateBiasVector_ != null) hash ^= ResetGateBiasVector.GetHashCode();
      if (outputGateBiasVector_ != null) hash ^= OutputGateBiasVector.GetHashCode();
      if (ReverseInput != false) hash ^= ReverseInput.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InputVectorSize != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(InputVectorSize);
      }
      if (OutputVectorSize != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(OutputVectorSize);
      }
      activations_.WriteTo(output, _repeated_activations_codec);
      if (SequenceOutput != false) {
        output.WriteRawTag(120);
        output.WriteBool(SequenceOutput);
      }
      if (HasBiasVectors != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(HasBiasVectors);
      }
      if (updateGateWeightMatrix_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(UpdateGateWeightMatrix);
      }
      if (resetGateWeightMatrix_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(ResetGateWeightMatrix);
      }
      if (outputGateWeightMatrix_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(OutputGateWeightMatrix);
      }
      if (updateGateRecursionMatrix_ != null) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(UpdateGateRecursionMatrix);
      }
      if (resetGateRecursionMatrix_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(ResetGateRecursionMatrix);
      }
      if (outputGateRecursionMatrix_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(OutputGateRecursionMatrix);
      }
      if (updateGateBiasVector_ != null) {
        output.WriteRawTag(178, 4);
        output.WriteMessage(UpdateGateBiasVector);
      }
      if (resetGateBiasVector_ != null) {
        output.WriteRawTag(186, 4);
        output.WriteMessage(ResetGateBiasVector);
      }
      if (outputGateBiasVector_ != null) {
        output.WriteRawTag(194, 4);
        output.WriteMessage(OutputGateBiasVector);
      }
      if (ReverseInput != false) {
        output.WriteRawTag(160, 6);
        output.WriteBool(ReverseInput);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InputVectorSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InputVectorSize);
      }
      if (OutputVectorSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OutputVectorSize);
      }
      size += activations_.CalculateSize(_repeated_activations_codec);
      if (SequenceOutput != false) {
        size += 1 + 1;
      }
      if (HasBiasVectors != false) {
        size += 2 + 1;
      }
      if (updateGateWeightMatrix_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpdateGateWeightMatrix);
      }
      if (resetGateWeightMatrix_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ResetGateWeightMatrix);
      }
      if (outputGateWeightMatrix_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OutputGateWeightMatrix);
      }
      if (updateGateRecursionMatrix_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpdateGateRecursionMatrix);
      }
      if (resetGateRecursionMatrix_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ResetGateRecursionMatrix);
      }
      if (outputGateRecursionMatrix_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OutputGateRecursionMatrix);
      }
      if (updateGateBiasVector_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpdateGateBiasVector);
      }
      if (resetGateBiasVector_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ResetGateBiasVector);
      }
      if (outputGateBiasVector_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OutputGateBiasVector);
      }
      if (ReverseInput != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GRULayerParams other) {
      if (other == null) {
        return;
      }
      if (other.InputVectorSize != 0UL) {
        InputVectorSize = other.InputVectorSize;
      }
      if (other.OutputVectorSize != 0UL) {
        OutputVectorSize = other.OutputVectorSize;
      }
      activations_.Add(other.activations_);
      if (other.SequenceOutput != false) {
        SequenceOutput = other.SequenceOutput;
      }
      if (other.HasBiasVectors != false) {
        HasBiasVectors = other.HasBiasVectors;
      }
      if (other.updateGateWeightMatrix_ != null) {
        if (updateGateWeightMatrix_ == null) {
          updateGateWeightMatrix_ = new global::CoreML.Specification.WeightParams();
        }
        UpdateGateWeightMatrix.MergeFrom(other.UpdateGateWeightMatrix);
      }
      if (other.resetGateWeightMatrix_ != null) {
        if (resetGateWeightMatrix_ == null) {
          resetGateWeightMatrix_ = new global::CoreML.Specification.WeightParams();
        }
        ResetGateWeightMatrix.MergeFrom(other.ResetGateWeightMatrix);
      }
      if (other.outputGateWeightMatrix_ != null) {
        if (outputGateWeightMatrix_ == null) {
          outputGateWeightMatrix_ = new global::CoreML.Specification.WeightParams();
        }
        OutputGateWeightMatrix.MergeFrom(other.OutputGateWeightMatrix);
      }
      if (other.updateGateRecursionMatrix_ != null) {
        if (updateGateRecursionMatrix_ == null) {
          updateGateRecursionMatrix_ = new global::CoreML.Specification.WeightParams();
        }
        UpdateGateRecursionMatrix.MergeFrom(other.UpdateGateRecursionMatrix);
      }
      if (other.resetGateRecursionMatrix_ != null) {
        if (resetGateRecursionMatrix_ == null) {
          resetGateRecursionMatrix_ = new global::CoreML.Specification.WeightParams();
        }
        ResetGateRecursionMatrix.MergeFrom(other.ResetGateRecursionMatrix);
      }
      if (other.outputGateRecursionMatrix_ != null) {
        if (outputGateRecursionMatrix_ == null) {
          outputGateRecursionMatrix_ = new global::CoreML.Specification.WeightParams();
        }
        OutputGateRecursionMatrix.MergeFrom(other.OutputGateRecursionMatrix);
      }
      if (other.updateGateBiasVector_ != null) {
        if (updateGateBiasVector_ == null) {
          updateGateBiasVector_ = new global::CoreML.Specification.WeightParams();
        }
        UpdateGateBiasVector.MergeFrom(other.UpdateGateBiasVector);
      }
      if (other.resetGateBiasVector_ != null) {
        if (resetGateBiasVector_ == null) {
          resetGateBiasVector_ = new global::CoreML.Specification.WeightParams();
        }
        ResetGateBiasVector.MergeFrom(other.ResetGateBiasVector);
      }
      if (other.outputGateBiasVector_ != null) {
        if (outputGateBiasVector_ == null) {
          outputGateBiasVector_ = new global::CoreML.Specification.WeightParams();
        }
        OutputGateBiasVector.MergeFrom(other.OutputGateBiasVector);
      }
      if (other.ReverseInput != false) {
        ReverseInput = other.ReverseInput;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InputVectorSize = input.ReadUInt64();
            break;
          }
          case 16: {
            OutputVectorSize = input.ReadUInt64();
            break;
          }
          case 82: {
            activations_.AddEntriesFrom(input, _repeated_activations_codec);
            break;
          }
          case 120: {
            SequenceOutput = input.ReadBool();
            break;
          }
          case 160: {
            HasBiasVectors = input.ReadBool();
            break;
          }
          case 242: {
            if (updateGateWeightMatrix_ == null) {
              updateGateWeightMatrix_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(updateGateWeightMatrix_);
            break;
          }
          case 250: {
            if (resetGateWeightMatrix_ == null) {
              resetGateWeightMatrix_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(resetGateWeightMatrix_);
            break;
          }
          case 258: {
            if (outputGateWeightMatrix_ == null) {
              outputGateWeightMatrix_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(outputGateWeightMatrix_);
            break;
          }
          case 402: {
            if (updateGateRecursionMatrix_ == null) {
              updateGateRecursionMatrix_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(updateGateRecursionMatrix_);
            break;
          }
          case 410: {
            if (resetGateRecursionMatrix_ == null) {
              resetGateRecursionMatrix_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(resetGateRecursionMatrix_);
            break;
          }
          case 418: {
            if (outputGateRecursionMatrix_ == null) {
              outputGateRecursionMatrix_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(outputGateRecursionMatrix_);
            break;
          }
          case 562: {
            if (updateGateBiasVector_ == null) {
              updateGateBiasVector_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(updateGateBiasVector_);
            break;
          }
          case 570: {
            if (resetGateBiasVector_ == null) {
              resetGateBiasVector_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(resetGateBiasVector_);
            break;
          }
          case 578: {
            if (outputGateBiasVector_ == null) {
              outputGateBiasVector_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(outputGateBiasVector_);
            break;
          }
          case 800: {
            ReverseInput = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Long short-term memory (LSTM) parameters.
  ///
  /// This is described by the following equations:
  ///
  /// Input Gate
  ///     .. math::
  ///         \boldsymbol{i_t} = \
  ///             f(\mathrm{clip}(W_i \boldsymbol{x_t} + \
  ///                             R_i \boldsymbol{y_{t-1}} + \
  ///                             p_i \odot c_{t-1} + b_i))
  ///
  /// Forget Gate
  ///     .. math::
  ///         \boldsymbol{f_t} = \
  ///             f(\mathrm{clip}(W_f \boldsymbol{x_t} + \
  ///                             R_f \boldsymbol{y_{t-1}} + \
  ///                             p_f \odot c_{t-1} + b_f))
  ///
  /// Block Input
  ///     .. math::
  ///         \boldsymbol{z_t} = \
  ///             g(\mathrm{clip}(W_z \boldsymbol{x_t} + \
  ///                             R_z \boldsymbol{y_{t-1}} + b_z))
  ///
  /// Cell Memory State
  ///     .. math::
  ///         \boldsymbol{c_t} = \
  ///             \boldsymbol{c_{t-1}} \odot \boldsymbol{f_t} + \
  ///             \boldsymbol{i_t} \odot \boldsymbol{z_t}
  ///
  /// Output Gate
  ///     .. math::
  ///         \boldsymbol{o_t} = \
  ///             f(\mathrm{clip}(W_o \boldsymbol{x_t} + \
  ///                             R_o \boldsymbol{y_{t-1}} + \
  ///                             p_o \odot c_t + b_o))
  ///
  /// Output
  ///     .. math::
  ///         \boldsymbol{y_t} = \
  ///             h(\boldsymbol{c_t}) \odot \boldsymbol{o_t}
  ///
  /// - ``W_i``, ``W_f``, ``W_z``, ``W_o`` are 2-dimensional input weight matrices
  ///   (``[outputVectorSize, inputVectorSize]``, row-major)
  /// - ``R_i``, ``R_f``, ``R_z``, ``R_o`` are 2-dimensional recursion matrices
  ///   (``[outputVectorSize, outputVectorSize]``, row-major)
  /// - ``b_i``, ``b_f``, ``b_z``, ``b_o`` are 1-dimensional bias vectors
  ///   (``[outputVectorSize]``)
  /// - ``p_``, ``p_f``, ``p_o`` are 1-dimensional peephole vectors
  ///   (``[outputVectorSize]``)
  /// - ``f()``, ``g()``, ``h()`` are activations
  /// - ``clip()`` is a function that constrains values between ``[-50.0, 50.0]``
  /// - ``⊙`` denotes the elementwise product of matrices
  /// </summary>
  public sealed partial class LSTMParams : pb::IMessage<LSTMParams> {
    private static readonly pb::MessageParser<LSTMParams> _parser = new pb::MessageParser<LSTMParams>(() => new LSTMParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LSTMParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LSTMParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LSTMParams(LSTMParams other) : this() {
      sequenceOutput_ = other.sequenceOutput_;
      hasBiasVectors_ = other.hasBiasVectors_;
      forgetBias_ = other.forgetBias_;
      hasPeepholeVectors_ = other.hasPeepholeVectors_;
      coupledInputAndForgetGate_ = other.coupledInputAndForgetGate_;
      cellClipThreshold_ = other.cellClipThreshold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LSTMParams Clone() {
      return new LSTMParams(this);
    }

    /// <summary>Field number for the "sequenceOutput" field.</summary>
    public const int SequenceOutputFieldNumber = 10;
    private bool sequenceOutput_;
    /// <summary>
    ///*
    /// If true, output is a sequence, containing outputs at all time steps.
    /// If false, output is just the result after final state update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SequenceOutput {
      get { return sequenceOutput_; }
      set {
        sequenceOutput_ = value;
      }
    }

    /// <summary>Field number for the "hasBiasVectors" field.</summary>
    public const int HasBiasVectorsFieldNumber = 20;
    private bool hasBiasVectors_;
    /// <summary>
    ///*
    /// If false, no biases (``b_i``, ``b_f``, ``b_z``, ``b_o``) are added.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBiasVectors {
      get { return hasBiasVectors_; }
      set {
        hasBiasVectors_ = value;
      }
    }

    /// <summary>Field number for the "forgetBias" field.</summary>
    public const int ForgetBiasFieldNumber = 30;
    private bool forgetBias_;
    /// <summary>
    ///*
    /// If true, a vector of ``1`` values is added to ``b_f``.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForgetBias {
      get { return forgetBias_; }
      set {
        forgetBias_ = value;
      }
    }

    /// <summary>Field number for the "hasPeepholeVectors" field.</summary>
    public const int HasPeepholeVectorsFieldNumber = 40;
    private bool hasPeepholeVectors_;
    /// <summary>
    ///*
    /// If true, peephole vectors are included.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPeepholeVectors {
      get { return hasPeepholeVectors_; }
      set {
        hasPeepholeVectors_ = value;
      }
    }

    /// <summary>Field number for the "coupledInputAndForgetGate" field.</summary>
    public const int CoupledInputAndForgetGateFieldNumber = 50;
    private bool coupledInputAndForgetGate_;
    /// <summary>
    ///*
    /// If the coupled Input and Forget flag is on, the behaviour of
    /// ``c_t`` is changed to the following (i.e. forget gate is not used):
    ///
    /// .. math::
    ///     \boldsymbol{c_t} = \
    ///         \boldsymbol{c_{t-1}} \odot (1 - \boldsymbol{i_t}) + \
    ///         \boldsymbol{i_t} \odot \boldsymbol{z_t}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CoupledInputAndForgetGate {
      get { return coupledInputAndForgetGate_; }
      set {
        coupledInputAndForgetGate_ = value;
      }
    }

    /// <summary>Field number for the "cellClipThreshold" field.</summary>
    public const int CellClipThresholdFieldNumber = 60;
    private float cellClipThreshold_;
    /// <summary>
    ///*
    /// Places a limit on the maximum and minimum values of ``c_t``.
    /// c_t = min(c_t, cellClipThreshold)
    /// c_t = max(c_t, -cellClipThreshold)
    /// If 0, it is set to its default value = 50.0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CellClipThreshold {
      get { return cellClipThreshold_; }
      set {
        cellClipThreshold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LSTMParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LSTMParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SequenceOutput != other.SequenceOutput) return false;
      if (HasBiasVectors != other.HasBiasVectors) return false;
      if (ForgetBias != other.ForgetBias) return false;
      if (HasPeepholeVectors != other.HasPeepholeVectors) return false;
      if (CoupledInputAndForgetGate != other.CoupledInputAndForgetGate) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CellClipThreshold, other.CellClipThreshold)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SequenceOutput != false) hash ^= SequenceOutput.GetHashCode();
      if (HasBiasVectors != false) hash ^= HasBiasVectors.GetHashCode();
      if (ForgetBias != false) hash ^= ForgetBias.GetHashCode();
      if (HasPeepholeVectors != false) hash ^= HasPeepholeVectors.GetHashCode();
      if (CoupledInputAndForgetGate != false) hash ^= CoupledInputAndForgetGate.GetHashCode();
      if (CellClipThreshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CellClipThreshold);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SequenceOutput != false) {
        output.WriteRawTag(80);
        output.WriteBool(SequenceOutput);
      }
      if (HasBiasVectors != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(HasBiasVectors);
      }
      if (ForgetBias != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(ForgetBias);
      }
      if (HasPeepholeVectors != false) {
        output.WriteRawTag(192, 2);
        output.WriteBool(HasPeepholeVectors);
      }
      if (CoupledInputAndForgetGate != false) {
        output.WriteRawTag(144, 3);
        output.WriteBool(CoupledInputAndForgetGate);
      }
      if (CellClipThreshold != 0F) {
        output.WriteRawTag(229, 3);
        output.WriteFloat(CellClipThreshold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SequenceOutput != false) {
        size += 1 + 1;
      }
      if (HasBiasVectors != false) {
        size += 2 + 1;
      }
      if (ForgetBias != false) {
        size += 2 + 1;
      }
      if (HasPeepholeVectors != false) {
        size += 2 + 1;
      }
      if (CoupledInputAndForgetGate != false) {
        size += 2 + 1;
      }
      if (CellClipThreshold != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LSTMParams other) {
      if (other == null) {
        return;
      }
      if (other.SequenceOutput != false) {
        SequenceOutput = other.SequenceOutput;
      }
      if (other.HasBiasVectors != false) {
        HasBiasVectors = other.HasBiasVectors;
      }
      if (other.ForgetBias != false) {
        ForgetBias = other.ForgetBias;
      }
      if (other.HasPeepholeVectors != false) {
        HasPeepholeVectors = other.HasPeepholeVectors;
      }
      if (other.CoupledInputAndForgetGate != false) {
        CoupledInputAndForgetGate = other.CoupledInputAndForgetGate;
      }
      if (other.CellClipThreshold != 0F) {
        CellClipThreshold = other.CellClipThreshold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 80: {
            SequenceOutput = input.ReadBool();
            break;
          }
          case 160: {
            HasBiasVectors = input.ReadBool();
            break;
          }
          case 240: {
            ForgetBias = input.ReadBool();
            break;
          }
          case 320: {
            HasPeepholeVectors = input.ReadBool();
            break;
          }
          case 400: {
            CoupledInputAndForgetGate = input.ReadBool();
            break;
          }
          case 485: {
            CellClipThreshold = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Weights for long short-term memory (LSTM) layers
  /// </summary>
  public sealed partial class LSTMWeightParams : pb::IMessage<LSTMWeightParams> {
    private static readonly pb::MessageParser<LSTMWeightParams> _parser = new pb::MessageParser<LSTMWeightParams>(() => new LSTMWeightParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LSTMWeightParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LSTMWeightParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LSTMWeightParams(LSTMWeightParams other) : this() {
      inputGateWeightMatrix_ = other.inputGateWeightMatrix_ != null ? other.inputGateWeightMatrix_.Clone() : null;
      forgetGateWeightMatrix_ = other.forgetGateWeightMatrix_ != null ? other.forgetGateWeightMatrix_.Clone() : null;
      blockInputWeightMatrix_ = other.blockInputWeightMatrix_ != null ? other.blockInputWeightMatrix_.Clone() : null;
      outputGateWeightMatrix_ = other.outputGateWeightMatrix_ != null ? other.outputGateWeightMatrix_.Clone() : null;
      inputGateRecursionMatrix_ = other.inputGateRecursionMatrix_ != null ? other.inputGateRecursionMatrix_.Clone() : null;
      forgetGateRecursionMatrix_ = other.forgetGateRecursionMatrix_ != null ? other.forgetGateRecursionMatrix_.Clone() : null;
      blockInputRecursionMatrix_ = other.blockInputRecursionMatrix_ != null ? other.blockInputRecursionMatrix_.Clone() : null;
      outputGateRecursionMatrix_ = other.outputGateRecursionMatrix_ != null ? other.outputGateRecursionMatrix_.Clone() : null;
      inputGateBiasVector_ = other.inputGateBiasVector_ != null ? other.inputGateBiasVector_.Clone() : null;
      forgetGateBiasVector_ = other.forgetGateBiasVector_ != null ? other.forgetGateBiasVector_.Clone() : null;
      blockInputBiasVector_ = other.blockInputBiasVector_ != null ? other.blockInputBiasVector_.Clone() : null;
      outputGateBiasVector_ = other.outputGateBiasVector_ != null ? other.outputGateBiasVector_.Clone() : null;
      inputGatePeepholeVector_ = other.inputGatePeepholeVector_ != null ? other.inputGatePeepholeVector_.Clone() : null;
      forgetGatePeepholeVector_ = other.forgetGatePeepholeVector_ != null ? other.forgetGatePeepholeVector_.Clone() : null;
      outputGatePeepholeVector_ = other.outputGatePeepholeVector_ != null ? other.outputGatePeepholeVector_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LSTMWeightParams Clone() {
      return new LSTMWeightParams(this);
    }

    /// <summary>Field number for the "inputGateWeightMatrix" field.</summary>
    public const int InputGateWeightMatrixFieldNumber = 1;
    private global::CoreML.Specification.WeightParams inputGateWeightMatrix_;
    /// <summary>
    //// Weight Matrix W_i.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams InputGateWeightMatrix {
      get { return inputGateWeightMatrix_; }
      set {
        inputGateWeightMatrix_ = value;
      }
    }

    /// <summary>Field number for the "forgetGateWeightMatrix" field.</summary>
    public const int ForgetGateWeightMatrixFieldNumber = 2;
    private global::CoreML.Specification.WeightParams forgetGateWeightMatrix_;
    /// <summary>
    //// Weight Matrix W_f.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams ForgetGateWeightMatrix {
      get { return forgetGateWeightMatrix_; }
      set {
        forgetGateWeightMatrix_ = value;
      }
    }

    /// <summary>Field number for the "blockInputWeightMatrix" field.</summary>
    public const int BlockInputWeightMatrixFieldNumber = 3;
    private global::CoreML.Specification.WeightParams blockInputWeightMatrix_;
    /// <summary>
    //// Weight Matrix W_z.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams BlockInputWeightMatrix {
      get { return blockInputWeightMatrix_; }
      set {
        blockInputWeightMatrix_ = value;
      }
    }

    /// <summary>Field number for the "outputGateWeightMatrix" field.</summary>
    public const int OutputGateWeightMatrixFieldNumber = 4;
    private global::CoreML.Specification.WeightParams outputGateWeightMatrix_;
    /// <summary>
    //// Weight Matrix W_o.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams OutputGateWeightMatrix {
      get { return outputGateWeightMatrix_; }
      set {
        outputGateWeightMatrix_ = value;
      }
    }

    /// <summary>Field number for the "inputGateRecursionMatrix" field.</summary>
    public const int InputGateRecursionMatrixFieldNumber = 20;
    private global::CoreML.Specification.WeightParams inputGateRecursionMatrix_;
    /// <summary>
    //// Recursion Weight Matrix R_i.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams InputGateRecursionMatrix {
      get { return inputGateRecursionMatrix_; }
      set {
        inputGateRecursionMatrix_ = value;
      }
    }

    /// <summary>Field number for the "forgetGateRecursionMatrix" field.</summary>
    public const int ForgetGateRecursionMatrixFieldNumber = 21;
    private global::CoreML.Specification.WeightParams forgetGateRecursionMatrix_;
    /// <summary>
    //// Recursion Weight Matrix R_f.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams ForgetGateRecursionMatrix {
      get { return forgetGateRecursionMatrix_; }
      set {
        forgetGateRecursionMatrix_ = value;
      }
    }

    /// <summary>Field number for the "blockInputRecursionMatrix" field.</summary>
    public const int BlockInputRecursionMatrixFieldNumber = 22;
    private global::CoreML.Specification.WeightParams blockInputRecursionMatrix_;
    /// <summary>
    //// Recursion Weight Matrix R_z.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams BlockInputRecursionMatrix {
      get { return blockInputRecursionMatrix_; }
      set {
        blockInputRecursionMatrix_ = value;
      }
    }

    /// <summary>Field number for the "outputGateRecursionMatrix" field.</summary>
    public const int OutputGateRecursionMatrixFieldNumber = 23;
    private global::CoreML.Specification.WeightParams outputGateRecursionMatrix_;
    /// <summary>
    //// Recursion Weight Matrix R_o.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams OutputGateRecursionMatrix {
      get { return outputGateRecursionMatrix_; }
      set {
        outputGateRecursionMatrix_ = value;
      }
    }

    /// <summary>Field number for the "inputGateBiasVector" field.</summary>
    public const int InputGateBiasVectorFieldNumber = 40;
    private global::CoreML.Specification.WeightParams inputGateBiasVector_;
    /// <summary>
    ///biases:
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams InputGateBiasVector {
      get { return inputGateBiasVector_; }
      set {
        inputGateBiasVector_ = value;
      }
    }

    /// <summary>Field number for the "forgetGateBiasVector" field.</summary>
    public const int ForgetGateBiasVectorFieldNumber = 41;
    private global::CoreML.Specification.WeightParams forgetGateBiasVector_;
    /// <summary>
    //// Bias vector b_f.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams ForgetGateBiasVector {
      get { return forgetGateBiasVector_; }
      set {
        forgetGateBiasVector_ = value;
      }
    }

    /// <summary>Field number for the "blockInputBiasVector" field.</summary>
    public const int BlockInputBiasVectorFieldNumber = 42;
    private global::CoreML.Specification.WeightParams blockInputBiasVector_;
    /// <summary>
    //// Bias vector b_z.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams BlockInputBiasVector {
      get { return blockInputBiasVector_; }
      set {
        blockInputBiasVector_ = value;
      }
    }

    /// <summary>Field number for the "outputGateBiasVector" field.</summary>
    public const int OutputGateBiasVectorFieldNumber = 43;
    private global::CoreML.Specification.WeightParams outputGateBiasVector_;
    /// <summary>
    //// Bias vector b_o.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams OutputGateBiasVector {
      get { return outputGateBiasVector_; }
      set {
        outputGateBiasVector_ = value;
      }
    }

    /// <summary>Field number for the "inputGatePeepholeVector" field.</summary>
    public const int InputGatePeepholeVectorFieldNumber = 60;
    private global::CoreML.Specification.WeightParams inputGatePeepholeVector_;
    /// <summary>
    ///peepholes:
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams InputGatePeepholeVector {
      get { return inputGatePeepholeVector_; }
      set {
        inputGatePeepholeVector_ = value;
      }
    }

    /// <summary>Field number for the "forgetGatePeepholeVector" field.</summary>
    public const int ForgetGatePeepholeVectorFieldNumber = 61;
    private global::CoreML.Specification.WeightParams forgetGatePeepholeVector_;
    /// <summary>
    //// Peephole vector p_f.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams ForgetGatePeepholeVector {
      get { return forgetGatePeepholeVector_; }
      set {
        forgetGatePeepholeVector_ = value;
      }
    }

    /// <summary>Field number for the "outputGatePeepholeVector" field.</summary>
    public const int OutputGatePeepholeVectorFieldNumber = 62;
    private global::CoreML.Specification.WeightParams outputGatePeepholeVector_;
    /// <summary>
    //// Peephole vector p_o.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.WeightParams OutputGatePeepholeVector {
      get { return outputGatePeepholeVector_; }
      set {
        outputGatePeepholeVector_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LSTMWeightParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LSTMWeightParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InputGateWeightMatrix, other.InputGateWeightMatrix)) return false;
      if (!object.Equals(ForgetGateWeightMatrix, other.ForgetGateWeightMatrix)) return false;
      if (!object.Equals(BlockInputWeightMatrix, other.BlockInputWeightMatrix)) return false;
      if (!object.Equals(OutputGateWeightMatrix, other.OutputGateWeightMatrix)) return false;
      if (!object.Equals(InputGateRecursionMatrix, other.InputGateRecursionMatrix)) return false;
      if (!object.Equals(ForgetGateRecursionMatrix, other.ForgetGateRecursionMatrix)) return false;
      if (!object.Equals(BlockInputRecursionMatrix, other.BlockInputRecursionMatrix)) return false;
      if (!object.Equals(OutputGateRecursionMatrix, other.OutputGateRecursionMatrix)) return false;
      if (!object.Equals(InputGateBiasVector, other.InputGateBiasVector)) return false;
      if (!object.Equals(ForgetGateBiasVector, other.ForgetGateBiasVector)) return false;
      if (!object.Equals(BlockInputBiasVector, other.BlockInputBiasVector)) return false;
      if (!object.Equals(OutputGateBiasVector, other.OutputGateBiasVector)) return false;
      if (!object.Equals(InputGatePeepholeVector, other.InputGatePeepholeVector)) return false;
      if (!object.Equals(ForgetGatePeepholeVector, other.ForgetGatePeepholeVector)) return false;
      if (!object.Equals(OutputGatePeepholeVector, other.OutputGatePeepholeVector)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (inputGateWeightMatrix_ != null) hash ^= InputGateWeightMatrix.GetHashCode();
      if (forgetGateWeightMatrix_ != null) hash ^= ForgetGateWeightMatrix.GetHashCode();
      if (blockInputWeightMatrix_ != null) hash ^= BlockInputWeightMatrix.GetHashCode();
      if (outputGateWeightMatrix_ != null) hash ^= OutputGateWeightMatrix.GetHashCode();
      if (inputGateRecursionMatrix_ != null) hash ^= InputGateRecursionMatrix.GetHashCode();
      if (forgetGateRecursionMatrix_ != null) hash ^= ForgetGateRecursionMatrix.GetHashCode();
      if (blockInputRecursionMatrix_ != null) hash ^= BlockInputRecursionMatrix.GetHashCode();
      if (outputGateRecursionMatrix_ != null) hash ^= OutputGateRecursionMatrix.GetHashCode();
      if (inputGateBiasVector_ != null) hash ^= InputGateBiasVector.GetHashCode();
      if (forgetGateBiasVector_ != null) hash ^= ForgetGateBiasVector.GetHashCode();
      if (blockInputBiasVector_ != null) hash ^= BlockInputBiasVector.GetHashCode();
      if (outputGateBiasVector_ != null) hash ^= OutputGateBiasVector.GetHashCode();
      if (inputGatePeepholeVector_ != null) hash ^= InputGatePeepholeVector.GetHashCode();
      if (forgetGatePeepholeVector_ != null) hash ^= ForgetGatePeepholeVector.GetHashCode();
      if (outputGatePeepholeVector_ != null) hash ^= OutputGatePeepholeVector.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (inputGateWeightMatrix_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InputGateWeightMatrix);
      }
      if (forgetGateWeightMatrix_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ForgetGateWeightMatrix);
      }
      if (blockInputWeightMatrix_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BlockInputWeightMatrix);
      }
      if (outputGateWeightMatrix_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(OutputGateWeightMatrix);
      }
      if (inputGateRecursionMatrix_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(InputGateRecursionMatrix);
      }
      if (forgetGateRecursionMatrix_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ForgetGateRecursionMatrix);
      }
      if (blockInputRecursionMatrix_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(BlockInputRecursionMatrix);
      }
      if (outputGateRecursionMatrix_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(OutputGateRecursionMatrix);
      }
      if (inputGateBiasVector_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(InputGateBiasVector);
      }
      if (forgetGateBiasVector_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(ForgetGateBiasVector);
      }
      if (blockInputBiasVector_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(BlockInputBiasVector);
      }
      if (outputGateBiasVector_ != null) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(OutputGateBiasVector);
      }
      if (inputGatePeepholeVector_ != null) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(InputGatePeepholeVector);
      }
      if (forgetGatePeepholeVector_ != null) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(ForgetGatePeepholeVector);
      }
      if (outputGatePeepholeVector_ != null) {
        output.WriteRawTag(242, 3);
        output.WriteMessage(OutputGatePeepholeVector);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (inputGateWeightMatrix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InputGateWeightMatrix);
      }
      if (forgetGateWeightMatrix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ForgetGateWeightMatrix);
      }
      if (blockInputWeightMatrix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockInputWeightMatrix);
      }
      if (outputGateWeightMatrix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputGateWeightMatrix);
      }
      if (inputGateRecursionMatrix_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InputGateRecursionMatrix);
      }
      if (forgetGateRecursionMatrix_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ForgetGateRecursionMatrix);
      }
      if (blockInputRecursionMatrix_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BlockInputRecursionMatrix);
      }
      if (outputGateRecursionMatrix_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OutputGateRecursionMatrix);
      }
      if (inputGateBiasVector_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InputGateBiasVector);
      }
      if (forgetGateBiasVector_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ForgetGateBiasVector);
      }
      if (blockInputBiasVector_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BlockInputBiasVector);
      }
      if (outputGateBiasVector_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OutputGateBiasVector);
      }
      if (inputGatePeepholeVector_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InputGatePeepholeVector);
      }
      if (forgetGatePeepholeVector_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ForgetGatePeepholeVector);
      }
      if (outputGatePeepholeVector_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OutputGatePeepholeVector);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LSTMWeightParams other) {
      if (other == null) {
        return;
      }
      if (other.inputGateWeightMatrix_ != null) {
        if (inputGateWeightMatrix_ == null) {
          inputGateWeightMatrix_ = new global::CoreML.Specification.WeightParams();
        }
        InputGateWeightMatrix.MergeFrom(other.InputGateWeightMatrix);
      }
      if (other.forgetGateWeightMatrix_ != null) {
        if (forgetGateWeightMatrix_ == null) {
          forgetGateWeightMatrix_ = new global::CoreML.Specification.WeightParams();
        }
        ForgetGateWeightMatrix.MergeFrom(other.ForgetGateWeightMatrix);
      }
      if (other.blockInputWeightMatrix_ != null) {
        if (blockInputWeightMatrix_ == null) {
          blockInputWeightMatrix_ = new global::CoreML.Specification.WeightParams();
        }
        BlockInputWeightMatrix.MergeFrom(other.BlockInputWeightMatrix);
      }
      if (other.outputGateWeightMatrix_ != null) {
        if (outputGateWeightMatrix_ == null) {
          outputGateWeightMatrix_ = new global::CoreML.Specification.WeightParams();
        }
        OutputGateWeightMatrix.MergeFrom(other.OutputGateWeightMatrix);
      }
      if (other.inputGateRecursionMatrix_ != null) {
        if (inputGateRecursionMatrix_ == null) {
          inputGateRecursionMatrix_ = new global::CoreML.Specification.WeightParams();
        }
        InputGateRecursionMatrix.MergeFrom(other.InputGateRecursionMatrix);
      }
      if (other.forgetGateRecursionMatrix_ != null) {
        if (forgetGateRecursionMatrix_ == null) {
          forgetGateRecursionMatrix_ = new global::CoreML.Specification.WeightParams();
        }
        ForgetGateRecursionMatrix.MergeFrom(other.ForgetGateRecursionMatrix);
      }
      if (other.blockInputRecursionMatrix_ != null) {
        if (blockInputRecursionMatrix_ == null) {
          blockInputRecursionMatrix_ = new global::CoreML.Specification.WeightParams();
        }
        BlockInputRecursionMatrix.MergeFrom(other.BlockInputRecursionMatrix);
      }
      if (other.outputGateRecursionMatrix_ != null) {
        if (outputGateRecursionMatrix_ == null) {
          outputGateRecursionMatrix_ = new global::CoreML.Specification.WeightParams();
        }
        OutputGateRecursionMatrix.MergeFrom(other.OutputGateRecursionMatrix);
      }
      if (other.inputGateBiasVector_ != null) {
        if (inputGateBiasVector_ == null) {
          inputGateBiasVector_ = new global::CoreML.Specification.WeightParams();
        }
        InputGateBiasVector.MergeFrom(other.InputGateBiasVector);
      }
      if (other.forgetGateBiasVector_ != null) {
        if (forgetGateBiasVector_ == null) {
          forgetGateBiasVector_ = new global::CoreML.Specification.WeightParams();
        }
        ForgetGateBiasVector.MergeFrom(other.ForgetGateBiasVector);
      }
      if (other.blockInputBiasVector_ != null) {
        if (blockInputBiasVector_ == null) {
          blockInputBiasVector_ = new global::CoreML.Specification.WeightParams();
        }
        BlockInputBiasVector.MergeFrom(other.BlockInputBiasVector);
      }
      if (other.outputGateBiasVector_ != null) {
        if (outputGateBiasVector_ == null) {
          outputGateBiasVector_ = new global::CoreML.Specification.WeightParams();
        }
        OutputGateBiasVector.MergeFrom(other.OutputGateBiasVector);
      }
      if (other.inputGatePeepholeVector_ != null) {
        if (inputGatePeepholeVector_ == null) {
          inputGatePeepholeVector_ = new global::CoreML.Specification.WeightParams();
        }
        InputGatePeepholeVector.MergeFrom(other.InputGatePeepholeVector);
      }
      if (other.forgetGatePeepholeVector_ != null) {
        if (forgetGatePeepholeVector_ == null) {
          forgetGatePeepholeVector_ = new global::CoreML.Specification.WeightParams();
        }
        ForgetGatePeepholeVector.MergeFrom(other.ForgetGatePeepholeVector);
      }
      if (other.outputGatePeepholeVector_ != null) {
        if (outputGatePeepholeVector_ == null) {
          outputGatePeepholeVector_ = new global::CoreML.Specification.WeightParams();
        }
        OutputGatePeepholeVector.MergeFrom(other.OutputGatePeepholeVector);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (inputGateWeightMatrix_ == null) {
              inputGateWeightMatrix_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(inputGateWeightMatrix_);
            break;
          }
          case 18: {
            if (forgetGateWeightMatrix_ == null) {
              forgetGateWeightMatrix_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(forgetGateWeightMatrix_);
            break;
          }
          case 26: {
            if (blockInputWeightMatrix_ == null) {
              blockInputWeightMatrix_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(blockInputWeightMatrix_);
            break;
          }
          case 34: {
            if (outputGateWeightMatrix_ == null) {
              outputGateWeightMatrix_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(outputGateWeightMatrix_);
            break;
          }
          case 162: {
            if (inputGateRecursionMatrix_ == null) {
              inputGateRecursionMatrix_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(inputGateRecursionMatrix_);
            break;
          }
          case 170: {
            if (forgetGateRecursionMatrix_ == null) {
              forgetGateRecursionMatrix_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(forgetGateRecursionMatrix_);
            break;
          }
          case 178: {
            if (blockInputRecursionMatrix_ == null) {
              blockInputRecursionMatrix_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(blockInputRecursionMatrix_);
            break;
          }
          case 186: {
            if (outputGateRecursionMatrix_ == null) {
              outputGateRecursionMatrix_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(outputGateRecursionMatrix_);
            break;
          }
          case 322: {
            if (inputGateBiasVector_ == null) {
              inputGateBiasVector_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(inputGateBiasVector_);
            break;
          }
          case 330: {
            if (forgetGateBiasVector_ == null) {
              forgetGateBiasVector_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(forgetGateBiasVector_);
            break;
          }
          case 338: {
            if (blockInputBiasVector_ == null) {
              blockInputBiasVector_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(blockInputBiasVector_);
            break;
          }
          case 346: {
            if (outputGateBiasVector_ == null) {
              outputGateBiasVector_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(outputGateBiasVector_);
            break;
          }
          case 482: {
            if (inputGatePeepholeVector_ == null) {
              inputGatePeepholeVector_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(inputGatePeepholeVector_);
            break;
          }
          case 490: {
            if (forgetGatePeepholeVector_ == null) {
              forgetGatePeepholeVector_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(forgetGatePeepholeVector_);
            break;
          }
          case 498: {
            if (outputGatePeepholeVector_ == null) {
              outputGatePeepholeVector_ = new global::CoreML.Specification.WeightParams();
            }
            input.ReadMessage(outputGatePeepholeVector_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A unidirectional long short-term memory (LSTM) layer.
  ///
  /// .. code::
  ///
  ///      (y_t, c_t) = UniDirectionalLSTMLayer(x_t, y_{t-1}, c_{t-1})
  ///
  /// Input
  ///    A sequence of vectors of size ``inputVectorSize``
  ///    with shape ``[Seq, inputVectorSize]``.
  /// Output
  ///    A vector of size ``outputVectorSize``. It is either the final output or a sequence of outputs at all time steps.
  ///
  /// - Output Shape: ``[1,outputVectorSize]`` , if ``sequenceOutput == false``
  /// - Output Shape: ``[Seq,outputVectorSize]`` , if ``sequenceOutput == true``
  /// </summary>
  public sealed partial class UniDirectionalLSTMLayerParams : pb::IMessage<UniDirectionalLSTMLayerParams> {
    private static readonly pb::MessageParser<UniDirectionalLSTMLayerParams> _parser = new pb::MessageParser<UniDirectionalLSTMLayerParams>(() => new UniDirectionalLSTMLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UniDirectionalLSTMLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UniDirectionalLSTMLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UniDirectionalLSTMLayerParams(UniDirectionalLSTMLayerParams other) : this() {
      inputVectorSize_ = other.inputVectorSize_;
      outputVectorSize_ = other.outputVectorSize_;
      activations_ = other.activations_.Clone();
      params_ = other.params_ != null ? other.params_.Clone() : null;
      weightParams_ = other.weightParams_ != null ? other.weightParams_.Clone() : null;
      reverseInput_ = other.reverseInput_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UniDirectionalLSTMLayerParams Clone() {
      return new UniDirectionalLSTMLayerParams(this);
    }

    /// <summary>Field number for the "inputVectorSize" field.</summary>
    public const int InputVectorSizeFieldNumber = 1;
    private ulong inputVectorSize_;
    /// <summary>
    //// Size of the input vectors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InputVectorSize {
      get { return inputVectorSize_; }
      set {
        inputVectorSize_ = value;
      }
    }

    /// <summary>Field number for the "outputVectorSize" field.</summary>
    public const int OutputVectorSizeFieldNumber = 2;
    private ulong outputVectorSize_;
    /// <summary>
    //// Size of the output vectors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OutputVectorSize {
      get { return outputVectorSize_; }
      set {
        outputVectorSize_ = value;
      }
    }

    /// <summary>Field number for the "activations" field.</summary>
    public const int ActivationsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::CoreML.Specification.ActivationParams> _repeated_activations_codec
        = pb::FieldCodec.ForMessage(82, global::CoreML.Specification.ActivationParams.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.ActivationParams> activations_ = new pbc::RepeatedField<global::CoreML.Specification.ActivationParams>();
    /// <summary>
    ///*
    /// 3 element array representing activations [f(),g(),h()] in that order.
    /// Typical values used = [sigmoid, tanh, tanh].
    /// Activations supported are Linear, Sigmoid, Tanh, ReLU, Scaled Tanh (alpha = 1.71, beta = 2/3), Hard sigmoid (alpha = 0.2, beta = 0.5)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.ActivationParams> Activations {
      get { return activations_; }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 15;
    private global::CoreML.Specification.LSTMParams params_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.LSTMParams Params {
      get { return params_; }
      set {
        params_ = value;
      }
    }

    /// <summary>Field number for the "weightParams" field.</summary>
    public const int WeightParamsFieldNumber = 20;
    private global::CoreML.Specification.LSTMWeightParams weightParams_;
    /// <summary>
    //// Weights, biases and peepholes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.LSTMWeightParams WeightParams {
      get { return weightParams_; }
      set {
        weightParams_ = value;
      }
    }

    /// <summary>Field number for the "reverseInput" field.</summary>
    public const int ReverseInputFieldNumber = 100;
    private bool reverseInput_;
    /// <summary>
    //// If true, then the node processes the input sequence from right to left
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReverseInput {
      get { return reverseInput_; }
      set {
        reverseInput_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UniDirectionalLSTMLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UniDirectionalLSTMLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InputVectorSize != other.InputVectorSize) return false;
      if (OutputVectorSize != other.OutputVectorSize) return false;
      if(!activations_.Equals(other.activations_)) return false;
      if (!object.Equals(Params, other.Params)) return false;
      if (!object.Equals(WeightParams, other.WeightParams)) return false;
      if (ReverseInput != other.ReverseInput) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InputVectorSize != 0UL) hash ^= InputVectorSize.GetHashCode();
      if (OutputVectorSize != 0UL) hash ^= OutputVectorSize.GetHashCode();
      hash ^= activations_.GetHashCode();
      if (params_ != null) hash ^= Params.GetHashCode();
      if (weightParams_ != null) hash ^= WeightParams.GetHashCode();
      if (ReverseInput != false) hash ^= ReverseInput.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InputVectorSize != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(InputVectorSize);
      }
      if (OutputVectorSize != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(OutputVectorSize);
      }
      activations_.WriteTo(output, _repeated_activations_codec);
      if (params_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Params);
      }
      if (weightParams_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(WeightParams);
      }
      if (ReverseInput != false) {
        output.WriteRawTag(160, 6);
        output.WriteBool(ReverseInput);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InputVectorSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InputVectorSize);
      }
      if (OutputVectorSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OutputVectorSize);
      }
      size += activations_.CalculateSize(_repeated_activations_codec);
      if (params_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Params);
      }
      if (weightParams_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WeightParams);
      }
      if (ReverseInput != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UniDirectionalLSTMLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.InputVectorSize != 0UL) {
        InputVectorSize = other.InputVectorSize;
      }
      if (other.OutputVectorSize != 0UL) {
        OutputVectorSize = other.OutputVectorSize;
      }
      activations_.Add(other.activations_);
      if (other.params_ != null) {
        if (params_ == null) {
          params_ = new global::CoreML.Specification.LSTMParams();
        }
        Params.MergeFrom(other.Params);
      }
      if (other.weightParams_ != null) {
        if (weightParams_ == null) {
          weightParams_ = new global::CoreML.Specification.LSTMWeightParams();
        }
        WeightParams.MergeFrom(other.WeightParams);
      }
      if (other.ReverseInput != false) {
        ReverseInput = other.ReverseInput;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InputVectorSize = input.ReadUInt64();
            break;
          }
          case 16: {
            OutputVectorSize = input.ReadUInt64();
            break;
          }
          case 82: {
            activations_.AddEntriesFrom(input, _repeated_activations_codec);
            break;
          }
          case 122: {
            if (params_ == null) {
              params_ = new global::CoreML.Specification.LSTMParams();
            }
            input.ReadMessage(params_);
            break;
          }
          case 162: {
            if (weightParams_ == null) {
              weightParams_ = new global::CoreML.Specification.LSTMWeightParams();
            }
            input.ReadMessage(weightParams_);
            break;
          }
          case 800: {
            ReverseInput = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Bidirectional long short-term memory (LSTM) layer
  ///
  /// .. code::
  ///
  ///      (y_t, c_t, y_t_reverse, c_t_reverse) = BiDirectionalLSTMLayer(x_t, y_{t-1}, c_{t-1}, y_{t-1}_reverse, c_{t-1}_reverse)
  ///
  /// Input
  ///    A sequence of vectors of size ``inputVectorSize``
  ///    with shape ``[Seq, inputVectorSize]``.
  /// Output
  ///    A vector of size ``2 * outputVectorSize``. It is either the final output or a sequence of outputs at all time steps.
  ///
  /// - Output Shape: ``[1, 2 * outputVectorSize]`` , if ``sequenceOutput == false``
  /// - Output Shape: ``[Seq, 2 * outputVectorSize]`` , if ``sequenceOutput == true``
  ///
  /// The first LSTM operates on the input sequence in the forward direction.
  /// The second LSTM operates on the input sequence in the reverse direction.
  ///
  /// Example: given the input sequence ``[x_1, x_2, x_3]``,
  /// where ``x_i`` are vectors at time index ``i``:
  ///
  /// The forward LSTM output is ``[yf_1, yf_2, yf_3]``,
  ///
  /// where ``yf_i`` are vectors of size ``outputVectorSize``:
  ///
  /// - ``yf_1`` is the output at the end of sequence {``x_1``}
  /// - ``yf_2`` is the output at the end of sequence {``x_1``, ``x_2``}
  /// - ``yf_3`` is the output at the end of sequence {``x_1``, ``x_2``, ``x_3``}
  ///
  /// The backward LSTM output: ``[yb_1, yb_2, yb_3]``,
  ///
  /// where ``yb_i`` are vectors of size ``outputVectorSize``:
  ///
  /// - ``yb_1`` is the output at the end of sequence {``x_3``}
  /// - ``yb_2`` is the output at the end of sequence {``x_3``, ``x_2``}
  /// - ``yb_3`` is the output at the end of sequence {``x_3``, ``x_2``, ``x_1``}
  ///
  /// Output of the bi-dir layer:
  ///
  /// - if ``sequenceOutput = True`` : { ``[yf_1, yb_3]``,  ``[yf_2, yb_2]``,  ``[yf_3, yb_1]`` }
  /// - if ``sequenceOutput = False`` : { ``[yf_3, yb_3]`` }
  /// </summary>
  public sealed partial class BiDirectionalLSTMLayerParams : pb::IMessage<BiDirectionalLSTMLayerParams> {
    private static readonly pb::MessageParser<BiDirectionalLSTMLayerParams> _parser = new pb::MessageParser<BiDirectionalLSTMLayerParams>(() => new BiDirectionalLSTMLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BiDirectionalLSTMLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiDirectionalLSTMLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiDirectionalLSTMLayerParams(BiDirectionalLSTMLayerParams other) : this() {
      inputVectorSize_ = other.inputVectorSize_;
      outputVectorSize_ = other.outputVectorSize_;
      activationsForwardLSTM_ = other.activationsForwardLSTM_.Clone();
      activationsBackwardLSTM_ = other.activationsBackwardLSTM_.Clone();
      params_ = other.params_ != null ? other.params_.Clone() : null;
      weightParams_ = other.weightParams_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiDirectionalLSTMLayerParams Clone() {
      return new BiDirectionalLSTMLayerParams(this);
    }

    /// <summary>Field number for the "inputVectorSize" field.</summary>
    public const int InputVectorSizeFieldNumber = 1;
    private ulong inputVectorSize_;
    /// <summary>
    ///*
    /// Size of the input vectors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InputVectorSize {
      get { return inputVectorSize_; }
      set {
        inputVectorSize_ = value;
      }
    }

    /// <summary>Field number for the "outputVectorSize" field.</summary>
    public const int OutputVectorSizeFieldNumber = 2;
    private ulong outputVectorSize_;
    /// <summary>
    ///*
    /// Size of the outputs vectors.
    /// It is same for both forward and backward LSTMs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OutputVectorSize {
      get { return outputVectorSize_; }
      set {
        outputVectorSize_ = value;
      }
    }

    /// <summary>Field number for the "activationsForwardLSTM" field.</summary>
    public const int ActivationsForwardLSTMFieldNumber = 10;
    private static readonly pb::FieldCodec<global::CoreML.Specification.ActivationParams> _repeated_activationsForwardLSTM_codec
        = pb::FieldCodec.ForMessage(82, global::CoreML.Specification.ActivationParams.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.ActivationParams> activationsForwardLSTM_ = new pbc::RepeatedField<global::CoreML.Specification.ActivationParams>();
    /// <summary>
    ///*
    /// 3 element array representing activations [f(),g(),h()] in that order.
    /// Typical values used = [sigmoid, tanh, tanh].
    /// Activations supported are Linear, Sigmoid, Tanh, ReLU, Scaled Tanh (alpha = 1.71, beta = 2/3), Hard sigmoid (alpha = 0.2, beta = 0.5)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.ActivationParams> ActivationsForwardLSTM {
      get { return activationsForwardLSTM_; }
    }

    /// <summary>Field number for the "activationsBackwardLSTM" field.</summary>
    public const int ActivationsBackwardLSTMFieldNumber = 11;
    private static readonly pb::FieldCodec<global::CoreML.Specification.ActivationParams> _repeated_activationsBackwardLSTM_codec
        = pb::FieldCodec.ForMessage(90, global::CoreML.Specification.ActivationParams.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.ActivationParams> activationsBackwardLSTM_ = new pbc::RepeatedField<global::CoreML.Specification.ActivationParams>();
    /// <summary>
    ///*
    /// Currently, backward LSTM activations
    /// must be same as the ones for the forward LSTM.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.ActivationParams> ActivationsBackwardLSTM {
      get { return activationsBackwardLSTM_; }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 15;
    private global::CoreML.Specification.LSTMParams params_;
    /// <summary>
    ///*
    /// Common parameters shared by the forward and backward LSTMs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.LSTMParams Params {
      get { return params_; }
      set {
        params_ = value;
      }
    }

    /// <summary>Field number for the "weightParams" field.</summary>
    public const int WeightParamsFieldNumber = 20;
    private static readonly pb::FieldCodec<global::CoreML.Specification.LSTMWeightParams> _repeated_weightParams_codec
        = pb::FieldCodec.ForMessage(162, global::CoreML.Specification.LSTMWeightParams.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.LSTMWeightParams> weightParams_ = new pbc::RepeatedField<global::CoreML.Specification.LSTMWeightParams>();
    /// <summary>
    ///*
    /// Weights and biases.
    /// Must be a length 2 message,
    /// for the forward and backward LSTM respectively.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.LSTMWeightParams> WeightParams {
      get { return weightParams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BiDirectionalLSTMLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BiDirectionalLSTMLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InputVectorSize != other.InputVectorSize) return false;
      if (OutputVectorSize != other.OutputVectorSize) return false;
      if(!activationsForwardLSTM_.Equals(other.activationsForwardLSTM_)) return false;
      if(!activationsBackwardLSTM_.Equals(other.activationsBackwardLSTM_)) return false;
      if (!object.Equals(Params, other.Params)) return false;
      if(!weightParams_.Equals(other.weightParams_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InputVectorSize != 0UL) hash ^= InputVectorSize.GetHashCode();
      if (OutputVectorSize != 0UL) hash ^= OutputVectorSize.GetHashCode();
      hash ^= activationsForwardLSTM_.GetHashCode();
      hash ^= activationsBackwardLSTM_.GetHashCode();
      if (params_ != null) hash ^= Params.GetHashCode();
      hash ^= weightParams_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InputVectorSize != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(InputVectorSize);
      }
      if (OutputVectorSize != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(OutputVectorSize);
      }
      activationsForwardLSTM_.WriteTo(output, _repeated_activationsForwardLSTM_codec);
      activationsBackwardLSTM_.WriteTo(output, _repeated_activationsBackwardLSTM_codec);
      if (params_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Params);
      }
      weightParams_.WriteTo(output, _repeated_weightParams_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InputVectorSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InputVectorSize);
      }
      if (OutputVectorSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OutputVectorSize);
      }
      size += activationsForwardLSTM_.CalculateSize(_repeated_activationsForwardLSTM_codec);
      size += activationsBackwardLSTM_.CalculateSize(_repeated_activationsBackwardLSTM_codec);
      if (params_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Params);
      }
      size += weightParams_.CalculateSize(_repeated_weightParams_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BiDirectionalLSTMLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.InputVectorSize != 0UL) {
        InputVectorSize = other.InputVectorSize;
      }
      if (other.OutputVectorSize != 0UL) {
        OutputVectorSize = other.OutputVectorSize;
      }
      activationsForwardLSTM_.Add(other.activationsForwardLSTM_);
      activationsBackwardLSTM_.Add(other.activationsBackwardLSTM_);
      if (other.params_ != null) {
        if (params_ == null) {
          params_ = new global::CoreML.Specification.LSTMParams();
        }
        Params.MergeFrom(other.Params);
      }
      weightParams_.Add(other.weightParams_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InputVectorSize = input.ReadUInt64();
            break;
          }
          case 16: {
            OutputVectorSize = input.ReadUInt64();
            break;
          }
          case 82: {
            activationsForwardLSTM_.AddEntriesFrom(input, _repeated_activationsForwardLSTM_codec);
            break;
          }
          case 90: {
            activationsBackwardLSTM_.AddEntriesFrom(input, _repeated_activationsBackwardLSTM_codec);
            break;
          }
          case 122: {
            if (params_ == null) {
              params_ = new global::CoreML.Specification.LSTMParams();
            }
            input.ReadMessage(params_);
            break;
          }
          case 162: {
            weightParams_.AddEntriesFrom(input, _repeated_weightParams_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CustomLayerParams : pb::IMessage<CustomLayerParams> {
    private static readonly pb::MessageParser<CustomLayerParams> _parser = new pb::MessageParser<CustomLayerParams>(() => new CustomLayerParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomLayerParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomLayerParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomLayerParams(CustomLayerParams other) : this() {
      className_ = other.className_;
      weights_ = other.weights_.Clone();
      parameters_ = other.parameters_.Clone();
      description_ = other.description_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomLayerParams Clone() {
      return new CustomLayerParams(this);
    }

    /// <summary>Field number for the "className" field.</summary>
    public const int ClassNameFieldNumber = 10;
    private string className_ = "";
    /// <summary>
    /// The name of the class (conforming to MLCustomLayer) corresponding to this layer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClassName {
      get { return className_; }
      set {
        className_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "weights" field.</summary>
    public const int WeightsFieldNumber = 20;
    private static readonly pb::FieldCodec<global::CoreML.Specification.WeightParams> _repeated_weights_codec
        = pb::FieldCodec.ForMessage(162, global::CoreML.Specification.WeightParams.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.WeightParams> weights_ = new pbc::RepeatedField<global::CoreML.Specification.WeightParams>();
    /// <summary>
    /// Any weights -- these are serialized in binary format and memmapped at runtime
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.WeightParams> Weights {
      get { return weights_; }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 30;
    private static readonly pbc::MapField<string, global::CoreML.Specification.CustomLayerParams.Types.CustomLayerParamValue>.Codec _map_parameters_codec
        = new pbc::MapField<string, global::CoreML.Specification.CustomLayerParams.Types.CustomLayerParamValue>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::CoreML.Specification.CustomLayerParams.Types.CustomLayerParamValue.Parser), 242);
    private readonly pbc::MapField<string, global::CoreML.Specification.CustomLayerParams.Types.CustomLayerParamValue> parameters_ = new pbc::MapField<string, global::CoreML.Specification.CustomLayerParams.Types.CustomLayerParamValue>();
    /// <summary>
    /// these may be handled as strings, so this should not be large
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::CoreML.Specification.CustomLayerParams.Types.CustomLayerParamValue> Parameters {
      get { return parameters_; }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 40;
    private string description_ = "";
    /// <summary>
    /// An (optional) description of the layer provided by the model creator. This information is displayed when viewing the model, but does not affect the model's execution on device.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomLayerParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomLayerParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClassName != other.ClassName) return false;
      if(!weights_.Equals(other.weights_)) return false;
      if (!Parameters.Equals(other.Parameters)) return false;
      if (Description != other.Description) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClassName.Length != 0) hash ^= ClassName.GetHashCode();
      hash ^= weights_.GetHashCode();
      hash ^= Parameters.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClassName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ClassName);
      }
      weights_.WriteTo(output, _repeated_weights_codec);
      parameters_.WriteTo(output, _map_parameters_codec);
      if (Description.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClassName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassName);
      }
      size += weights_.CalculateSize(_repeated_weights_codec);
      size += parameters_.CalculateSize(_map_parameters_codec);
      if (Description.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomLayerParams other) {
      if (other == null) {
        return;
      }
      if (other.ClassName.Length != 0) {
        ClassName = other.ClassName;
      }
      weights_.Add(other.weights_);
      parameters_.Add(other.parameters_);
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            ClassName = input.ReadString();
            break;
          }
          case 162: {
            weights_.AddEntriesFrom(input, _repeated_weights_codec);
            break;
          }
          case 242: {
            parameters_.AddEntriesFrom(input, _map_parameters_codec);
            break;
          }
          case 322: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CustomLayerParams message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class CustomLayerParamValue : pb::IMessage<CustomLayerParamValue> {
        private static readonly pb::MessageParser<CustomLayerParamValue> _parser = new pb::MessageParser<CustomLayerParamValue>(() => new CustomLayerParamValue());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CustomLayerParamValue> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CoreML.Specification.CustomLayerParams.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CustomLayerParamValue() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CustomLayerParamValue(CustomLayerParamValue other) : this() {
          switch (other.ValueCase) {
            case ValueOneofCase.DoubleValue:
              DoubleValue = other.DoubleValue;
              break;
            case ValueOneofCase.StringValue:
              StringValue = other.StringValue;
              break;
            case ValueOneofCase.IntValue:
              IntValue = other.IntValue;
              break;
            case ValueOneofCase.LongValue:
              LongValue = other.LongValue;
              break;
            case ValueOneofCase.BoolValue:
              BoolValue = other.BoolValue;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CustomLayerParamValue Clone() {
          return new CustomLayerParamValue(this);
        }

        /// <summary>Field number for the "doubleValue" field.</summary>
        public const int DoubleValueFieldNumber = 10;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double DoubleValue {
          get { return valueCase_ == ValueOneofCase.DoubleValue ? (double) value_ : 0D; }
          set {
            value_ = value;
            valueCase_ = ValueOneofCase.DoubleValue;
          }
        }

        /// <summary>Field number for the "stringValue" field.</summary>
        public const int StringValueFieldNumber = 20;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StringValue {
          get { return valueCase_ == ValueOneofCase.StringValue ? (string) value_ : ""; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            valueCase_ = ValueOneofCase.StringValue;
          }
        }

        /// <summary>Field number for the "intValue" field.</summary>
        public const int IntValueFieldNumber = 30;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int IntValue {
          get { return valueCase_ == ValueOneofCase.IntValue ? (int) value_ : 0; }
          set {
            value_ = value;
            valueCase_ = ValueOneofCase.IntValue;
          }
        }

        /// <summary>Field number for the "longValue" field.</summary>
        public const int LongValueFieldNumber = 40;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LongValue {
          get { return valueCase_ == ValueOneofCase.LongValue ? (long) value_ : 0L; }
          set {
            value_ = value;
            valueCase_ = ValueOneofCase.LongValue;
          }
        }

        /// <summary>Field number for the "boolValue" field.</summary>
        public const int BoolValueFieldNumber = 50;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool BoolValue {
          get { return valueCase_ == ValueOneofCase.BoolValue ? (bool) value_ : false; }
          set {
            value_ = value;
            valueCase_ = ValueOneofCase.BoolValue;
          }
        }

        private object value_;
        /// <summary>Enum of possible cases for the "value" oneof.</summary>
        public enum ValueOneofCase {
          None = 0,
          DoubleValue = 10,
          StringValue = 20,
          IntValue = 30,
          LongValue = 40,
          BoolValue = 50,
        }
        private ValueOneofCase valueCase_ = ValueOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueOneofCase ValueCase {
          get { return valueCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValue() {
          valueCase_ = ValueOneofCase.None;
          value_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CustomLayerParamValue);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CustomLayerParamValue other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DoubleValue, other.DoubleValue)) return false;
          if (StringValue != other.StringValue) return false;
          if (IntValue != other.IntValue) return false;
          if (LongValue != other.LongValue) return false;
          if (BoolValue != other.BoolValue) return false;
          if (ValueCase != other.ValueCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (valueCase_ == ValueOneofCase.DoubleValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DoubleValue);
          if (valueCase_ == ValueOneofCase.StringValue) hash ^= StringValue.GetHashCode();
          if (valueCase_ == ValueOneofCase.IntValue) hash ^= IntValue.GetHashCode();
          if (valueCase_ == ValueOneofCase.LongValue) hash ^= LongValue.GetHashCode();
          if (valueCase_ == ValueOneofCase.BoolValue) hash ^= BoolValue.GetHashCode();
          hash ^= (int) valueCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (valueCase_ == ValueOneofCase.DoubleValue) {
            output.WriteRawTag(81);
            output.WriteDouble(DoubleValue);
          }
          if (valueCase_ == ValueOneofCase.StringValue) {
            output.WriteRawTag(162, 1);
            output.WriteString(StringValue);
          }
          if (valueCase_ == ValueOneofCase.IntValue) {
            output.WriteRawTag(240, 1);
            output.WriteInt32(IntValue);
          }
          if (valueCase_ == ValueOneofCase.LongValue) {
            output.WriteRawTag(192, 2);
            output.WriteInt64(LongValue);
          }
          if (valueCase_ == ValueOneofCase.BoolValue) {
            output.WriteRawTag(144, 3);
            output.WriteBool(BoolValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (valueCase_ == ValueOneofCase.DoubleValue) {
            size += 1 + 8;
          }
          if (valueCase_ == ValueOneofCase.StringValue) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(StringValue);
          }
          if (valueCase_ == ValueOneofCase.IntValue) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(IntValue);
          }
          if (valueCase_ == ValueOneofCase.LongValue) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(LongValue);
          }
          if (valueCase_ == ValueOneofCase.BoolValue) {
            size += 2 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CustomLayerParamValue other) {
          if (other == null) {
            return;
          }
          switch (other.ValueCase) {
            case ValueOneofCase.DoubleValue:
              DoubleValue = other.DoubleValue;
              break;
            case ValueOneofCase.StringValue:
              StringValue = other.StringValue;
              break;
            case ValueOneofCase.IntValue:
              IntValue = other.IntValue;
              break;
            case ValueOneofCase.LongValue:
              LongValue = other.LongValue;
              break;
            case ValueOneofCase.BoolValue:
              BoolValue = other.BoolValue;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 81: {
                DoubleValue = input.ReadDouble();
                break;
              }
              case 162: {
                StringValue = input.ReadString();
                break;
              }
              case 240: {
                IntValue = input.ReadInt32();
                break;
              }
              case 320: {
                LongValue = input.ReadInt64();
                break;
              }
              case 400: {
                BoolValue = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// A neural network specialized as a classifier.
  /// </summary>
  public sealed partial class NeuralNetworkClassifier : pb::IMessage<NeuralNetworkClassifier> {
    private static readonly pb::MessageParser<NeuralNetworkClassifier> _parser = new pb::MessageParser<NeuralNetworkClassifier>(() => new NeuralNetworkClassifier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NeuralNetworkClassifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeuralNetworkClassifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeuralNetworkClassifier(NeuralNetworkClassifier other) : this() {
      layers_ = other.layers_.Clone();
      preprocessing_ = other.preprocessing_.Clone();
      labelProbabilityLayerName_ = other.labelProbabilityLayerName_;
      switch (other.ClassLabelsCase) {
        case ClassLabelsOneofCase.StringClassLabels:
          StringClassLabels = other.StringClassLabels.Clone();
          break;
        case ClassLabelsOneofCase.Int64ClassLabels:
          Int64ClassLabels = other.Int64ClassLabels.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeuralNetworkClassifier Clone() {
      return new NeuralNetworkClassifier(this);
    }

    /// <summary>Field number for the "layers" field.</summary>
    public const int LayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CoreML.Specification.NeuralNetworkLayer> _repeated_layers_codec
        = pb::FieldCodec.ForMessage(10, global::CoreML.Specification.NeuralNetworkLayer.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.NeuralNetworkLayer> layers_ = new pbc::RepeatedField<global::CoreML.Specification.NeuralNetworkLayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.NeuralNetworkLayer> Layers {
      get { return layers_; }
    }

    /// <summary>Field number for the "preprocessing" field.</summary>
    public const int PreprocessingFieldNumber = 2;
    private static readonly pb::FieldCodec<global::CoreML.Specification.NeuralNetworkPreprocessing> _repeated_preprocessing_codec
        = pb::FieldCodec.ForMessage(18, global::CoreML.Specification.NeuralNetworkPreprocessing.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.NeuralNetworkPreprocessing> preprocessing_ = new pbc::RepeatedField<global::CoreML.Specification.NeuralNetworkPreprocessing>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.NeuralNetworkPreprocessing> Preprocessing {
      get { return preprocessing_; }
    }

    /// <summary>Field number for the "stringClassLabels" field.</summary>
    public const int StringClassLabelsFieldNumber = 100;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.StringVector StringClassLabels {
      get { return classLabelsCase_ == ClassLabelsOneofCase.StringClassLabels ? (global::CoreML.Specification.StringVector) classLabels_ : null; }
      set {
        classLabels_ = value;
        classLabelsCase_ = value == null ? ClassLabelsOneofCase.None : ClassLabelsOneofCase.StringClassLabels;
      }
    }

    /// <summary>Field number for the "int64ClassLabels" field.</summary>
    public const int Int64ClassLabelsFieldNumber = 101;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Int64Vector Int64ClassLabels {
      get { return classLabelsCase_ == ClassLabelsOneofCase.Int64ClassLabels ? (global::CoreML.Specification.Int64Vector) classLabels_ : null; }
      set {
        classLabels_ = value;
        classLabelsCase_ = value == null ? ClassLabelsOneofCase.None : ClassLabelsOneofCase.Int64ClassLabels;
      }
    }

    /// <summary>Field number for the "labelProbabilityLayerName" field.</summary>
    public const int LabelProbabilityLayerNameFieldNumber = 200;
    private string labelProbabilityLayerName_ = "";
    /// <summary>
    ///*
    /// The name of the output blob which will be used as the predicted
    /// probabilities of each class label.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LabelProbabilityLayerName {
      get { return labelProbabilityLayerName_; }
      set {
        labelProbabilityLayerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object classLabels_;
    /// <summary>Enum of possible cases for the "ClassLabels" oneof.</summary>
    public enum ClassLabelsOneofCase {
      None = 0,
      StringClassLabels = 100,
      Int64ClassLabels = 101,
    }
    private ClassLabelsOneofCase classLabelsCase_ = ClassLabelsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassLabelsOneofCase ClassLabelsCase {
      get { return classLabelsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClassLabels() {
      classLabelsCase_ = ClassLabelsOneofCase.None;
      classLabels_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NeuralNetworkClassifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NeuralNetworkClassifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!layers_.Equals(other.layers_)) return false;
      if(!preprocessing_.Equals(other.preprocessing_)) return false;
      if (!object.Equals(StringClassLabels, other.StringClassLabels)) return false;
      if (!object.Equals(Int64ClassLabels, other.Int64ClassLabels)) return false;
      if (LabelProbabilityLayerName != other.LabelProbabilityLayerName) return false;
      if (ClassLabelsCase != other.ClassLabelsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= layers_.GetHashCode();
      hash ^= preprocessing_.GetHashCode();
      if (classLabelsCase_ == ClassLabelsOneofCase.StringClassLabels) hash ^= StringClassLabels.GetHashCode();
      if (classLabelsCase_ == ClassLabelsOneofCase.Int64ClassLabels) hash ^= Int64ClassLabels.GetHashCode();
      if (LabelProbabilityLayerName.Length != 0) hash ^= LabelProbabilityLayerName.GetHashCode();
      hash ^= (int) classLabelsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      layers_.WriteTo(output, _repeated_layers_codec);
      preprocessing_.WriteTo(output, _repeated_preprocessing_codec);
      if (classLabelsCase_ == ClassLabelsOneofCase.StringClassLabels) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(StringClassLabels);
      }
      if (classLabelsCase_ == ClassLabelsOneofCase.Int64ClassLabels) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(Int64ClassLabels);
      }
      if (LabelProbabilityLayerName.Length != 0) {
        output.WriteRawTag(194, 12);
        output.WriteString(LabelProbabilityLayerName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += layers_.CalculateSize(_repeated_layers_codec);
      size += preprocessing_.CalculateSize(_repeated_preprocessing_codec);
      if (classLabelsCase_ == ClassLabelsOneofCase.StringClassLabels) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StringClassLabels);
      }
      if (classLabelsCase_ == ClassLabelsOneofCase.Int64ClassLabels) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Int64ClassLabels);
      }
      if (LabelProbabilityLayerName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LabelProbabilityLayerName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NeuralNetworkClassifier other) {
      if (other == null) {
        return;
      }
      layers_.Add(other.layers_);
      preprocessing_.Add(other.preprocessing_);
      if (other.LabelProbabilityLayerName.Length != 0) {
        LabelProbabilityLayerName = other.LabelProbabilityLayerName;
      }
      switch (other.ClassLabelsCase) {
        case ClassLabelsOneofCase.StringClassLabels:
          if (StringClassLabels == null) {
            StringClassLabels = new global::CoreML.Specification.StringVector();
          }
          StringClassLabels.MergeFrom(other.StringClassLabels);
          break;
        case ClassLabelsOneofCase.Int64ClassLabels:
          if (Int64ClassLabels == null) {
            Int64ClassLabels = new global::CoreML.Specification.Int64Vector();
          }
          Int64ClassLabels.MergeFrom(other.Int64ClassLabels);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            layers_.AddEntriesFrom(input, _repeated_layers_codec);
            break;
          }
          case 18: {
            preprocessing_.AddEntriesFrom(input, _repeated_preprocessing_codec);
            break;
          }
          case 802: {
            global::CoreML.Specification.StringVector subBuilder = new global::CoreML.Specification.StringVector();
            if (classLabelsCase_ == ClassLabelsOneofCase.StringClassLabels) {
              subBuilder.MergeFrom(StringClassLabels);
            }
            input.ReadMessage(subBuilder);
            StringClassLabels = subBuilder;
            break;
          }
          case 810: {
            global::CoreML.Specification.Int64Vector subBuilder = new global::CoreML.Specification.Int64Vector();
            if (classLabelsCase_ == ClassLabelsOneofCase.Int64ClassLabels) {
              subBuilder.MergeFrom(Int64ClassLabels);
            }
            input.ReadMessage(subBuilder);
            Int64ClassLabels = subBuilder;
            break;
          }
          case 1602: {
            LabelProbabilityLayerName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A neural network specialized as a regressor.
  /// </summary>
  public sealed partial class NeuralNetworkRegressor : pb::IMessage<NeuralNetworkRegressor> {
    private static readonly pb::MessageParser<NeuralNetworkRegressor> _parser = new pb::MessageParser<NeuralNetworkRegressor>(() => new NeuralNetworkRegressor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NeuralNetworkRegressor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.NeuralNetworkReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeuralNetworkRegressor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeuralNetworkRegressor(NeuralNetworkRegressor other) : this() {
      layers_ = other.layers_.Clone();
      preprocessing_ = other.preprocessing_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeuralNetworkRegressor Clone() {
      return new NeuralNetworkRegressor(this);
    }

    /// <summary>Field number for the "layers" field.</summary>
    public const int LayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CoreML.Specification.NeuralNetworkLayer> _repeated_layers_codec
        = pb::FieldCodec.ForMessage(10, global::CoreML.Specification.NeuralNetworkLayer.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.NeuralNetworkLayer> layers_ = new pbc::RepeatedField<global::CoreML.Specification.NeuralNetworkLayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.NeuralNetworkLayer> Layers {
      get { return layers_; }
    }

    /// <summary>Field number for the "preprocessing" field.</summary>
    public const int PreprocessingFieldNumber = 2;
    private static readonly pb::FieldCodec<global::CoreML.Specification.NeuralNetworkPreprocessing> _repeated_preprocessing_codec
        = pb::FieldCodec.ForMessage(18, global::CoreML.Specification.NeuralNetworkPreprocessing.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.NeuralNetworkPreprocessing> preprocessing_ = new pbc::RepeatedField<global::CoreML.Specification.NeuralNetworkPreprocessing>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.NeuralNetworkPreprocessing> Preprocessing {
      get { return preprocessing_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NeuralNetworkRegressor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NeuralNetworkRegressor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!layers_.Equals(other.layers_)) return false;
      if(!preprocessing_.Equals(other.preprocessing_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= layers_.GetHashCode();
      hash ^= preprocessing_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      layers_.WriteTo(output, _repeated_layers_codec);
      preprocessing_.WriteTo(output, _repeated_preprocessing_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += layers_.CalculateSize(_repeated_layers_codec);
      size += preprocessing_.CalculateSize(_repeated_preprocessing_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NeuralNetworkRegressor other) {
      if (other == null) {
        return;
      }
      layers_.Add(other.layers_);
      preprocessing_.Add(other.preprocessing_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            layers_.AddEntriesFrom(input, _repeated_layers_codec);
            break;
          }
          case 18: {
            preprocessing_.AddEntriesFrom(input, _repeated_preprocessing_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

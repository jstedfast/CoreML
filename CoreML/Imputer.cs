// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Imputer.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CoreML.Specification {

  /// <summary>Holder for reflection information generated from Imputer.proto</summary>
  public static partial class ImputerReflection {

    #region Descriptor
    /// <summary>File descriptor for Imputer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ImputerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1JbXB1dGVyLnByb3RvEhRDb3JlTUwuU3BlY2lmaWNhdGlvbhoURGF0YVN0",
            "cnVjdHVyZXMucHJvdG8i8wMKB0ltcHV0ZXISHAoSaW1wdXRlZERvdWJsZVZh",
            "bHVlGAEgASgBSAASGwoRaW1wdXRlZEludDY0VmFsdWUYAiABKANIABIcChJp",
            "bXB1dGVkU3RyaW5nVmFsdWUYAyABKAlIABJAChJpbXB1dGVkRG91YmxlQXJy",
            "YXkYBCABKAsyIi5Db3JlTUwuU3BlY2lmaWNhdGlvbi5Eb3VibGVWZWN0b3JI",
            "ABI+ChFpbXB1dGVkSW50NjRBcnJheRgFIAEoCzIhLkNvcmVNTC5TcGVjaWZp",
            "Y2F0aW9uLkludDY0VmVjdG9ySAASSgoXaW1wdXRlZFN0cmluZ0RpY3Rpb25h",
            "cnkYBiABKAsyJy5Db3JlTUwuU3BlY2lmaWNhdGlvbi5TdHJpbmdUb0RvdWJs",
            "ZU1hcEgAEkgKFmltcHV0ZWRJbnQ2NERpY3Rpb25hcnkYByABKAsyJi5Db3Jl",
            "TUwuU3BlY2lmaWNhdGlvbi5JbnQ2NFRvRG91YmxlTWFwSAASHAoScmVwbGFj",
            "ZURvdWJsZVZhbHVlGAsgASgBSAESGwoRcmVwbGFjZUludDY0VmFsdWUYDCAB",
            "KANIARIcChJyZXBsYWNlU3RyaW5nVmFsdWUYDSABKAlIAUIOCgxJbXB1dGVk",
            "VmFsdWVCDgoMUmVwbGFjZVZhbHVlQgJIA1AAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::CoreML.Specification.DataStructuresReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.Imputer), global::CoreML.Specification.Imputer.Parser, new[]{ "ImputedDoubleValue", "ImputedInt64Value", "ImputedStringValue", "ImputedDoubleArray", "ImputedInt64Array", "ImputedStringDictionary", "ImputedInt64Dictionary", "ReplaceDoubleValue", "ReplaceInt64Value", "ReplaceStringValue" }, new[]{ "ImputedValue", "ReplaceValue" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// A transformer that replaces missing values with a default value,
  /// such as a statistically-derived value.
  ///
  /// If ``ReplaceValue`` is set, then missing values of that type are
  /// replaced with the corresponding value.
  ///
  /// For example: if ``replaceDoubleValue`` is set to ``NaN``
  /// and a single ``NaN`` double value is provided as input,
  /// then it is replaced by ``imputedDoubleValue``. However
  /// if the input is an array of doubles, then any instances
  /// of ``NaN`` in the array is replaced with the corresponding
  /// value in ``imputedDoubleArray``.
  /// </summary>
  public sealed partial class Imputer : pb::IMessage<Imputer> {
    private static readonly pb::MessageParser<Imputer> _parser = new pb::MessageParser<Imputer>(() => new Imputer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Imputer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.ImputerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Imputer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Imputer(Imputer other) : this() {
      switch (other.ImputedValueCase) {
        case ImputedValueOneofCase.ImputedDoubleValue:
          ImputedDoubleValue = other.ImputedDoubleValue;
          break;
        case ImputedValueOneofCase.ImputedInt64Value:
          ImputedInt64Value = other.ImputedInt64Value;
          break;
        case ImputedValueOneofCase.ImputedStringValue:
          ImputedStringValue = other.ImputedStringValue;
          break;
        case ImputedValueOneofCase.ImputedDoubleArray:
          ImputedDoubleArray = other.ImputedDoubleArray.Clone();
          break;
        case ImputedValueOneofCase.ImputedInt64Array:
          ImputedInt64Array = other.ImputedInt64Array.Clone();
          break;
        case ImputedValueOneofCase.ImputedStringDictionary:
          ImputedStringDictionary = other.ImputedStringDictionary.Clone();
          break;
        case ImputedValueOneofCase.ImputedInt64Dictionary:
          ImputedInt64Dictionary = other.ImputedInt64Dictionary.Clone();
          break;
      }

      switch (other.ReplaceValueCase) {
        case ReplaceValueOneofCase.ReplaceDoubleValue:
          ReplaceDoubleValue = other.ReplaceDoubleValue;
          break;
        case ReplaceValueOneofCase.ReplaceInt64Value:
          ReplaceInt64Value = other.ReplaceInt64Value;
          break;
        case ReplaceValueOneofCase.ReplaceStringValue:
          ReplaceStringValue = other.ReplaceStringValue;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Imputer Clone() {
      return new Imputer(this);
    }

    /// <summary>Field number for the "imputedDoubleValue" field.</summary>
    public const int ImputedDoubleValueFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ImputedDoubleValue {
      get { return imputedValueCase_ == ImputedValueOneofCase.ImputedDoubleValue ? (double) imputedValue_ : 0D; }
      set {
        imputedValue_ = value;
        imputedValueCase_ = ImputedValueOneofCase.ImputedDoubleValue;
      }
    }

    /// <summary>Field number for the "imputedInt64Value" field.</summary>
    public const int ImputedInt64ValueFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ImputedInt64Value {
      get { return imputedValueCase_ == ImputedValueOneofCase.ImputedInt64Value ? (long) imputedValue_ : 0L; }
      set {
        imputedValue_ = value;
        imputedValueCase_ = ImputedValueOneofCase.ImputedInt64Value;
      }
    }

    /// <summary>Field number for the "imputedStringValue" field.</summary>
    public const int ImputedStringValueFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImputedStringValue {
      get { return imputedValueCase_ == ImputedValueOneofCase.ImputedStringValue ? (string) imputedValue_ : ""; }
      set {
        imputedValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        imputedValueCase_ = ImputedValueOneofCase.ImputedStringValue;
      }
    }

    /// <summary>Field number for the "imputedDoubleArray" field.</summary>
    public const int ImputedDoubleArrayFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.DoubleVector ImputedDoubleArray {
      get { return imputedValueCase_ == ImputedValueOneofCase.ImputedDoubleArray ? (global::CoreML.Specification.DoubleVector) imputedValue_ : null; }
      set {
        imputedValue_ = value;
        imputedValueCase_ = value == null ? ImputedValueOneofCase.None : ImputedValueOneofCase.ImputedDoubleArray;
      }
    }

    /// <summary>Field number for the "imputedInt64Array" field.</summary>
    public const int ImputedInt64ArrayFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Int64Vector ImputedInt64Array {
      get { return imputedValueCase_ == ImputedValueOneofCase.ImputedInt64Array ? (global::CoreML.Specification.Int64Vector) imputedValue_ : null; }
      set {
        imputedValue_ = value;
        imputedValueCase_ = value == null ? ImputedValueOneofCase.None : ImputedValueOneofCase.ImputedInt64Array;
      }
    }

    /// <summary>Field number for the "imputedStringDictionary" field.</summary>
    public const int ImputedStringDictionaryFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.StringToDoubleMap ImputedStringDictionary {
      get { return imputedValueCase_ == ImputedValueOneofCase.ImputedStringDictionary ? (global::CoreML.Specification.StringToDoubleMap) imputedValue_ : null; }
      set {
        imputedValue_ = value;
        imputedValueCase_ = value == null ? ImputedValueOneofCase.None : ImputedValueOneofCase.ImputedStringDictionary;
      }
    }

    /// <summary>Field number for the "imputedInt64Dictionary" field.</summary>
    public const int ImputedInt64DictionaryFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Int64ToDoubleMap ImputedInt64Dictionary {
      get { return imputedValueCase_ == ImputedValueOneofCase.ImputedInt64Dictionary ? (global::CoreML.Specification.Int64ToDoubleMap) imputedValue_ : null; }
      set {
        imputedValue_ = value;
        imputedValueCase_ = value == null ? ImputedValueOneofCase.None : ImputedValueOneofCase.ImputedInt64Dictionary;
      }
    }

    /// <summary>Field number for the "replaceDoubleValue" field.</summary>
    public const int ReplaceDoubleValueFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ReplaceDoubleValue {
      get { return replaceValueCase_ == ReplaceValueOneofCase.ReplaceDoubleValue ? (double) replaceValue_ : 0D; }
      set {
        replaceValue_ = value;
        replaceValueCase_ = ReplaceValueOneofCase.ReplaceDoubleValue;
      }
    }

    /// <summary>Field number for the "replaceInt64Value" field.</summary>
    public const int ReplaceInt64ValueFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReplaceInt64Value {
      get { return replaceValueCase_ == ReplaceValueOneofCase.ReplaceInt64Value ? (long) replaceValue_ : 0L; }
      set {
        replaceValue_ = value;
        replaceValueCase_ = ReplaceValueOneofCase.ReplaceInt64Value;
      }
    }

    /// <summary>Field number for the "replaceStringValue" field.</summary>
    public const int ReplaceStringValueFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReplaceStringValue {
      get { return replaceValueCase_ == ReplaceValueOneofCase.ReplaceStringValue ? (string) replaceValue_ : ""; }
      set {
        replaceValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        replaceValueCase_ = ReplaceValueOneofCase.ReplaceStringValue;
      }
    }

    private object imputedValue_;
    /// <summary>Enum of possible cases for the "ImputedValue" oneof.</summary>
    public enum ImputedValueOneofCase {
      None = 0,
      ImputedDoubleValue = 1,
      ImputedInt64Value = 2,
      ImputedStringValue = 3,
      ImputedDoubleArray = 4,
      ImputedInt64Array = 5,
      ImputedStringDictionary = 6,
      ImputedInt64Dictionary = 7,
    }
    private ImputedValueOneofCase imputedValueCase_ = ImputedValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImputedValueOneofCase ImputedValueCase {
      get { return imputedValueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImputedValue() {
      imputedValueCase_ = ImputedValueOneofCase.None;
      imputedValue_ = null;
    }

    private object replaceValue_;
    /// <summary>Enum of possible cases for the "ReplaceValue" oneof.</summary>
    public enum ReplaceValueOneofCase {
      None = 0,
      ReplaceDoubleValue = 11,
      ReplaceInt64Value = 12,
      ReplaceStringValue = 13,
    }
    private ReplaceValueOneofCase replaceValueCase_ = ReplaceValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceValueOneofCase ReplaceValueCase {
      get { return replaceValueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReplaceValue() {
      replaceValueCase_ = ReplaceValueOneofCase.None;
      replaceValue_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Imputer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Imputer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImputedDoubleValue != other.ImputedDoubleValue) return false;
      if (ImputedInt64Value != other.ImputedInt64Value) return false;
      if (ImputedStringValue != other.ImputedStringValue) return false;
      if (!object.Equals(ImputedDoubleArray, other.ImputedDoubleArray)) return false;
      if (!object.Equals(ImputedInt64Array, other.ImputedInt64Array)) return false;
      if (!object.Equals(ImputedStringDictionary, other.ImputedStringDictionary)) return false;
      if (!object.Equals(ImputedInt64Dictionary, other.ImputedInt64Dictionary)) return false;
      if (ReplaceDoubleValue != other.ReplaceDoubleValue) return false;
      if (ReplaceInt64Value != other.ReplaceInt64Value) return false;
      if (ReplaceStringValue != other.ReplaceStringValue) return false;
      if (ImputedValueCase != other.ImputedValueCase) return false;
      if (ReplaceValueCase != other.ReplaceValueCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (imputedValueCase_ == ImputedValueOneofCase.ImputedDoubleValue) hash ^= ImputedDoubleValue.GetHashCode();
      if (imputedValueCase_ == ImputedValueOneofCase.ImputedInt64Value) hash ^= ImputedInt64Value.GetHashCode();
      if (imputedValueCase_ == ImputedValueOneofCase.ImputedStringValue) hash ^= ImputedStringValue.GetHashCode();
      if (imputedValueCase_ == ImputedValueOneofCase.ImputedDoubleArray) hash ^= ImputedDoubleArray.GetHashCode();
      if (imputedValueCase_ == ImputedValueOneofCase.ImputedInt64Array) hash ^= ImputedInt64Array.GetHashCode();
      if (imputedValueCase_ == ImputedValueOneofCase.ImputedStringDictionary) hash ^= ImputedStringDictionary.GetHashCode();
      if (imputedValueCase_ == ImputedValueOneofCase.ImputedInt64Dictionary) hash ^= ImputedInt64Dictionary.GetHashCode();
      if (replaceValueCase_ == ReplaceValueOneofCase.ReplaceDoubleValue) hash ^= ReplaceDoubleValue.GetHashCode();
      if (replaceValueCase_ == ReplaceValueOneofCase.ReplaceInt64Value) hash ^= ReplaceInt64Value.GetHashCode();
      if (replaceValueCase_ == ReplaceValueOneofCase.ReplaceStringValue) hash ^= ReplaceStringValue.GetHashCode();
      hash ^= (int) imputedValueCase_;
      hash ^= (int) replaceValueCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (imputedValueCase_ == ImputedValueOneofCase.ImputedDoubleValue) {
        output.WriteRawTag(9);
        output.WriteDouble(ImputedDoubleValue);
      }
      if (imputedValueCase_ == ImputedValueOneofCase.ImputedInt64Value) {
        output.WriteRawTag(16);
        output.WriteInt64(ImputedInt64Value);
      }
      if (imputedValueCase_ == ImputedValueOneofCase.ImputedStringValue) {
        output.WriteRawTag(26);
        output.WriteString(ImputedStringValue);
      }
      if (imputedValueCase_ == ImputedValueOneofCase.ImputedDoubleArray) {
        output.WriteRawTag(34);
        output.WriteMessage(ImputedDoubleArray);
      }
      if (imputedValueCase_ == ImputedValueOneofCase.ImputedInt64Array) {
        output.WriteRawTag(42);
        output.WriteMessage(ImputedInt64Array);
      }
      if (imputedValueCase_ == ImputedValueOneofCase.ImputedStringDictionary) {
        output.WriteRawTag(50);
        output.WriteMessage(ImputedStringDictionary);
      }
      if (imputedValueCase_ == ImputedValueOneofCase.ImputedInt64Dictionary) {
        output.WriteRawTag(58);
        output.WriteMessage(ImputedInt64Dictionary);
      }
      if (replaceValueCase_ == ReplaceValueOneofCase.ReplaceDoubleValue) {
        output.WriteRawTag(89);
        output.WriteDouble(ReplaceDoubleValue);
      }
      if (replaceValueCase_ == ReplaceValueOneofCase.ReplaceInt64Value) {
        output.WriteRawTag(96);
        output.WriteInt64(ReplaceInt64Value);
      }
      if (replaceValueCase_ == ReplaceValueOneofCase.ReplaceStringValue) {
        output.WriteRawTag(106);
        output.WriteString(ReplaceStringValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (imputedValueCase_ == ImputedValueOneofCase.ImputedDoubleValue) {
        size += 1 + 8;
      }
      if (imputedValueCase_ == ImputedValueOneofCase.ImputedInt64Value) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ImputedInt64Value);
      }
      if (imputedValueCase_ == ImputedValueOneofCase.ImputedStringValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImputedStringValue);
      }
      if (imputedValueCase_ == ImputedValueOneofCase.ImputedDoubleArray) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImputedDoubleArray);
      }
      if (imputedValueCase_ == ImputedValueOneofCase.ImputedInt64Array) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImputedInt64Array);
      }
      if (imputedValueCase_ == ImputedValueOneofCase.ImputedStringDictionary) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImputedStringDictionary);
      }
      if (imputedValueCase_ == ImputedValueOneofCase.ImputedInt64Dictionary) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImputedInt64Dictionary);
      }
      if (replaceValueCase_ == ReplaceValueOneofCase.ReplaceDoubleValue) {
        size += 1 + 8;
      }
      if (replaceValueCase_ == ReplaceValueOneofCase.ReplaceInt64Value) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReplaceInt64Value);
      }
      if (replaceValueCase_ == ReplaceValueOneofCase.ReplaceStringValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReplaceStringValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Imputer other) {
      if (other == null) {
        return;
      }
      switch (other.ImputedValueCase) {
        case ImputedValueOneofCase.ImputedDoubleValue:
          ImputedDoubleValue = other.ImputedDoubleValue;
          break;
        case ImputedValueOneofCase.ImputedInt64Value:
          ImputedInt64Value = other.ImputedInt64Value;
          break;
        case ImputedValueOneofCase.ImputedStringValue:
          ImputedStringValue = other.ImputedStringValue;
          break;
        case ImputedValueOneofCase.ImputedDoubleArray:
          ImputedDoubleArray = other.ImputedDoubleArray;
          break;
        case ImputedValueOneofCase.ImputedInt64Array:
          ImputedInt64Array = other.ImputedInt64Array;
          break;
        case ImputedValueOneofCase.ImputedStringDictionary:
          ImputedStringDictionary = other.ImputedStringDictionary;
          break;
        case ImputedValueOneofCase.ImputedInt64Dictionary:
          ImputedInt64Dictionary = other.ImputedInt64Dictionary;
          break;
      }

      switch (other.ReplaceValueCase) {
        case ReplaceValueOneofCase.ReplaceDoubleValue:
          ReplaceDoubleValue = other.ReplaceDoubleValue;
          break;
        case ReplaceValueOneofCase.ReplaceInt64Value:
          ReplaceInt64Value = other.ReplaceInt64Value;
          break;
        case ReplaceValueOneofCase.ReplaceStringValue:
          ReplaceStringValue = other.ReplaceStringValue;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            ImputedDoubleValue = input.ReadDouble();
            break;
          }
          case 16: {
            ImputedInt64Value = input.ReadInt64();
            break;
          }
          case 26: {
            ImputedStringValue = input.ReadString();
            break;
          }
          case 34: {
            global::CoreML.Specification.DoubleVector subBuilder = new global::CoreML.Specification.DoubleVector();
            if (imputedValueCase_ == ImputedValueOneofCase.ImputedDoubleArray) {
              subBuilder.MergeFrom(ImputedDoubleArray);
            }
            input.ReadMessage(subBuilder);
            ImputedDoubleArray = subBuilder;
            break;
          }
          case 42: {
            global::CoreML.Specification.Int64Vector subBuilder = new global::CoreML.Specification.Int64Vector();
            if (imputedValueCase_ == ImputedValueOneofCase.ImputedInt64Array) {
              subBuilder.MergeFrom(ImputedInt64Array);
            }
            input.ReadMessage(subBuilder);
            ImputedInt64Array = subBuilder;
            break;
          }
          case 50: {
            global::CoreML.Specification.StringToDoubleMap subBuilder = new global::CoreML.Specification.StringToDoubleMap();
            if (imputedValueCase_ == ImputedValueOneofCase.ImputedStringDictionary) {
              subBuilder.MergeFrom(ImputedStringDictionary);
            }
            input.ReadMessage(subBuilder);
            ImputedStringDictionary = subBuilder;
            break;
          }
          case 58: {
            global::CoreML.Specification.Int64ToDoubleMap subBuilder = new global::CoreML.Specification.Int64ToDoubleMap();
            if (imputedValueCase_ == ImputedValueOneofCase.ImputedInt64Dictionary) {
              subBuilder.MergeFrom(ImputedInt64Dictionary);
            }
            input.ReadMessage(subBuilder);
            ImputedInt64Dictionary = subBuilder;
            break;
          }
          case 89: {
            ReplaceDoubleValue = input.ReadDouble();
            break;
          }
          case 96: {
            ReplaceInt64Value = input.ReadInt64();
            break;
          }
          case 106: {
            ReplaceStringValue = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

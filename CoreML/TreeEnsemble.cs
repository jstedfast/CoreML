// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: TreeEnsemble.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CoreML.Specification {

  /// <summary>Holder for reflection information generated from TreeEnsemble.proto</summary>
  public static partial class TreeEnsembleReflection {

    #region Descriptor
    /// <summary>File descriptor for TreeEnsemble.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TreeEnsembleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJUcmVlRW5zZW1ibGUucHJvdG8SFENvcmVNTC5TcGVjaWZpY2F0aW9uGhRE",
            "YXRhU3RydWN0dXJlcy5wcm90byLEBgoWVHJlZUVuc2VtYmxlUGFyYW1ldGVy",
            "cxJECgVub2RlcxgBIAMoCzI1LkNvcmVNTC5TcGVjaWZpY2F0aW9uLlRyZWVF",
            "bnNlbWJsZVBhcmFtZXRlcnMuVHJlZU5vZGUSHwoXbnVtUHJlZGljdGlvbkRp",
            "bWVuc2lvbnMYAiABKAQSGwoTYmFzZVByZWRpY3Rpb25WYWx1ZRgDIAMoARql",
            "BQoIVHJlZU5vZGUSDgoGdHJlZUlkGAEgASgEEg4KBm5vZGVJZBgCIAEoBBJc",
            "Cgxub2RlQmVoYXZpb3IYAyABKA4yRi5Db3JlTUwuU3BlY2lmaWNhdGlvbi5U",
            "cmVlRW5zZW1ibGVQYXJhbWV0ZXJzLlRyZWVOb2RlLlRyZWVOb2RlQmVoYXZp",
            "b3ISGgoSYnJhbmNoRmVhdHVyZUluZGV4GAogASgEEhoKEmJyYW5jaEZlYXR1",
            "cmVWYWx1ZRgLIAEoARIXCg90cnVlQ2hpbGROb2RlSWQYDCABKAQSGAoQZmFs",
            "c2VDaGlsZE5vZGVJZBgNIAEoBBIjChttaXNzaW5nVmFsdWVUcmFja3NUcnVl",
            "Q2hpbGQYDiABKAgSXAoOZXZhbHVhdGlvbkluZm8YFCADKAsyRC5Db3JlTUwu",
            "U3BlY2lmaWNhdGlvbi5UcmVlRW5zZW1ibGVQYXJhbWV0ZXJzLlRyZWVOb2Rl",
            "LkV2YWx1YXRpb25JbmZvEhcKD3JlbGF0aXZlSGl0UmF0ZRgeIAEoARpCCg5F",
            "dmFsdWF0aW9uSW5mbxIXCg9ldmFsdWF0aW9uSW5kZXgYASABKAQSFwoPZXZh",
            "bHVhdGlvblZhbHVlGAIgASgBIs8BChBUcmVlTm9kZUJlaGF2aW9yEh4KGkJy",
            "YW5jaE9uVmFsdWVMZXNzVGhhbkVxdWFsEAASGQoVQnJhbmNoT25WYWx1ZUxl",
            "c3NUaGFuEAESIQodQnJhbmNoT25WYWx1ZUdyZWF0ZXJUaGFuRXF1YWwQAhIc",
            "ChhCcmFuY2hPblZhbHVlR3JlYXRlclRoYW4QAxIWChJCcmFuY2hPblZhbHVl",
            "RXF1YWwQBBIZChVCcmFuY2hPblZhbHVlTm90RXF1YWwQBRIMCghMZWFmTm9k",
            "ZRAGIscCChZUcmVlRW5zZW1ibGVDbGFzc2lmaWVyEkIKDHRyZWVFbnNlbWJs",
            "ZRgBIAEoCzIsLkNvcmVNTC5TcGVjaWZpY2F0aW9uLlRyZWVFbnNlbWJsZVBh",
            "cmFtZXRlcnMSWgoXcG9zdEV2YWx1YXRpb25UcmFuc2Zvcm0YAiABKA4yOS5D",
            "b3JlTUwuU3BlY2lmaWNhdGlvbi5UcmVlRW5zZW1ibGVQb3N0RXZhbHVhdGlv",
            "blRyYW5zZm9ybRI/ChFzdHJpbmdDbGFzc0xhYmVscxhkIAEoCzIiLkNvcmVN",
            "TC5TcGVjaWZpY2F0aW9uLlN0cmluZ1ZlY3RvckgAEj0KEGludDY0Q2xhc3NM",
            "YWJlbHMYZSABKAsyIS5Db3JlTUwuU3BlY2lmaWNhdGlvbi5JbnQ2NFZlY3Rv",
            "ckgAQg0KC0NsYXNzTGFiZWxzIrcBChVUcmVlRW5zZW1ibGVSZWdyZXNzb3IS",
            "QgoMdHJlZUVuc2VtYmxlGAEgASgLMiwuQ29yZU1MLlNwZWNpZmljYXRpb24u",
            "VHJlZUVuc2VtYmxlUGFyYW1ldGVycxJaChdwb3N0RXZhbHVhdGlvblRyYW5z",
            "Zm9ybRgCIAEoDjI5LkNvcmVNTC5TcGVjaWZpY2F0aW9uLlRyZWVFbnNlbWJs",
            "ZVBvc3RFdmFsdWF0aW9uVHJhbnNmb3JtKp0BCiNUcmVlRW5zZW1ibGVQb3N0",
            "RXZhbHVhdGlvblRyYW5zZm9ybRIPCgtOb1RyYW5zZm9ybRAAEhoKFkNsYXNz",
            "aWZpY2F0aW9uX1NvZnRNYXgQARIXChNSZWdyZXNzaW9uX0xvZ2lzdGljEAIS",
            "MAosQ2xhc3NpZmljYXRpb25fU29mdE1heFdpdGhaZXJvQ2xhc3NSZWZlcmVu",
            "Y2UQA0ICSANQAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::CoreML.Specification.DataStructuresReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::CoreML.Specification.TreeEnsemblePostEvaluationTransform), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.TreeEnsembleParameters), global::CoreML.Specification.TreeEnsembleParameters.Parser, new[]{ "Nodes", "NumPredictionDimensions", "BasePredictionValue" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.TreeEnsembleParameters.Types.TreeNode), global::CoreML.Specification.TreeEnsembleParameters.Types.TreeNode.Parser, new[]{ "TreeId", "NodeId", "NodeBehavior", "BranchFeatureIndex", "BranchFeatureValue", "TrueChildNodeId", "FalseChildNodeId", "MissingValueTracksTrueChild", "EvaluationInfo", "RelativeHitRate" }, null, new[]{ typeof(global::CoreML.Specification.TreeEnsembleParameters.Types.TreeNode.Types.TreeNodeBehavior) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.TreeEnsembleParameters.Types.TreeNode.Types.EvaluationInfo), global::CoreML.Specification.TreeEnsembleParameters.Types.TreeNode.Types.EvaluationInfo.Parser, new[]{ "EvaluationIndex", "EvaluationValue" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.TreeEnsembleClassifier), global::CoreML.Specification.TreeEnsembleClassifier.Parser, new[]{ "TreeEnsemble", "PostEvaluationTransform", "StringClassLabels", "Int64ClassLabels" }, new[]{ "ClassLabels" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.TreeEnsembleRegressor), global::CoreML.Specification.TreeEnsembleRegressor.Parser, new[]{ "TreeEnsemble", "PostEvaluationTransform" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///*
  /// A tree ensemble post-evaluation transform.
  /// </summary>
  public enum TreeEnsemblePostEvaluationTransform {
    [pbr::OriginalName("NoTransform")] NoTransform = 0,
    [pbr::OriginalName("Classification_SoftMax")] ClassificationSoftMax = 1,
    [pbr::OriginalName("Regression_Logistic")] RegressionLogistic = 2,
    [pbr::OriginalName("Classification_SoftMaxWithZeroClassReference")] ClassificationSoftMaxWithZeroClassReference = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///*
  /// Tree ensemble parameters.
  /// </summary>
  public sealed partial class TreeEnsembleParameters : pb::IMessage<TreeEnsembleParameters> {
    private static readonly pb::MessageParser<TreeEnsembleParameters> _parser = new pb::MessageParser<TreeEnsembleParameters>(() => new TreeEnsembleParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TreeEnsembleParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.TreeEnsembleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeEnsembleParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeEnsembleParameters(TreeEnsembleParameters other) : this() {
      nodes_ = other.nodes_.Clone();
      numPredictionDimensions_ = other.numPredictionDimensions_;
      basePredictionValue_ = other.basePredictionValue_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeEnsembleParameters Clone() {
      return new TreeEnsembleParameters(this);
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CoreML.Specification.TreeEnsembleParameters.Types.TreeNode> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(10, global::CoreML.Specification.TreeEnsembleParameters.Types.TreeNode.Parser);
    private readonly pbc::RepeatedField<global::CoreML.Specification.TreeEnsembleParameters.Types.TreeNode> nodes_ = new pbc::RepeatedField<global::CoreML.Specification.TreeEnsembleParameters.Types.TreeNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CoreML.Specification.TreeEnsembleParameters.Types.TreeNode> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "numPredictionDimensions" field.</summary>
    public const int NumPredictionDimensionsFieldNumber = 2;
    private ulong numPredictionDimensions_;
    /// <summary>
    ///*
    /// The number of prediction dimensions or classes in the model.
    ///
    /// All instances of ``evaluationIndex`` in a leaf node
    /// must be less than this value,
    /// and the number of values in the ``basePredictionValue`` field
    /// must be equal to this value.
    ///
    /// For regression,
    /// this is the dimension of the prediction.
    /// For classification,
    /// this is the number of classes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NumPredictionDimensions {
      get { return numPredictionDimensions_; }
      set {
        numPredictionDimensions_ = value;
      }
    }

    /// <summary>Field number for the "basePredictionValue" field.</summary>
    public const int BasePredictionValueFieldNumber = 3;
    private static readonly pb::FieldCodec<double> _repeated_basePredictionValue_codec
        = pb::FieldCodec.ForDouble(26);
    private readonly pbc::RepeatedField<double> basePredictionValue_ = new pbc::RepeatedField<double>();
    /// <summary>
    ///*
    /// The base prediction value.
    ///
    /// The number of values in this must match
    /// the default values of the tree model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> BasePredictionValue {
      get { return basePredictionValue_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TreeEnsembleParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TreeEnsembleParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodes_.Equals(other.nodes_)) return false;
      if (NumPredictionDimensions != other.NumPredictionDimensions) return false;
      if(!basePredictionValue_.Equals(other.basePredictionValue_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodes_.GetHashCode();
      if (NumPredictionDimensions != 0UL) hash ^= NumPredictionDimensions.GetHashCode();
      hash ^= basePredictionValue_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodes_.WriteTo(output, _repeated_nodes_codec);
      if (NumPredictionDimensions != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(NumPredictionDimensions);
      }
      basePredictionValue_.WriteTo(output, _repeated_basePredictionValue_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      if (NumPredictionDimensions != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NumPredictionDimensions);
      }
      size += basePredictionValue_.CalculateSize(_repeated_basePredictionValue_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TreeEnsembleParameters other) {
      if (other == null) {
        return;
      }
      nodes_.Add(other.nodes_);
      if (other.NumPredictionDimensions != 0UL) {
        NumPredictionDimensions = other.NumPredictionDimensions;
      }
      basePredictionValue_.Add(other.basePredictionValue_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 16: {
            NumPredictionDimensions = input.ReadUInt64();
            break;
          }
          case 26:
          case 25: {
            basePredictionValue_.AddEntriesFrom(input, _repeated_basePredictionValue_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TreeEnsembleParameters message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class TreeNode : pb::IMessage<TreeNode> {
        private static readonly pb::MessageParser<TreeNode> _parser = new pb::MessageParser<TreeNode>(() => new TreeNode());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TreeNode> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CoreML.Specification.TreeEnsembleParameters.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TreeNode() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TreeNode(TreeNode other) : this() {
          treeId_ = other.treeId_;
          nodeId_ = other.nodeId_;
          nodeBehavior_ = other.nodeBehavior_;
          branchFeatureIndex_ = other.branchFeatureIndex_;
          branchFeatureValue_ = other.branchFeatureValue_;
          trueChildNodeId_ = other.trueChildNodeId_;
          falseChildNodeId_ = other.falseChildNodeId_;
          missingValueTracksTrueChild_ = other.missingValueTracksTrueChild_;
          evaluationInfo_ = other.evaluationInfo_.Clone();
          relativeHitRate_ = other.relativeHitRate_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TreeNode Clone() {
          return new TreeNode(this);
        }

        /// <summary>Field number for the "treeId" field.</summary>
        public const int TreeIdFieldNumber = 1;
        private ulong treeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong TreeId {
          get { return treeId_; }
          set {
            treeId_ = value;
          }
        }

        /// <summary>Field number for the "nodeId" field.</summary>
        public const int NodeIdFieldNumber = 2;
        private ulong nodeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong NodeId {
          get { return nodeId_; }
          set {
            nodeId_ = value;
          }
        }

        /// <summary>Field number for the "nodeBehavior" field.</summary>
        public const int NodeBehaviorFieldNumber = 3;
        private global::CoreML.Specification.TreeEnsembleParameters.Types.TreeNode.Types.TreeNodeBehavior nodeBehavior_ = 0;
        /// <summary>
        ///*
        /// The branch mode parameters.
        ///
        /// If branch is false,
        /// then the parameters in this section must be filled in
        /// to determine how the branching functions.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CoreML.Specification.TreeEnsembleParameters.Types.TreeNode.Types.TreeNodeBehavior NodeBehavior {
          get { return nodeBehavior_; }
          set {
            nodeBehavior_ = value;
          }
        }

        /// <summary>Field number for the "branchFeatureIndex" field.</summary>
        public const int BranchFeatureIndexFieldNumber = 10;
        private ulong branchFeatureIndex_;
        /// <summary>
        ///*
        /// If the node behavior mode is a branch mode,
        /// then these values must be filled in.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong BranchFeatureIndex {
          get { return branchFeatureIndex_; }
          set {
            branchFeatureIndex_ = value;
          }
        }

        /// <summary>Field number for the "branchFeatureValue" field.</summary>
        public const int BranchFeatureValueFieldNumber = 11;
        private double branchFeatureValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double BranchFeatureValue {
          get { return branchFeatureValue_; }
          set {
            branchFeatureValue_ = value;
          }
        }

        /// <summary>Field number for the "trueChildNodeId" field.</summary>
        public const int TrueChildNodeIdFieldNumber = 12;
        private ulong trueChildNodeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong TrueChildNodeId {
          get { return trueChildNodeId_; }
          set {
            trueChildNodeId_ = value;
          }
        }

        /// <summary>Field number for the "falseChildNodeId" field.</summary>
        public const int FalseChildNodeIdFieldNumber = 13;
        private ulong falseChildNodeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong FalseChildNodeId {
          get { return falseChildNodeId_; }
          set {
            falseChildNodeId_ = value;
          }
        }

        /// <summary>Field number for the "missingValueTracksTrueChild" field.</summary>
        public const int MissingValueTracksTrueChildFieldNumber = 14;
        private bool missingValueTracksTrueChild_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool MissingValueTracksTrueChild {
          get { return missingValueTracksTrueChild_; }
          set {
            missingValueTracksTrueChild_ = value;
          }
        }

        /// <summary>Field number for the "evaluationInfo" field.</summary>
        public const int EvaluationInfoFieldNumber = 20;
        private static readonly pb::FieldCodec<global::CoreML.Specification.TreeEnsembleParameters.Types.TreeNode.Types.EvaluationInfo> _repeated_evaluationInfo_codec
            = pb::FieldCodec.ForMessage(162, global::CoreML.Specification.TreeEnsembleParameters.Types.TreeNode.Types.EvaluationInfo.Parser);
        private readonly pbc::RepeatedField<global::CoreML.Specification.TreeEnsembleParameters.Types.TreeNode.Types.EvaluationInfo> evaluationInfo_ = new pbc::RepeatedField<global::CoreML.Specification.TreeEnsembleParameters.Types.TreeNode.Types.EvaluationInfo>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::CoreML.Specification.TreeEnsembleParameters.Types.TreeNode.Types.EvaluationInfo> EvaluationInfo {
          get { return evaluationInfo_; }
        }

        /// <summary>Field number for the "relativeHitRate" field.</summary>
        public const int RelativeHitRateFieldNumber = 30;
        private double relativeHitRate_;
        /// <summary>
        ///*
        /// The relative hit rate of a node for optimization purposes.
        ///
        /// This value has no effect on the accuracy of the result;
        /// it allows the tree to optimize for frequent branches.
        /// The value is relative,
        /// compared to the hit rates of other branch nodes.
        ///
        /// You typically use a proportion of training samples
        /// that reached this node
        /// or some similar metric to derive this value.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double RelativeHitRate {
          get { return relativeHitRate_; }
          set {
            relativeHitRate_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TreeNode);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TreeNode other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TreeId != other.TreeId) return false;
          if (NodeId != other.NodeId) return false;
          if (NodeBehavior != other.NodeBehavior) return false;
          if (BranchFeatureIndex != other.BranchFeatureIndex) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BranchFeatureValue, other.BranchFeatureValue)) return false;
          if (TrueChildNodeId != other.TrueChildNodeId) return false;
          if (FalseChildNodeId != other.FalseChildNodeId) return false;
          if (MissingValueTracksTrueChild != other.MissingValueTracksTrueChild) return false;
          if(!evaluationInfo_.Equals(other.evaluationInfo_)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RelativeHitRate, other.RelativeHitRate)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TreeId != 0UL) hash ^= TreeId.GetHashCode();
          if (NodeId != 0UL) hash ^= NodeId.GetHashCode();
          if (NodeBehavior != 0) hash ^= NodeBehavior.GetHashCode();
          if (BranchFeatureIndex != 0UL) hash ^= BranchFeatureIndex.GetHashCode();
          if (BranchFeatureValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BranchFeatureValue);
          if (TrueChildNodeId != 0UL) hash ^= TrueChildNodeId.GetHashCode();
          if (FalseChildNodeId != 0UL) hash ^= FalseChildNodeId.GetHashCode();
          if (MissingValueTracksTrueChild != false) hash ^= MissingValueTracksTrueChild.GetHashCode();
          hash ^= evaluationInfo_.GetHashCode();
          if (RelativeHitRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RelativeHitRate);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TreeId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(TreeId);
          }
          if (NodeId != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(NodeId);
          }
          if (NodeBehavior != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) NodeBehavior);
          }
          if (BranchFeatureIndex != 0UL) {
            output.WriteRawTag(80);
            output.WriteUInt64(BranchFeatureIndex);
          }
          if (BranchFeatureValue != 0D) {
            output.WriteRawTag(89);
            output.WriteDouble(BranchFeatureValue);
          }
          if (TrueChildNodeId != 0UL) {
            output.WriteRawTag(96);
            output.WriteUInt64(TrueChildNodeId);
          }
          if (FalseChildNodeId != 0UL) {
            output.WriteRawTag(104);
            output.WriteUInt64(FalseChildNodeId);
          }
          if (MissingValueTracksTrueChild != false) {
            output.WriteRawTag(112);
            output.WriteBool(MissingValueTracksTrueChild);
          }
          evaluationInfo_.WriteTo(output, _repeated_evaluationInfo_codec);
          if (RelativeHitRate != 0D) {
            output.WriteRawTag(241, 1);
            output.WriteDouble(RelativeHitRate);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TreeId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TreeId);
          }
          if (NodeId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NodeId);
          }
          if (NodeBehavior != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NodeBehavior);
          }
          if (BranchFeatureIndex != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BranchFeatureIndex);
          }
          if (BranchFeatureValue != 0D) {
            size += 1 + 8;
          }
          if (TrueChildNodeId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TrueChildNodeId);
          }
          if (FalseChildNodeId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FalseChildNodeId);
          }
          if (MissingValueTracksTrueChild != false) {
            size += 1 + 1;
          }
          size += evaluationInfo_.CalculateSize(_repeated_evaluationInfo_codec);
          if (RelativeHitRate != 0D) {
            size += 2 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TreeNode other) {
          if (other == null) {
            return;
          }
          if (other.TreeId != 0UL) {
            TreeId = other.TreeId;
          }
          if (other.NodeId != 0UL) {
            NodeId = other.NodeId;
          }
          if (other.NodeBehavior != 0) {
            NodeBehavior = other.NodeBehavior;
          }
          if (other.BranchFeatureIndex != 0UL) {
            BranchFeatureIndex = other.BranchFeatureIndex;
          }
          if (other.BranchFeatureValue != 0D) {
            BranchFeatureValue = other.BranchFeatureValue;
          }
          if (other.TrueChildNodeId != 0UL) {
            TrueChildNodeId = other.TrueChildNodeId;
          }
          if (other.FalseChildNodeId != 0UL) {
            FalseChildNodeId = other.FalseChildNodeId;
          }
          if (other.MissingValueTracksTrueChild != false) {
            MissingValueTracksTrueChild = other.MissingValueTracksTrueChild;
          }
          evaluationInfo_.Add(other.evaluationInfo_);
          if (other.RelativeHitRate != 0D) {
            RelativeHitRate = other.RelativeHitRate;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                TreeId = input.ReadUInt64();
                break;
              }
              case 16: {
                NodeId = input.ReadUInt64();
                break;
              }
              case 24: {
                nodeBehavior_ = (global::CoreML.Specification.TreeEnsembleParameters.Types.TreeNode.Types.TreeNodeBehavior) input.ReadEnum();
                break;
              }
              case 80: {
                BranchFeatureIndex = input.ReadUInt64();
                break;
              }
              case 89: {
                BranchFeatureValue = input.ReadDouble();
                break;
              }
              case 96: {
                TrueChildNodeId = input.ReadUInt64();
                break;
              }
              case 104: {
                FalseChildNodeId = input.ReadUInt64();
                break;
              }
              case 112: {
                MissingValueTracksTrueChild = input.ReadBool();
                break;
              }
              case 162: {
                evaluationInfo_.AddEntriesFrom(input, _repeated_evaluationInfo_codec);
                break;
              }
              case 241: {
                RelativeHitRate = input.ReadDouble();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the TreeNode message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum TreeNodeBehavior {
            [pbr::OriginalName("BranchOnValueLessThanEqual")] BranchOnValueLessThanEqual = 0,
            [pbr::OriginalName("BranchOnValueLessThan")] BranchOnValueLessThan = 1,
            [pbr::OriginalName("BranchOnValueGreaterThanEqual")] BranchOnValueGreaterThanEqual = 2,
            [pbr::OriginalName("BranchOnValueGreaterThan")] BranchOnValueGreaterThan = 3,
            [pbr::OriginalName("BranchOnValueEqual")] BranchOnValueEqual = 4,
            [pbr::OriginalName("BranchOnValueNotEqual")] BranchOnValueNotEqual = 5,
            [pbr::OriginalName("LeafNode")] LeafNode = 6,
          }

          /// <summary>
          ///*
          /// The leaf mode.
          ///
          /// If ``nodeBahavior`` == ``LeafNode``,
          /// then the evaluationValue is added to the base prediction value
          /// in order to get the final prediction.
          /// To support multiclass classification
          /// as well as regression and binary classification,
          /// the evaluation value is encoded here as a sparse vector,
          /// with evaluationIndex being the index of the base vector
          /// that evaluation value is added to.
          /// In the single class case,
          /// it is expected that evaluationIndex is exactly 0.
          /// </summary>
          public sealed partial class EvaluationInfo : pb::IMessage<EvaluationInfo> {
            private static readonly pb::MessageParser<EvaluationInfo> _parser = new pb::MessageParser<EvaluationInfo>(() => new EvaluationInfo());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<EvaluationInfo> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::CoreML.Specification.TreeEnsembleParameters.Types.TreeNode.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public EvaluationInfo() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public EvaluationInfo(EvaluationInfo other) : this() {
              evaluationIndex_ = other.evaluationIndex_;
              evaluationValue_ = other.evaluationValue_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public EvaluationInfo Clone() {
              return new EvaluationInfo(this);
            }

            /// <summary>Field number for the "evaluationIndex" field.</summary>
            public const int EvaluationIndexFieldNumber = 1;
            private ulong evaluationIndex_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong EvaluationIndex {
              get { return evaluationIndex_; }
              set {
                evaluationIndex_ = value;
              }
            }

            /// <summary>Field number for the "evaluationValue" field.</summary>
            public const int EvaluationValueFieldNumber = 2;
            private double evaluationValue_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double EvaluationValue {
              get { return evaluationValue_; }
              set {
                evaluationValue_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as EvaluationInfo);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(EvaluationInfo other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (EvaluationIndex != other.EvaluationIndex) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EvaluationValue, other.EvaluationValue)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (EvaluationIndex != 0UL) hash ^= EvaluationIndex.GetHashCode();
              if (EvaluationValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EvaluationValue);
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (EvaluationIndex != 0UL) {
                output.WriteRawTag(8);
                output.WriteUInt64(EvaluationIndex);
              }
              if (EvaluationValue != 0D) {
                output.WriteRawTag(17);
                output.WriteDouble(EvaluationValue);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (EvaluationIndex != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EvaluationIndex);
              }
              if (EvaluationValue != 0D) {
                size += 1 + 8;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(EvaluationInfo other) {
              if (other == null) {
                return;
              }
              if (other.EvaluationIndex != 0UL) {
                EvaluationIndex = other.EvaluationIndex;
              }
              if (other.EvaluationValue != 0D) {
                EvaluationValue = other.EvaluationValue;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    EvaluationIndex = input.ReadUInt64();
                    break;
                  }
                  case 17: {
                    EvaluationValue = input.ReadDouble();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// A tree ensemble classifier.
  /// </summary>
  public sealed partial class TreeEnsembleClassifier : pb::IMessage<TreeEnsembleClassifier> {
    private static readonly pb::MessageParser<TreeEnsembleClassifier> _parser = new pb::MessageParser<TreeEnsembleClassifier>(() => new TreeEnsembleClassifier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TreeEnsembleClassifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.TreeEnsembleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeEnsembleClassifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeEnsembleClassifier(TreeEnsembleClassifier other) : this() {
      treeEnsemble_ = other.treeEnsemble_ != null ? other.treeEnsemble_.Clone() : null;
      postEvaluationTransform_ = other.postEvaluationTransform_;
      switch (other.ClassLabelsCase) {
        case ClassLabelsOneofCase.StringClassLabels:
          StringClassLabels = other.StringClassLabels.Clone();
          break;
        case ClassLabelsOneofCase.Int64ClassLabels:
          Int64ClassLabels = other.Int64ClassLabels.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeEnsembleClassifier Clone() {
      return new TreeEnsembleClassifier(this);
    }

    /// <summary>Field number for the "treeEnsemble" field.</summary>
    public const int TreeEnsembleFieldNumber = 1;
    private global::CoreML.Specification.TreeEnsembleParameters treeEnsemble_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.TreeEnsembleParameters TreeEnsemble {
      get { return treeEnsemble_; }
      set {
        treeEnsemble_ = value;
      }
    }

    /// <summary>Field number for the "postEvaluationTransform" field.</summary>
    public const int PostEvaluationTransformFieldNumber = 2;
    private global::CoreML.Specification.TreeEnsemblePostEvaluationTransform postEvaluationTransform_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.TreeEnsemblePostEvaluationTransform PostEvaluationTransform {
      get { return postEvaluationTransform_; }
      set {
        postEvaluationTransform_ = value;
      }
    }

    /// <summary>Field number for the "stringClassLabels" field.</summary>
    public const int StringClassLabelsFieldNumber = 100;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.StringVector StringClassLabels {
      get { return classLabelsCase_ == ClassLabelsOneofCase.StringClassLabels ? (global::CoreML.Specification.StringVector) classLabels_ : null; }
      set {
        classLabels_ = value;
        classLabelsCase_ = value == null ? ClassLabelsOneofCase.None : ClassLabelsOneofCase.StringClassLabels;
      }
    }

    /// <summary>Field number for the "int64ClassLabels" field.</summary>
    public const int Int64ClassLabelsFieldNumber = 101;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Int64Vector Int64ClassLabels {
      get { return classLabelsCase_ == ClassLabelsOneofCase.Int64ClassLabels ? (global::CoreML.Specification.Int64Vector) classLabels_ : null; }
      set {
        classLabels_ = value;
        classLabelsCase_ = value == null ? ClassLabelsOneofCase.None : ClassLabelsOneofCase.Int64ClassLabels;
      }
    }

    private object classLabels_;
    /// <summary>Enum of possible cases for the "ClassLabels" oneof.</summary>
    public enum ClassLabelsOneofCase {
      None = 0,
      StringClassLabels = 100,
      Int64ClassLabels = 101,
    }
    private ClassLabelsOneofCase classLabelsCase_ = ClassLabelsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassLabelsOneofCase ClassLabelsCase {
      get { return classLabelsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClassLabels() {
      classLabelsCase_ = ClassLabelsOneofCase.None;
      classLabels_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TreeEnsembleClassifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TreeEnsembleClassifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TreeEnsemble, other.TreeEnsemble)) return false;
      if (PostEvaluationTransform != other.PostEvaluationTransform) return false;
      if (!object.Equals(StringClassLabels, other.StringClassLabels)) return false;
      if (!object.Equals(Int64ClassLabels, other.Int64ClassLabels)) return false;
      if (ClassLabelsCase != other.ClassLabelsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (treeEnsemble_ != null) hash ^= TreeEnsemble.GetHashCode();
      if (PostEvaluationTransform != 0) hash ^= PostEvaluationTransform.GetHashCode();
      if (classLabelsCase_ == ClassLabelsOneofCase.StringClassLabels) hash ^= StringClassLabels.GetHashCode();
      if (classLabelsCase_ == ClassLabelsOneofCase.Int64ClassLabels) hash ^= Int64ClassLabels.GetHashCode();
      hash ^= (int) classLabelsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (treeEnsemble_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TreeEnsemble);
      }
      if (PostEvaluationTransform != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PostEvaluationTransform);
      }
      if (classLabelsCase_ == ClassLabelsOneofCase.StringClassLabels) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(StringClassLabels);
      }
      if (classLabelsCase_ == ClassLabelsOneofCase.Int64ClassLabels) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(Int64ClassLabels);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (treeEnsemble_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TreeEnsemble);
      }
      if (PostEvaluationTransform != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PostEvaluationTransform);
      }
      if (classLabelsCase_ == ClassLabelsOneofCase.StringClassLabels) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StringClassLabels);
      }
      if (classLabelsCase_ == ClassLabelsOneofCase.Int64ClassLabels) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Int64ClassLabels);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TreeEnsembleClassifier other) {
      if (other == null) {
        return;
      }
      if (other.treeEnsemble_ != null) {
        if (treeEnsemble_ == null) {
          treeEnsemble_ = new global::CoreML.Specification.TreeEnsembleParameters();
        }
        TreeEnsemble.MergeFrom(other.TreeEnsemble);
      }
      if (other.PostEvaluationTransform != 0) {
        PostEvaluationTransform = other.PostEvaluationTransform;
      }
      switch (other.ClassLabelsCase) {
        case ClassLabelsOneofCase.StringClassLabels:
          if (StringClassLabels == null) {
            StringClassLabels = new global::CoreML.Specification.StringVector();
          }
          StringClassLabels.MergeFrom(other.StringClassLabels);
          break;
        case ClassLabelsOneofCase.Int64ClassLabels:
          if (Int64ClassLabels == null) {
            Int64ClassLabels = new global::CoreML.Specification.Int64Vector();
          }
          Int64ClassLabels.MergeFrom(other.Int64ClassLabels);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (treeEnsemble_ == null) {
              treeEnsemble_ = new global::CoreML.Specification.TreeEnsembleParameters();
            }
            input.ReadMessage(treeEnsemble_);
            break;
          }
          case 16: {
            postEvaluationTransform_ = (global::CoreML.Specification.TreeEnsemblePostEvaluationTransform) input.ReadEnum();
            break;
          }
          case 802: {
            global::CoreML.Specification.StringVector subBuilder = new global::CoreML.Specification.StringVector();
            if (classLabelsCase_ == ClassLabelsOneofCase.StringClassLabels) {
              subBuilder.MergeFrom(StringClassLabels);
            }
            input.ReadMessage(subBuilder);
            StringClassLabels = subBuilder;
            break;
          }
          case 810: {
            global::CoreML.Specification.Int64Vector subBuilder = new global::CoreML.Specification.Int64Vector();
            if (classLabelsCase_ == ClassLabelsOneofCase.Int64ClassLabels) {
              subBuilder.MergeFrom(Int64ClassLabels);
            }
            input.ReadMessage(subBuilder);
            Int64ClassLabels = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A tree ensemble regressor.
  /// </summary>
  public sealed partial class TreeEnsembleRegressor : pb::IMessage<TreeEnsembleRegressor> {
    private static readonly pb::MessageParser<TreeEnsembleRegressor> _parser = new pb::MessageParser<TreeEnsembleRegressor>(() => new TreeEnsembleRegressor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TreeEnsembleRegressor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.TreeEnsembleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeEnsembleRegressor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeEnsembleRegressor(TreeEnsembleRegressor other) : this() {
      treeEnsemble_ = other.treeEnsemble_ != null ? other.treeEnsemble_.Clone() : null;
      postEvaluationTransform_ = other.postEvaluationTransform_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeEnsembleRegressor Clone() {
      return new TreeEnsembleRegressor(this);
    }

    /// <summary>Field number for the "treeEnsemble" field.</summary>
    public const int TreeEnsembleFieldNumber = 1;
    private global::CoreML.Specification.TreeEnsembleParameters treeEnsemble_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.TreeEnsembleParameters TreeEnsemble {
      get { return treeEnsemble_; }
      set {
        treeEnsemble_ = value;
      }
    }

    /// <summary>Field number for the "postEvaluationTransform" field.</summary>
    public const int PostEvaluationTransformFieldNumber = 2;
    private global::CoreML.Specification.TreeEnsemblePostEvaluationTransform postEvaluationTransform_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.TreeEnsemblePostEvaluationTransform PostEvaluationTransform {
      get { return postEvaluationTransform_; }
      set {
        postEvaluationTransform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TreeEnsembleRegressor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TreeEnsembleRegressor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TreeEnsemble, other.TreeEnsemble)) return false;
      if (PostEvaluationTransform != other.PostEvaluationTransform) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (treeEnsemble_ != null) hash ^= TreeEnsemble.GetHashCode();
      if (PostEvaluationTransform != 0) hash ^= PostEvaluationTransform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (treeEnsemble_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TreeEnsemble);
      }
      if (PostEvaluationTransform != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PostEvaluationTransform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (treeEnsemble_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TreeEnsemble);
      }
      if (PostEvaluationTransform != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PostEvaluationTransform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TreeEnsembleRegressor other) {
      if (other == null) {
        return;
      }
      if (other.treeEnsemble_ != null) {
        if (treeEnsemble_ == null) {
          treeEnsemble_ = new global::CoreML.Specification.TreeEnsembleParameters();
        }
        TreeEnsemble.MergeFrom(other.TreeEnsemble);
      }
      if (other.PostEvaluationTransform != 0) {
        PostEvaluationTransform = other.PostEvaluationTransform;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (treeEnsemble_ == null) {
              treeEnsemble_ = new global::CoreML.Specification.TreeEnsembleParameters();
            }
            input.ReadMessage(treeEnsemble_);
            break;
          }
          case 16: {
            postEvaluationTransform_ = (global::CoreML.Specification.TreeEnsemblePostEvaluationTransform) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

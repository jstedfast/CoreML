// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: DictVectorizer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CoreML.Specification {

  /// <summary>Holder for reflection information generated from DictVectorizer.proto</summary>
  public static partial class DictVectorizerReflection {

    #region Descriptor
    /// <summary>File descriptor for DictVectorizer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DictVectorizerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChREaWN0VmVjdG9yaXplci5wcm90bxIUQ29yZU1MLlNwZWNpZmljYXRpb24a",
            "FERhdGFTdHJ1Y3R1cmVzLnByb3RvIo8BCg5EaWN0VmVjdG9yaXplchI7Cg1z",
            "dHJpbmdUb0luZGV4GAEgASgLMiIuQ29yZU1MLlNwZWNpZmljYXRpb24uU3Ry",
            "aW5nVmVjdG9ySAASOQoMaW50NjRUb0luZGV4GAIgASgLMiEuQ29yZU1MLlNw",
            "ZWNpZmljYXRpb24uSW50NjRWZWN0b3JIAEIFCgNNYXBCAkgDUABiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::CoreML.Specification.DataStructuresReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CoreML.Specification.DictVectorizer), global::CoreML.Specification.DictVectorizer.Parser, new[]{ "StringToIndex", "Int64ToIndex" }, new[]{ "Map" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// Uses an index mapping to convert a dictionary to an array.
  ///
  /// The output array will be equal in length to the index mapping vector parameter.
  /// All keys in the input dictionary must be present in the index mapping vector.
  ///
  /// For each item in the input dictionary, insert its value in the output array.
  /// The position of the insertion is determined by the position of the item's key
  /// in the index mapping. Any keys not present in the input dictionary, will be
  /// zero in the output array.
  ///
  /// For example: if the ``stringToIndex`` parameter is set to ``["a", "c", "b", "z"]``,
  /// then an input of ``{"a": 4, "c": 8}`` will produce an output of ``[4, 8, 0, 0]``.
  /// </summary>
  public sealed partial class DictVectorizer : pb::IMessage<DictVectorizer> {
    private static readonly pb::MessageParser<DictVectorizer> _parser = new pb::MessageParser<DictVectorizer>(() => new DictVectorizer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DictVectorizer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CoreML.Specification.DictVectorizerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DictVectorizer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DictVectorizer(DictVectorizer other) : this() {
      switch (other.MapCase) {
        case MapOneofCase.StringToIndex:
          StringToIndex = other.StringToIndex.Clone();
          break;
        case MapOneofCase.Int64ToIndex:
          Int64ToIndex = other.Int64ToIndex.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DictVectorizer Clone() {
      return new DictVectorizer(this);
    }

    /// <summary>Field number for the "stringToIndex" field.</summary>
    public const int StringToIndexFieldNumber = 1;
    /// <summary>
    //// String keys to indexes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.StringVector StringToIndex {
      get { return mapCase_ == MapOneofCase.StringToIndex ? (global::CoreML.Specification.StringVector) map_ : null; }
      set {
        map_ = value;
        mapCase_ = value == null ? MapOneofCase.None : MapOneofCase.StringToIndex;
      }
    }

    /// <summary>Field number for the "int64ToIndex" field.</summary>
    public const int Int64ToIndexFieldNumber = 2;
    /// <summary>
    //// Int keys to indexes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CoreML.Specification.Int64Vector Int64ToIndex {
      get { return mapCase_ == MapOneofCase.Int64ToIndex ? (global::CoreML.Specification.Int64Vector) map_ : null; }
      set {
        map_ = value;
        mapCase_ = value == null ? MapOneofCase.None : MapOneofCase.Int64ToIndex;
      }
    }

    private object map_;
    /// <summary>Enum of possible cases for the "Map" oneof.</summary>
    public enum MapOneofCase {
      None = 0,
      StringToIndex = 1,
      Int64ToIndex = 2,
    }
    private MapOneofCase mapCase_ = MapOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapOneofCase MapCase {
      get { return mapCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMap() {
      mapCase_ = MapOneofCase.None;
      map_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DictVectorizer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DictVectorizer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StringToIndex, other.StringToIndex)) return false;
      if (!object.Equals(Int64ToIndex, other.Int64ToIndex)) return false;
      if (MapCase != other.MapCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mapCase_ == MapOneofCase.StringToIndex) hash ^= StringToIndex.GetHashCode();
      if (mapCase_ == MapOneofCase.Int64ToIndex) hash ^= Int64ToIndex.GetHashCode();
      hash ^= (int) mapCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mapCase_ == MapOneofCase.StringToIndex) {
        output.WriteRawTag(10);
        output.WriteMessage(StringToIndex);
      }
      if (mapCase_ == MapOneofCase.Int64ToIndex) {
        output.WriteRawTag(18);
        output.WriteMessage(Int64ToIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mapCase_ == MapOneofCase.StringToIndex) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StringToIndex);
      }
      if (mapCase_ == MapOneofCase.Int64ToIndex) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Int64ToIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DictVectorizer other) {
      if (other == null) {
        return;
      }
      switch (other.MapCase) {
        case MapOneofCase.StringToIndex:
          if (StringToIndex == null) {
            StringToIndex = new global::CoreML.Specification.StringVector();
          }
          StringToIndex.MergeFrom(other.StringToIndex);
          break;
        case MapOneofCase.Int64ToIndex:
          if (Int64ToIndex == null) {
            Int64ToIndex = new global::CoreML.Specification.Int64Vector();
          }
          Int64ToIndex.MergeFrom(other.Int64ToIndex);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::CoreML.Specification.StringVector subBuilder = new global::CoreML.Specification.StringVector();
            if (mapCase_ == MapOneofCase.StringToIndex) {
              subBuilder.MergeFrom(StringToIndex);
            }
            input.ReadMessage(subBuilder);
            StringToIndex = subBuilder;
            break;
          }
          case 18: {
            global::CoreML.Specification.Int64Vector subBuilder = new global::CoreML.Specification.Int64Vector();
            if (mapCase_ == MapOneofCase.Int64ToIndex) {
              subBuilder.MergeFrom(Int64ToIndex);
            }
            input.ReadMessage(subBuilder);
            Int64ToIndex = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
